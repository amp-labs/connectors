// Package providers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package providers

import (
	"encoding/json"
	"fmt"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ApiKeyType.
const (
	InBody   ApiKeyType = "in-body"
	InHeader ApiKeyType = "in-header"
	InQuery  ApiKeyType = "in-query"
)

// Defines values for AuthType.
const (
	ApiKey AuthType = "api_key"
	Basic  AuthType = "basic"
	None   AuthType = "none"
	Oauth2 AuthType = "oauth2"
)

// Defines values for Oauth2OptsGrantType.
const (
	AuthorizationCode Oauth2OptsGrantType = "authorizationCode"
	ClientCredentials Oauth2OptsGrantType = "clientCredentials"
	PKCE              Oauth2OptsGrantType = "PKCE"
)

// ApiKeyDocsURL URL with more information about how to get or use an API key.
type ApiKeyDocsURL = string

// ApiKeyInBodyOpts defines model for ApiKeyInBodyOpts.
type ApiKeyInBodyOpts struct {
	BodyParamName string `json:"bodyParamName" validate:"required"`

	// DocsURL URL with more information about how to get or use an API key.
	DocsURL ApiKeyDocsURL `json:"docsURL,omitempty"`
}

// ApiKeyInHeaderOpts defines model for ApiKeyInHeaderOpts.
type ApiKeyInHeaderOpts struct {
	// DocsURL URL with more information about how to get or use an API key.
	DocsURL     ApiKeyDocsURL `json:"docsURL,omitempty"`
	HeaderName  string        `json:"headerName" validate:"required"`
	ValuePrefix string        `json:"valuePrefix,omitempty"`
}

// ApiKeyInQueryParamOpts defines model for ApiKeyInQueryParamOpts.
type ApiKeyInQueryParamOpts struct {
	// DocsURL URL with more information about how to get or use an API key.
	DocsURL        ApiKeyDocsURL `json:"docsURL,omitempty"`
	QueryParamName string        `json:"queryParamName" validate:"required"`
}

// ApiKeyOpts defines model for ApiKeyOpts.
type ApiKeyOpts struct {
	Type  ApiKeyType `json:"type" validate:"required"`
	union json.RawMessage
}

// ApiKeyType defines model for ApiKeyType.
type ApiKeyType string

// AuthType defines model for AuthType.
type AuthType string

// BulkWriteSupport defines model for BulkWriteSupport.
type BulkWriteSupport struct {
	Delete bool `json:"delete"`
	Insert bool `json:"insert"`
	Update bool `json:"update"`
	Upsert bool `json:"upsert"`
}

// CatalogType defines model for CatalogType.
type CatalogType map[string]ProviderInfo

// Oauth2Opts defines model for Oauth2Opts.
type Oauth2Opts struct {
	Audience string `json:"audience,omitempty"`
	AuthURL  string `json:"authURL,omitempty"`

	// DocsURL URL with more information about how to get or use an API key.
	DocsURL                   string              `json:"docsURL,omitempty"`
	ExplicitScopesRequired    bool                `json:"explicitScopesRequired"`
	ExplicitWorkspaceRequired bool                `json:"explicitWorkspaceRequired"`
	GrantType                 Oauth2OptsGrantType `json:"grantType"`
	TokenMetadataFields       TokenMetadataFields `json:"tokenMetadataFields"`
	TokenURL                  string              `json:"tokenURL" validate:"required"`
}

// Oauth2OptsGrantType defines model for Oauth2Opts.GrantType.
type Oauth2OptsGrantType string

// Provider defines model for Provider.
type Provider = string

// ProviderInfo defines model for ProviderInfo.
type ProviderInfo struct {
	ApiKeyOpts *ApiKeyOpts `json:"apiKeyOpts,omitempty"`
	AuthType   AuthType    `json:"authType" validate:"required"`
	BaseURL    string      `json:"baseURL" validate:"required"`

	// DisplayName The display name of the provider, if omitted, defaults to provider name.
	DisplayName string      `json:"displayName,omitempty"`
	Name        string      `json:"name"`
	Oauth2Opts  *Oauth2Opts `json:"oauth2Opts,omitempty"`

	// PostAuthInfoNeeded If true, we require additional information after auth to start making requests.
	PostAuthInfoNeeded bool         `json:"postAuthInfoNeeded,omitempty"`
	ProviderOpts       ProviderOpts `json:"providerOpts"`
	Support            Support      `json:"support" validate:"required"`
}

// ProviderOpts defines model for ProviderOpts.
type ProviderOpts map[string]string

// Support defines model for Support.
type Support struct {
	BulkWrite BulkWriteSupport `json:"bulkWrite" validate:"required"`
	Proxy     bool             `json:"proxy"`
	Read      bool             `json:"read"`
	Subscribe bool             `json:"subscribe"`
	Write     bool             `json:"write"`
}

// TokenMetadataFields defines model for TokenMetadataFields.
type TokenMetadataFields struct {
	ConsumerRefField  string `json:"consumerRefField,omitempty"`
	ScopesField       string `json:"scopesField,omitempty"`
	WorkspaceRefField string `json:"workspaceRefField,omitempty"`
}

// AsApiKeyInHeaderOpts returns the union data inside the ApiKeyOpts as a ApiKeyInHeaderOpts
func (t ApiKeyOpts) AsApiKeyInHeaderOpts() (ApiKeyInHeaderOpts, error) {
	var body ApiKeyInHeaderOpts
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiKeyInHeaderOpts overwrites any union data inside the ApiKeyOpts as the provided ApiKeyInHeaderOpts
func (t *ApiKeyOpts) FromApiKeyInHeaderOpts(v ApiKeyInHeaderOpts) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiKeyInHeaderOpts performs a merge with any union data inside the ApiKeyOpts, using the provided ApiKeyInHeaderOpts
func (t *ApiKeyOpts) MergeApiKeyInHeaderOpts(v ApiKeyInHeaderOpts) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsApiKeyInQueryParamOpts returns the union data inside the ApiKeyOpts as a ApiKeyInQueryParamOpts
func (t ApiKeyOpts) AsApiKeyInQueryParamOpts() (ApiKeyInQueryParamOpts, error) {
	var body ApiKeyInQueryParamOpts
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiKeyInQueryParamOpts overwrites any union data inside the ApiKeyOpts as the provided ApiKeyInQueryParamOpts
func (t *ApiKeyOpts) FromApiKeyInQueryParamOpts(v ApiKeyInQueryParamOpts) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiKeyInQueryParamOpts performs a merge with any union data inside the ApiKeyOpts, using the provided ApiKeyInQueryParamOpts
func (t *ApiKeyOpts) MergeApiKeyInQueryParamOpts(v ApiKeyInQueryParamOpts) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsApiKeyInBodyOpts returns the union data inside the ApiKeyOpts as a ApiKeyInBodyOpts
func (t ApiKeyOpts) AsApiKeyInBodyOpts() (ApiKeyInBodyOpts, error) {
	var body ApiKeyInBodyOpts
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiKeyInBodyOpts overwrites any union data inside the ApiKeyOpts as the provided ApiKeyInBodyOpts
func (t *ApiKeyOpts) FromApiKeyInBodyOpts(v ApiKeyInBodyOpts) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiKeyInBodyOpts performs a merge with any union data inside the ApiKeyOpts, using the provided ApiKeyInBodyOpts
func (t *ApiKeyOpts) MergeApiKeyInBodyOpts(v ApiKeyInBodyOpts) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApiKeyOpts) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *ApiKeyOpts) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}
