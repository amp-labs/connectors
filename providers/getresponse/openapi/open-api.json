{
  "openapi": "3.0.0",
  "info": {
    "title": "GetResponse APIv3",
    "description": "\n\n# Limits and throttling\n\nGetResponse API calls are subject to throttling to ensure a high level of service for all users.\n\n## Time frame\n\nTime frame is a period of time for which we calculate the API call limits. The limits reset in every time frame.\n\nThe time frame duration is **10 minutes**.\n\n## Basic rate limits\n\nEach user is allowed to make **30,000 API calls per time frame** (10 minutes) and **80 API calls per second**.\n\n## Parallel requests limit\n\nIt is possible to send up to **10 simultaneous requests**.\n\n## Headers\n\nEvery API response includes a few additional headers:\n\n*   `X-RateLimit-Limit` – the total number of requests available per time frame\n*   `X-RateLimit-Remaining` – the number of requests left in the current time frame\n*   `X-RateLimit-Reset` – seconds left in the current time frame\n\n## Errors\n\nThe **429 Too Many Requests** HTTP response code indicates that the limit has been reached. The error response includes `currentLimit` and `timeToReset` fields in the context section, with the total number of requests available per time frame and seconds left in the current time frame respectively.\n\n## Reaching the limit\n\nWhen you reach the limit, you need to wait for the time specified in `timeToReset` field or `X-RateLimit-Reset` header before making another request.\n\n# Authentication\n\nAPI can be accessed by authenticated users only. This means that every request must be signed with your credentials. We offer two methods of authentication: API Key and OAuth 2.0. API key is our primary method and should be used in most cases. GetResponse MAX clients have to send an `X-Domain` header in addition to the API key. Supported OAuth 2.0 flows are: Authorization Code, Client Credentials, Implicit, and Refresh Token.\n\n## API key\n\nFollow these steps to send an authentication request:\n\n*   Find your unique and secret API key in the panel: [https://app.getresponse.com/api](https://app.getresponse.com/api)\n*   Add a custom `X-Auth-Token` header to all your requests. For example, if your API key is `jfgs8jh4ksg93ban9Dfgh8`, the header will look like this:\n\n```\nX-Auth-Token: api-key jfgs8jh4ksg93ban9Dfgh8\n```\n\n**For security reasons, unused API keys expire after 90 days. When that happens, you’ll need to generate a new key to use our API.**\n\n### Example authenticated request\n\n```\n$ curl -H \"X-Auth-Token: api-key jfgs8jh4ksg93ban9Dfgh8\" https://api.getresponse.com/v3/accounts\n```\n\n## OAuth 2.0\n\nTo use OAuth 2.0 authentication, you need to get an \"Access Token\". For more information on how to obtain a token, head to our dedicated page: [OAuth 2.0](/#section/Authentication/Using-OAuth-2.0)\n\nTo authenticate a request using an Access Token, set the value of `Authorization` header to \"Bearer\" followed by the Access Token.\n\n### Example\n\nIf the Access Token is `jfg93baDfgh8n9Ds8jh4ksg93ban9Dfgh8`\n\n```\nAuthorization: Bearer jfg93baDfgh8n9Ds8jh4ksg93ban9Dfgh8\n```\n\n## GetResponse MAX\n\nGetResponse MAX customers need to take an extra step to authenticate the request. All requests have to be send with an `X-Domain` header that contains the client's domain. For example:\n\n```\nX-Domain: example.com\n```\n\nPlease note that the header must contain only the domain name, without the protocol identifier (`http://` or `https://`).\n\n## Using OAuth 2.0\n\n### Registering your own application\n\nIf you want to use an OAuth flow to authorize your application, first [register your application](https://app.getresponse.com/authorizations)\n\nYou need to provide a name, short description, and redirect URL.\n\n### Choosing grant flow\n\nOnce your application is registered, you can click on it to see your `client_id` and `client_secret`. They're basically a login and password for your application's access, so be sure not to share them with anyone.\n\nNext, decide which authentication flow (grant type) you want to use. Here are your options:\n\n- choose the **Authorization Code** flow if your application is server-based (you have a server with its own domain and server-side code),\n- choose the **Implicit** flow if your application is based mostly on JavaScript or client-side code,\n- choose the **Client Credential** flow if you want to test your application or access your GetResponse account,\n- implement the **Refresh Token** flow to handle token expiration if you use the Authorization Code flow.\n\n### Authorization Code flow\n\nFirst, your application must redirect a resource owner to the following URL:\n\n```\nhttps://app.getresponse.com/oauth2_authorize.html?response_type=code&client_id=_your_client_id_&state=xyz\n```\n\nThe `state` parameter is there for security reasons and should be a random string. When the resource owner grants your application access to the resource, we will redirect the browser to the `redirect URL` you specified in the application settings and attach the same state as the parameter. Comparing the state parameter value ensures that the redirect was initiated by our system. The code parameter is an authorization code that you can exchange for an access token within 10 minutes, after which time it expires.\n\n#### Example redirect with authorization code\n\n```\nhttps://myredirecturi.com/cb?code=ed17c498bfe343175cd7684c5b09979f2875b25c&state=xyz\n```\n\n#### Exchanging authorization code for the access token\n\nHere's an example request to exchange authorization code for the access token:\n\n```\n$ curl -u client_id:client_secret https://api.getresponse.com/v3/token \\\n       -d 'grant_type=authorization_code&code=ed17c498bfe343175cd7684c5b09979f2875b25c'\n```\n\n*Remember to replace `client_id` and `client_secret` with your OAuth application credentials.*\n\n##### Example response\n\n```json\n{\n    \"access_token\": \"03807cb390319329bdf6c777d4dfae9c0d3b3c35\",\n    \"expires_in\": 3600,\n    \"token_type\": \"Bearer\",\n    \"scope\": null,\n    \"refresh_token\": \"170d9f64e781aaa6b3ba036083faba71b2fc4e6c\"\n}\n```\n\n### Client Credentials flow\n\nThis flow is suitable for development, when you need to quickly access API to create some functionality. You can get the access token with a single request:\n\n#### Request\n\n```\n$ curl -u client_id:client_secret https://api.getresponse.com/v3/token \\\n       -d 'grant_type=client_credentials'\n```\n\n*Remember to replace `client_id` and `client_secret` with your OAuth application credentials.*\n\n#### Response\n\n```json\n{\n    \"access_token\": \"e2222af2851a912470ec33c9b4de1ea3a304b7d7\",\n    \"expires_in\": 86400,\n    \"token_type\": \"Bearer\",\n    \"scope\": null\n}\n```\n\nYou can also go to https://app.getresponse.com/manage_api.html, click the action button for your application, and select \"generate credentials\". This will open a popup with a generated access token. You can then use the access token to authenticate your requests, for example:\n\n```\n$ curl -H \"Authorization: Bearer e2222af2851a912470ec33c9b4de1ea3a304b7d7\" https://api.getresponse.com/v3/from-fields\n```\n\n### Implicit flow\n\nFirst, your application must redirect a resource owner to the following URL:\n\n```\nhttps://app.getresponse.com/oauth2_authorize.html?response_type=token&client_id=_your_client_id_&redirect_uri=https://myredirecturi.com/cb&state=xyz\n```\n\nWhen the resource owner grants your application access to the resource, we will redirect the owner to the URL that was specified in the request.\n\nThere is no code exchange process because, unlike the Authorization Code flow, the redirect already has the access token in the parameters.\n\n```\nhttps://myredirecturi.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA&state=xyz&token_type=bearer&expires_in=3600\n```\n\n### Refresh Token flow\n\nYou need to refresh your access token if you receive this error message as a response to your request:\n\n```json\n{\n    \"httpStatus\": 401,\n    \"code\": 1014,\n    \"codeDescription\": \"Problem during authentication process, check headers!\",\n    \"message\": \"The access token provided is expired\",\n    \"moreInfo\": \"https://apidocs.getresponse.com/v3/errors/1014\",\n    \"context\": {\n        \"sentToken\": \"b8b1e961a7f9fd4cc710d5d955e09c15a364ab71\"\n    }\n}\n```\n\nIf you are using the Authorization Code flow, you need to use the refresh token to issue a new access token/refresh token pair by making the following request:\n\n```\n$ curl -u client_id:client_secret https://api.getresponse.com/v3/token \\\n       -d 'grant_type=refresh_token&refresh_token=170d9f64e781aaa6b3ba036083faba71b2fc4e6c'\n```\n\n*Remember to replace `client_id` and `client_secret` with your OAuth application credentials.*\n\nThe response you'll get will look like this:\n\n```json\n{\n    \"access_token\": \"890fdsa2f5d7b189fc4e6c4b1d170d9f591238ss\",\n    \"expires_in\": 86400,\n    \"token_type\": \"Bearer\",\n    \"scope\": null,\n    \"refresh_token\": \"170d9f64e781aaa6b3ba036083faba71b2fc4e6c\"\n}\n```\n\n### GetResponse MAX\n\nThere are some differences when authenticating GetResponse MAX users:\n\n- the application must redirect to a page in the client's custom domain, for example: `https://custom-domain.getresponse360.com/oauth2_authorize.html`\n- token requests have to be send to one of the GetResponse MAX APIv3 endpoints (depending on the client's environment),\n- token requests have to include an `X-Domain` header,\n- the application has to be registered in a GetResponse MAX account within the same environment.\n\n\n# CORS (AJAX requests)\n\n[Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) mechanism is not supported by APIv3. It means that AJAX requests to the API will be blocked by the browser's [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy). Please use a server-side application to access the API.\n\n\n# Timezone settings\n\nThe default timezone in response data is **UTC**.\n\nTo set a different timezone, add `X-Time-Zone` header with value of [time zone name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) (\"TZ database name\" column).\n\n\n# Pagination\n\nMost of the resource collections returned by API are paginated. It means that the response is divided into multiple pages.\n\nControl the number of results on each page by using `perPage` query parameter and change pages by using `page` query parameter.\n\nBy default we return only the first **100** resources per page. You can change that by adding `perPage` parameter with a value of up to **1000**.\n\nPage numbers start with **1**.\n\nPaginated responses have 3 extra headers:\n* `TotalCount` – a total number of resources on all pages\n* `TotalPages` – a total number of pages\n* `CurrentPage` – current page number\n\nUse the maximum `perPage` value (**1000**) if you plan to iterate over all the pages of the response.\n\nWhen trying to get a page that exceeds the total number of pages, API will return an empty array (`[]`). Make sure to stop iterating when it happens.\n\n\n# CURLE_SSL_CACERT error\n\nSolution to CURLE_SSL_CACERT error (code 60).\n\nThis error is related to expired CA (Certificate Authority) certificates installed on your server (the server that you send the requests from). You can read more about certificate verification on the [cURL project website](https://curl.haxx.se/docs/sslcerts.html).\n\nIf you encounter this error while sending requests to the GetResponse APIv3, ask your server administrator to update the CA certificates using the [latest bundle provided by the cURL project](https://curl.haxx.se/docs/caextract.html).\n\n**Please make sure that cURL is configured to use the updated bundle.**\n",
    "contact": {
      "name": "API Support - DevZone",
      "url": "https://app.getresponse.com/feedback.html?devzone=yes",
      "email": "getresponse-devzone@cs.getresponse.com"
    },
    "version": "3.2024-11-08T10:56:05+0000",
    "x-logo": {
      "url": "https://us-ws.gr-cdn.com/images/global/getresponse.png"
    }
  },
  "servers": [
    {
      "url": "https://api.getresponse.com/v3",
      "description": "GetResponse"
    },
    {
      "url": "https://api3.getresponse360.com/v3",
      "description": "GetResponse MAX US"
    },
    {
      "url": "https://api3.getresponse360.pl/v3",
      "description": "GetResponse MAX PL"
    }
  ],
  "paths": {
    "/webinars/{webinarId}": {
      "get": {
        "tags": [
          "Webinars"
        ],
        "summary": "Get a webinar by ID",
        "operationId": "getWebinarById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebinarDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/webinarId"
        }
      ]
    },
    "/contacts/{contactId}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact details by contact ID",
        "operationId": "getContactById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContactDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact details",
        "description": "Skip the fields you don't want to update. If tags and custom fields are provided, they'll be **replaced** with the values sent in this request.  If the `campaignId` changes, the contact will be moved from the original campaign (list) to the new campaign (list). Their activity history and statistics will also be moved.",
        "operationId": "updateContact",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateContact"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContactDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact by contact ID",
        "operationId": "deleteContact",
        "parameters": [
          {
            "name": "messageId",
            "in": "query",
            "description": "\u003E\nThe ID of a message (such as a newsletter, an autoresponder, or an RSS-newsletter).\nWhen passed, this method will simulate the unsubscribe process, as if the contact clicked the unsubscribe link in a given message.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ipAddress",
            "in": "query",
            "description": "This makes it possible to pass the IP from which the contact unsubscribed. Used only if the `messageId` was send.",
            "schema": {
              "type": "string",
              "format": "ipv4"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Empty response.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/contactId"
        }
      ]
    },
    "/contacts/{contactId}/activities": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get a list of contact activities",
        "description": "By default, only activities from the last 14 days are returned. To get earlier data, use `query[createdOn]` parameter. You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContactActivityList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/contactId"
        }
      ]
    },
    "/campaigns/{campaignId}/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contacts from a single campaign",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getContactsFromCampaign",
        "parameters": [
          {
            "name": "query[email]",
            "in": "query",
            "description": "Search contacts by email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search contacts by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[email]",
            "in": "query",
            "description": "Sort contacts by email",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort contacts by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort contacts by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContactList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/campaignId"
        }
      ]
    },
    "/contacts/{contactId}/custom-fields": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Upsert the custom fields of a contact",
        "description": "Upsert (add or update) the custom fields of a contact. This method doesn't remove (unassign) custom fields.",
        "operationId": "upsertContactCustoms",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpsertContactCustomFields"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContactCustomFieldList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-type": "upsert"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/contactId"
        }
      ]
    },
    "/contacts/{contactId}/tags": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Upsert the tags of a contact",
        "description": "Upsert (add or update) the tags of a contact. This method doesn't remove (unassign) tags.",
        "operationId": "upsertTags",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpsertContactTags"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpsertContactTags"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-type": "upsert"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/contactId"
        }
      ]
    },
    "/search-contacts/{searchContactId}": {
      "get": {
        "tags": [
          "Search Contacts"
        ],
        "summary": "Get search contacts by contact ID.",
        "description": "Get the definition of a specific contact-search filter.",
        "operationId": "getSearchContactsById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchContactsDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Search Contacts"
        ],
        "summary": "Update search contacts",
        "description": "Update specified search contacts.",
        "operationId": "updateSearchContacts",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateSearchContacts"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchContactsDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Search Contacts"
        ],
        "summary": "Delete search contacts",
        "operationId": "deleteSearchContacts",
        "responses": {
          "204": {
            "description": "Delete search contacts.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/searchContactId"
        }
      ]
    },
    "/search-contacts/{searchContactId}/contacts": {
      "get": {
        "tags": [
          "Search Contacts"
        ],
        "summary": "Get contacts by search contacts ID",
        "description": "Get contacts from saved search contacts by ID.",
        "operationId": "getContactsByIdSearchContacts",
        "parameters": [
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            },
            "example": "desc"
          },
          {
            "name": "sort[email]",
            "in": "query",
            "description": "Sort by email",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            },
            "example": "desc"
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            },
            "example": "asc"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchedContactsList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/searchContactId"
        }
      ]
    },
    "/search-contacts/{searchContactId}/custom-fields": {
      "post": {
        "tags": [
          "Search Contacts"
        ],
        "summary": "Upsert custom fields by search contacts",
        "description": "Makes it possible to add and update custom field values for all contacts that meet the search criteria. This method doesn't remove or overwrite custom fields with the values from the request.",
        "operationId": "upsertCustomFieldsBySearchContactId",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpsertContactCustomFields"
        },
        "responses": {
          "202": {
            "description": "Upsert custom fields by searchContactId.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "UpsertCustomFieldsBySearchContactsId"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/searchContactId"
        }
      ]
    },
    "/transactional-emails/templates/{transactionalTemplateId}": {
      "get": {
        "tags": [
          "Transactional Emails Templates"
        ],
        "summary": "Get a single template by ID",
        "operationId": "getTransactionalEmailsTemplatesById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionalEmailsTemplateDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      },
      "post": {
        "tags": [
          "Transactional Emails Templates"
        ],
        "summary": "Update transactional email template",
        "description": "This method allows you to update transactional email template",
        "operationId": "updateTransactionalEmailsTemplate",
        "requestBody": {
          "$ref": "#/components/requestBodies/updateTransactionalEmailsTemplate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionalEmailsTemplateDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      },
      "delete": {
        "tags": [
          "Transactional Emails Templates"
        ],
        "summary": "Delete transactional email template",
        "operationId": "deleteTransactionalEmailsTemplate",
        "responses": {
          "204": {
            "description": "Delete transactional email template",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/transactionalTemplateId"
        }
      ]
    },
    "/transactional-emails/{transactionalEmailId}": {
      "get": {
        "tags": [
          "Transactional Emails"
        ],
        "summary": "Get transactional email details by transactional email ID",
        "operationId": "getTransactionalEmailsById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionalEmailDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/transactionalEmailId"
        }
      ]
    },
    "/from-fields/{fromFieldId}": {
      "get": {
        "tags": [
          "From Fields"
        ],
        "summary": "Get a single 'From' address by ID",
        "operationId": "getFromFieldById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FromFieldDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "From Fields"
        ],
        "summary": "Delete 'From' address",
        "operationId": "deleteFromField",
        "parameters": [
          {
            "name": "fromFieldIdToReplaceWith",
            "in": "query",
            "description": "The 'From' address ID that should replace the deleted 'From' address",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete 'From' address.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/fromFieldId"
        }
      ]
    },
    "/from-fields/{fromFieldId}/default": {
      "post": {
        "tags": [
          "From Fields"
        ],
        "summary": "Set a 'From' address as default",
        "operationId": "setFromFieldAsDefault",
        "responses": {
          "200": {
            "description": "Set a 'From' address as default.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "SetDefaultFromField",
        "x-no-body": true,
        "x-type": "update"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/fromFieldId"
        }
      ]
    },
    "/rss-newsletters/{rssNewsletterId}": {
      "get": {
        "tags": [
          "RSS Newsletters"
        ],
        "summary": "Get RSS newsletter by ID",
        "operationId": "getRssNewsletterById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RssNewsletterDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "RSS Newsletters"
        ],
        "summary": "Update RSS newsletter",
        "operationId": "updateRssNewsletter",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateRssNewsletter"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RssNewsletterDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "RSS Newsletters"
        ],
        "summary": "Delete RSS newsletter",
        "operationId": "deleteRssNewsletter",
        "responses": {
          "204": {
            "description": "Delete RSS newsletter.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/rssNewsletterId"
        }
      ]
    },
    "/rss-newsletters/{rssNewsletterId}/statistics": {
      "get": {
        "tags": [
          "RSS Newsletters"
        ],
        "summary": "Get RSS newsletter statistics by ID",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getSingleRssNewsletterStatisticsCollection",
        "parameters": [
          {
            "name": "query[groupBy]",
            "in": "query",
            "description": "Group results by time interval",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "total",
                "hour",
                "day",
                "month"
              ]
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SingleMessageStatisticsList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetRssNewsletterStatistics"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/rssNewsletterId"
        }
      ]
    },
    "/shops/{shopId}/taxes": {
      "get": {
        "tags": [
          "Taxes"
        ],
        "summary": "Get a list of taxes",
        "description": "\nSending **GET** request to this URL returns a collection of tax resources that belong to the given shop.\n\nYou can narrow down the list of resources by passing proper query parameters (the list of which you can find below, in the request params section). You can basically search by:\n * name\n * createdOn\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getTaxList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search tax by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search tax created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search tax created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TaxList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Taxes"
        ],
        "summary": "Create tax",
        "description": "\nSending a **POST** request to this URL will create a new tax resource.\n\nIn order to create a new tax, you need to send a tax resource in the body of the request (remember that you need to serialize the body into a JSON string)\n",
        "operationId": "createTax",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewTax"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/TaxDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "CreateTax"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        }
      ]
    },
    "/shops/{shopId}/taxes/{taxId}": {
      "get": {
        "tags": [
          "Taxes"
        ],
        "summary": "Get a single tax by ID",
        "description": "\nThis method returns tax with a given `taxId` in the context of a given `shopId`\n",
        "operationId": "getTaxById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TaxDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetTax"
      },
      "post": {
        "tags": [
          "Taxes"
        ],
        "summary": "Update tax",
        "description": "\nUpdate the properties of the shop tax. You should only send the fields that need to be changed. The rest of the properties will stay the same.\n",
        "operationId": "updateTax",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateTax"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TaxDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "UpdateTax"
      },
      "delete": {
        "tags": [
          "Taxes"
        ],
        "summary": "Delete tax by ID",
        "description": "",
        "operationId": "deleteTax",
        "responses": {
          "204": {
            "description": "Delete tax",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "DeleteTax"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/taxId"
        }
      ]
    },
    "/custom-events/{customEventId}": {
      "get": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Get custom events by custom event ID",
        "operationId": "getCustomEventById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomEventDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Update custom event details",
        "operationId": "updateCustomEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCustomEvent"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomEventDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Delete a custom event by custom event ID",
        "operationId": "deleteCustomEvent",
        "responses": {
          "204": {
            "description": "Delete custom event",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/customEventId"
        }
      ]
    },
    "/forms/{formId}": {
      "get": {
        "tags": [
          "Forms"
        ],
        "summary": "Get form by ID",
        "operationId": "getForm",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FormDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/formId"
        }
      ]
    },
    "/forms/{formId}/variants": {
      "get": {
        "tags": [
          "Forms"
        ],
        "summary": "Get the list of form variants (A/B tests)",
        "operationId": "getFormVariantList",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FormVariantList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/formId"
        }
      ]
    },
    "/landing-pages/{landingPageId}": {
      "get": {
        "tags": [
          "Legacy Landing Pages"
        ],
        "summary": "Get single landing page by ID",
        "operationId": "getLandingPageById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LandingPageDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/landingPageId"
        }
      ]
    },
    "/imports/{importId}": {
      "get": {
        "tags": [
          "Imports"
        ],
        "summary": "Get import details by ID.",
        "operationId": "getImportById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ImportDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/importId"
        }
      ]
    },
    "/statistics/sms/{smsId}": {
      "get": {
        "tags": [
          "Sms"
        ],
        "summary": "Get details for the SMS message statistics",
        "operationId": "getSmsStats",
        "parameters": [
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Get statistics for a single SMS from this date",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-20"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Get statistics for a single SMS to this date",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-20"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SmsStats"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/smsId"
        }
      ]
    },
    "/predefined-fields/{predefinedFieldId}": {
      "get": {
        "tags": [
          "Predefined Fields"
        ],
        "summary": "Get a predefined field by ID",
        "description": "Get detailed information about a specified predefined field.",
        "operationId": "getPredefinedFieldById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PredefinedFieldDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Predefined Fields"
        ],
        "summary": "Update a predefined field",
        "operationId": "updatePredefinedField",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdatePredefinedField"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PredefinedFieldDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Predefined Fields"
        ],
        "summary": "Delete a predefined field",
        "operationId": "deletePredefinedField",
        "responses": {
          "204": {
            "description": "Delete a predefined field.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/predefinedFieldId"
        }
      ]
    },
    "/shops/{shopId}/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get the shop categories list",
        "description": "\nSending a **GET** request to this URL returns a collection of category resources that belong to the given shop.\n\nYou can narrow down the list of resources by passing proper query parameters (the list of which you can find below in the request params section). You can basically search by:\n *name\n * createdOn\n * parentId\n\nThe `name` fields can be a pattern and we'll try to match this phrase.\n\nThe `parentId` will search for sub-categories of a given parent category.\n\n\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getCategories",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search category by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[parentId]",
            "in": "query",
            "description": "Search categories by their parent",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[externalId]",
            "in": "query",
            "description": "Search categories by external ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search[createdAt][from]",
            "in": "query",
            "description": "Show categories starting from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "search[createdAt][to]",
            "in": "query",
            "description": "Show categories starting to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdAt]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CategoryList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create category",
        "description": "\nCreate shop category. You can pass the `parentId` parameter to create a sub-category of a given parent. Unlike most **POST** methods, this call is idempotent, that is: sending the same request 10 times will not create 10 new categories. Only one category will be created.\n\n",
        "operationId": "createCategory",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewCategory"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CategoryDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        }
      ]
    },
    "/shops/{shopId}/categories/{categoryId}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get a single category by ID",
        "description": "\nThis method returns a category according to the given `categoryId`.\n",
        "operationId": "getCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CategoryDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Update category",
        "description": "\nUpdate the properties of the shop category. You can specify a `parentId` to assign a category as sub-category for an existing category. You should send only those fields that need to be changed. The rest of the properties will stay the same.\n\n",
        "operationId": "updateCategory",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCategory"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CategoryDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete category",
        "description": "",
        "operationId": "deleteCategory",
        "responses": {
          "204": {
            "description": "Delete category",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/categoryId"
        }
      ]
    },
    "/suppressions/{suppressionId}": {
      "get": {
        "tags": [
          "Suppressions"
        ],
        "summary": "Get a suppression list by ID",
        "operationId": "getSuppressionById",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuppressionDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Suppressions"
        ],
        "summary": "Update a suppression list by ID",
        "operationId": "updateSuppression",
        "requestBody": {
          "description": "The suppression list to be updated.",
          "$ref": "#/components/requestBodies/UpdateSuppression"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuppressionDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Suppressions"
        ],
        "summary": "Deletes a given suppression list by ID",
        "operationId": "deleteSuppression",
        "responses": {
          "204": {
            "description": "Suppression list deleted successfully.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/suppressionId"
        }
      ]
    },
    "/shops/{shopId}/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get the list of orders",
        "description": "\nSending a  **GET** request to this URL returns a collection of order resources that belong to the given shop.\n\nYou can narrow down the list of resources by passing proper query parameters (the list of which you can find below in the request params section). You can basically search by:\n * description\n * status\n * externalId\n * processedAt\n\nThe `description` fields can be a pattern and we'll try to match this phrase.\n\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getOrderList",
        "parameters": [
          {
            "name": "query[description]",
            "in": "query",
            "description": "Search order by description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search order by status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[externalId]",
            "in": "query",
            "description": "Search order by external ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[processedAt][from]",
            "in": "query",
            "description": "Show orders processed from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[processedAt][to]",
            "in": "query",
            "description": "Show orders processed to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrderList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create order",
        "description": "\nSending a **POST** request to this URL will create a new order resource.\n\nIn order to create a new order, you need to send the order resource in the body of the request (remember that you need to serialize the body into a JSON string).\n\n",
        "operationId": "createOrder",
        "parameters": [
          {
            "name": "additionalFlags",
            "in": "query",
            "description": "The additional flags parameter with the value `skipAutomation` will skip the triggering `Make a purchase` element in an automated workflow",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "skipAutomation",
            "x-set": [
              "skipAutomation"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NewOrder"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/OrderDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        }
      ]
    },
    "/shops/{shopId}/orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a single order by ID",
        "description": "\nThis method returns the order according to the given `orderId`.\n\n",
        "operationId": "getOrderById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrderDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Update order",
        "description": "\nUpdate the properties of a shop's order. You should send only those fields that need to be changed. The rest of the properties will stay the same.\nHowever, in case of `billingAddress` and `shippingAddress`, you must send the entire representation. Individual fields can't be updated.\nIf you want to update individual fields of an address, you can do so using `POST /v3/addresses/{addressId}`.\n\nIn case of `selectedVariants`, when the collection is updated, the old collection is completely removed. The same goes for meta fields.\nIndividual fields can't be updated either. The full representations of `selectedVariants` and `metaFields` must be sent instead.\n\n",
        "operationId": "updateOrder",
        "parameters": [
          {
            "name": "additionalFlags",
            "in": "query",
            "description": "The additional flags parameter with the value `skipAutomation` will skip the triggering `Make a purchase` element in an automated workflow",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "skipAutomation",
            "x-set": [
              "skipAutomation"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateOrder"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/OrderDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete order",
        "description": "",
        "operationId": "deleteOrder",
        "responses": {
          "204": {
            "description": "Delete order",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/orderId"
        }
      ]
    },
    "/shops/{shopId}/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a product list.",
        "description": "\nSending a **GET** request to this URL returns a collection of product resources that belong to the given shop.\n\nYou can narrow down the list of resources by passing proper query parameters (the list of which you can find below in the request params section). You can basically search by:\n * name\n * vendor\n * category\n * categoryId\n * externalId\n * variantName\n * metaFieldNames\n * metaFieldValues\n * createdOn\n\nThe `metaFieldNames` and `metaFieldValues` fields can be a list of values separated by a comma [,].\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getProductList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search products by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[vendor]",
            "in": "query",
            "description": "Search products by vendor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[category]",
            "in": "query",
            "description": "Search products by category name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[categoryId]",
            "in": "query",
            "description": "Search products by category ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[externalId]",
            "in": "query",
            "description": "Search products by external ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[variantName]",
            "in": "query",
            "description": "Search products by product variant name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[metaFieldNames]",
            "in": "query",
            "description": "Search products by meta field name (the list of names must be separated by a comma [,])",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[metaFieldValues]",
            "in": "query",
            "description": "Search products by meta field value (the list of values must be separated by a comma [,])",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search products created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search products created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProductList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create product",
        "description": "\nSending a **POST** request to this URL will create a new product resource.\n\nIn order to create a new product, you need to send the product resource in the body of the request (remember that you need to serialize the body into a JSON string)\n\nYou don't need a separate endpoint for each element (e.g. variant, category, meta-field). You can create them all with this method.\n\nPlease note that categories aren't required, but if a product has at least one category, then one of those categories must be marked as default.\nThis can be set by field `isDefault`. If  none of the elements contains isDefault=true, then the system picks the first one from the collection by default.\n\n",
        "operationId": "createProduct",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewProduct"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ProductDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        }
      ]
    },
    "/shops/{shopId}/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get a single product by ID",
        "description": "\nThis method returns product according to the given `productId` in the context of a given `shopId`.\n\n",
        "operationId": "getProductById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProductDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Update product",
        "description": "\nUpdate the properties of a shop's product. You should only send those fields that need to be changed. The remaining properties will stay the same.\nHowever, when updating variants, categories, and meta fields, you need to send entire collections. Individual fields can't be updated.\nIf you want to update particular fields, you can do so using their specific endpoints, i.e.:\n\n * categories - `POST /v3/shops/{shopId}/categories/{categoryId}`\n * variants - POST `/v3/shops/{shopId}/products/{productId}/variants/{variantId}`\n * metaFields - `POST /v3/shops/{shopId}/meta-fields/{metaFieldId}`\n\n\n",
        "operationId": "updateProduct",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateProduct"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProductDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete product",
        "description": "",
        "operationId": "deleteProduct",
        "responses": {
          "204": {
            "description": "Delete product",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/productId"
        }
      ]
    },
    "/shops/{shopId}/products/{productId}/categories": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Upsert product categories",
        "description": "\nThis method makes it possible to assign product categories, and to set a default product category. This method doesn't remove or unassign product categories. It returns a list of product categories.\n\nPlease note that if you assign only one category to a given product, that category is marked as default. If you try to remove the default mark, your change won't be executed.\n\n",
        "operationId": "upsertProductCategories",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpsertProductCategory"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SimpleProductCategoryList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-type": "upsert"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/productId"
        }
      ]
    },
    "/shops/{shopId}/products/{productId}/meta-fields": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Upsert product meta fields",
        "description": "\nThis method makes it possible to assign meta fields. It doesn't remove or unassign meta fields. It returns a list of product meta fields.\n\n",
        "operationId": "upsertMetaFields",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpsertMetaField"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MetaFieldList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-type": "upsert"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/productId"
        }
      ]
    },
    "/shops/{shopId}": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Get a single shop by ID",
        "description": "\nThis method returns the shop according to the given `shopId`\n\n",
        "operationId": "getShopById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShopDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Shops"
        ],
        "summary": "Update shop",
        "description": "\nThis makes it possible to update shop preferences. You should send only those fields that need to be changed. The rest of the properties remain the same.\n\n",
        "operationId": "updateShop",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateShop"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShopDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Shops"
        ],
        "summary": "Delete shop",
        "description": "\nThis method deletes a shop.\n\n",
        "operationId": "deleteShop",
        "responses": {
          "204": {
            "description": "Delete a shop",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        }
      ]
    },
    "/popups/{popupId}": {
      "get": {
        "tags": [
          "Forms and Popups"
        ],
        "summary": "Get a single form or popup by ID",
        "operationId": "getPopupDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopupDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/popupId"
        }
      ]
    },
    "/statistics/popups/{popupId}/performance": {
      "get": {
        "tags": [
          "Form and Popup"
        ],
        "summary": "Get statistics for a single form or popup",
        "operationId": "getPopupGeneralPerformance",
        "parameters": [
          {
            "name": "query[date][from]",
            "in": "query",
            "description": "Get statistics for a single form or popup from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-10"
            }
          },
          {
            "name": "query[date][to]",
            "in": "query",
            "description": "Get statistics for a single form or popup to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-20"
            }
          },
          {
            "name": "query[location]",
            "in": "query",
            "description": "Form or popup statistics by location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[device]",
            "in": "query",
            "description": "Form or popup statistics by device",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desktop",
                "mobile"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopupGeneralPerformance"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/popupId"
        }
      ]
    },
    "/splittests/{splittestId}": {
      "get": {
        "tags": [
          "A/B tests"
        ],
        "summary": "Get a single A/B test.",
        "description": "Get a single A/B test by ID.",
        "operationId": "getSplittest",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Splittest"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/splittestId"
        }
      ]
    },
    "/shops/{shopId}/carts": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get shop carts",
        "description": "\nSending a **GET** request to this URL returns a collection of cart resources that belong to the given shop.\n\nYou can narrow down the list of resources by passing proper query parameters (the list of which you can find below in the request params section). You can basically search by:\n\n * externalId\n * createdOn\n\n\n\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getCarts",
        "parameters": [
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search carts created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search carts created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[externalId]",
            "in": "query",
            "description": "Search cart by external ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CartList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Create cart",
        "description": "\nSending a **POST** request to this URL will create a new cart resource.\n\nIn order to create a new cart, you need to send the cart resource in the body of the request (remember that you need to serialize the body into a JSON string)\n\n",
        "operationId": "createCart",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewCart"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CartDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        }
      ]
    },
    "/shops/{shopId}/carts/{cartId}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get cart by ID",
        "description": "\nThis method returns cart with the given `cartId` in the context of a given `shopId`\n\n",
        "operationId": "getCart",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CartDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Update cart",
        "description": "\nUpdate properties of the shop cart. You should send only those fields that need to be changed. The rest of the properties will stay the same.\n\nIn case of selectedVariants, when the collection is updated, the old one is completely removed.\n\n",
        "operationId": "updateCart",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCart"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CartDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Delete cart",
        "description": "",
        "operationId": "deleteCart",
        "responses": {
          "204": {
            "description": "Delete cart",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/cartId"
        }
      ]
    },
    "/file-library/files/{fileId}": {
      "get": {
        "tags": [
          "File Library"
        ],
        "summary": "Get file by ID",
        "operationId": "getFileById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/File"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "File Library"
        ],
        "summary": "Delete file by file ID",
        "operationId": "deleteFile",
        "responses": {
          "204": {
            "description": "Delete file",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/fileId"
        }
      ]
    },
    "/file-library/folders/{folderId}": {
      "delete": {
        "tags": [
          "File Library"
        ],
        "summary": "Delete folder by folder ID",
        "operationId": "deleteFolder",
        "responses": {
          "204": {
            "description": "Delete folder",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/folderId"
        }
      ]
    },
    "/ab-tests/subject/{abTestId}": {
      "get": {
        "tags": [
          "A/B tests - subject"
        ],
        "summary": "Get a single A/B test by ID",
        "operationId": "getAbtestsSubjectById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AbtestsSubjectGetDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/abTestId"
        }
      ]
    },
    "/ab-tests/subject/{abTestId}/winner": {
      "post": {
        "tags": [
          "A/B tests - subject"
        ],
        "summary": "Choose A/B test winner",
        "operationId": "postAbtestsSubjectByIdWinner",
        "requestBody": {
          "$ref": "#/components/requestBodies/ChooseWinnerAbtestsSubject"
        },
        "responses": {
          "204": {
            "description": "Choose A/B test winner",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/abTestId"
        }
      ]
    },
    "/click-tracks/{clickTrackId}": {
      "get": {
        "tags": [
          "Click Tracks"
        ],
        "summary": "Get click tracked link details by click track ID",
        "operationId": "getClickTrackById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ClickTrack"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/clickTrackId"
        }
      ]
    },
    "/newsletters/{newsletterId}": {
      "get": {
        "tags": [
          "Newsletters"
        ],
        "summary": "Get a single newsletter by its ID.",
        "operationId": "getNewsletter",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NewsletterDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Newsletters"
        ],
        "summary": "Delete newsletter",
        "operationId": "deleteNewsletter",
        "responses": {
          "204": {
            "description": "Delete newsletter.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/newsletterId"
        }
      ]
    },
    "/newsletters/{newsletterId}/activities": {
      "get": {
        "tags": [
          "Newsletters"
        ],
        "summary": "Get newsletter activities",
        "description": "By default, activities from the **last 14 days** are listed only. You can get activities for last 30 days only. You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getNewsletterActivities",
        "parameters": [
          {
            "name": "query[activity]",
            "in": "query",
            "description": "Search newsletter activities by activity type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "send",
                "open",
                "click"
              ]
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search newsletter activities from this date. Default value is 14 days earlier. You can get activities for last 30 days only.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search newsletter activities to this date. Default value is now",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NewsletterActivities"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/newsletterId"
        }
      ]
    },
    "/newsletters/{newsletterId}/cancel": {
      "post": {
        "tags": [
          "Newsletters"
        ],
        "summary": "Cancel sending the newsletter",
        "description": "\u003E\nUsing this method, you can cancel the sending of the newsletter. It will also turn the newsletter into a **draft**.\n",
        "operationId": "cancelMessageSend",
        "responses": {
          "200": {
            "$ref": "#/components/responses/NewsletterDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "CancelNewsletter",
        "x-no-body": true
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/newsletterId"
        }
      ]
    },
    "/newsletters/{newsletterId}/statistics": {
      "get": {
        "tags": [
          "Newsletters"
        ],
        "summary": "The statistics of single newsletter",
        "description": "\u003E\nThis makes it possible to easily fetch statistics for a single newsletter. You can group the data hourly, daily, monthly and as a\ntotal sum. Remember that all statistics date ranges are given in standard UTC period type objects.\n([See ISO 8601 standard](http://en.wikipedia.org/wiki/ISO_8601#Time_intervals)).\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getSingleNewsletterStatistics",
        "parameters": [
          {
            "name": "query[groupBy]",
            "in": "query",
            "description": "Group results by time interval",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "total",
                "hour",
                "day",
                "month"
              ]
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SingleMessageStatisticsList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetNewsletterStatistics"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/newsletterId"
        }
      ]
    },
    "/newsletters/{newsletterId}/thumbnail": {
      "get": {
        "tags": [
          "Newsletters"
        ],
        "summary": "Get newsletter thumbnail",
        "operationId": "getNewsletterThumbnail",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "The size of the thumbnail",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "enum": [
                "default",
                "small"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The newsletter thumbnail.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            },
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-type": "get",
        "x-operation-class-name": "GetNewsletterThumbnail"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/newsletterId"
        }
      ]
    },
    "/tags/{tagId}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get tag by ID",
        "operationId": "getTagById",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The tag ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TagDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Update tag by ID",
        "description": "Updating the tag is not allowed. The method currently performs no update actions and only returns the current tag details.",
        "operationId": "updateTag",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateTag"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TagDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete tag by ID",
        "operationId": "deleteTag",
        "responses": {
          "204": {
            "description": "Tag deleted successfully.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/tagId"
        }
      ]
    },
    "/addresses/{addressId}": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Get an address by ID",
        "description": "",
        "operationId": "getAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Update address",
        "description": "\nUpdate an existing address. You should send only those fields that need to be changed. The rest of the properties will stay the same.\n",
        "operationId": "updateAddress",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateAddress"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Addresses"
        ],
        "summary": "Delete address",
        "description": "",
        "operationId": "deleteAddress",
        "responses": {
          "204": {
            "description": "Empty response",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/addressId"
        }
      ]
    },
    "/campaigns/{campaignId}/blocklists": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Returns campaign blocklist masks",
        "operationId": "getCampaignBlocklist",
        "parameters": [
          {
            "name": "query[mask]",
            "in": "query",
            "description": "Blocklist mask to search for",
            "required": false,
            "schema": {
              "type": "string",
              "example": "@somedomain.com"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CampaignBlocklist"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Updates campaign blocklist masks",
        "operationId": "updateCampaignBlocklist",
        "parameters": [
          {
            "name": "additionalFlags",
            "in": "query",
            "description": "The flag value `add` adds the masks provided in the request body to your blocklist. The flag value `delete` deletes the masks. The masks are replaced if there are no flag values in the request body. \n\n For better performance, use the flag value `noResponse`. It removes the response body and can be used alone or combined with other flags. If multiple flags are used,  separate them by a comma, like this: `additionalFlags=noResponse` or `additionalFlags=add,noResponse`.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "add",
                "delete",
                "noResponse"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCampaignBlocklist"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CampaignBlocklist"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-type": "update"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/campaignId"
        }
      ]
    },
    "/custom-fields/{customFieldId}": {
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Get a single custom field definition by the custom field ID",
        "operationId": "getCustomFieldById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomFieldDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Update the custom field definition",
        "operationId": "updateCustomField",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCustomField"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomFieldDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Delete a single custom field definition",
        "operationId": "deleteCustomField",
        "responses": {
          "204": {
            "description": "Delete a custom field.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/customFieldId"
        }
      ]
    },
    "/lps/{lpsId}": {
      "get": {
        "tags": [
          "Landing Pages"
        ],
        "summary": "Get a single landing page by ID",
        "operationId": "getLpsById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LpsDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/lpsId"
        }
      ]
    },
    "/statistics/lps/{lpsId}/performance": {
      "get": {
        "tags": [
          "Landing Page"
        ],
        "summary": "Get details for landing page statistics",
        "operationId": "getLpsGeneralPerformanceStats",
        "parameters": [
          {
            "name": "query[date][from]",
            "in": "query",
            "description": "Show a single landing page statistics from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[date][to]",
            "in": "query",
            "description": "Show a single landing page statistics to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[location]",
            "in": "query",
            "description": "Landing page statistics by location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[device]",
            "in": "query",
            "description": "Landing page statistics by device",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desktop",
                "mobile"
              ]
            }
          },
          {
            "name": "query[page]",
            "in": "query",
            "description": "Landing page statistics by page UUID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LpsStats"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/lpsId"
        }
      ]
    },
    "/shops/{shopId}/products/{productId}/variants": {
      "get": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Get a list of product variants",
        "description": "\nSending a **GET** request to this URL returns a collection of product variant resources that belong to the given shop and product.\n\nYou can narrow down the list of resources by passing proper query parameters (the list of which you can find below in the request params section). You can basically search by:\n* name\n* sku\n* description\n\nThe `description` fields can be a pattern and we'll try to match this phrase.\n\n",
        "operationId": "getProductVariantList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search variant by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[sku]",
            "in": "query",
            "description": "Search variant by SKU",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[description]",
            "in": "query",
            "description": "Search variant by description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[externalId]",
            "in": "query",
            "description": "Search variant by external ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdAt][from]",
            "in": "query",
            "description": "Show variants starting from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[createdAt][to]",
            "in": "query",
            "description": "Show variants starting to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProductVariantList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Create product variant",
        "description": "\nSending a **POST** request to this URL will create a new product variant resource.\n\nIn order to create a new product variant, you need to send a product variant resource in the body of the request (remember that you need to serialize the body into a JSON string)\n\nThere is no need to create every element (like: image, meta field, tax) one by one by their own endpoints. All these elements can be created during this method.\n\n",
        "operationId": "createProductVariant",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewProductVariant"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ProductVariantDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/productId"
        }
      ]
    },
    "/shops/{shopId}/products/{productId}/variants/{variantId}": {
      "get": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Get a single product variant by ID",
        "description": "\nThis method returns product variant according to the given `variantId` in the context of a given `shopId` and `productId`\n\n",
        "operationId": "getProductVariantById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProductVariantDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Update product variant",
        "description": "\nUpdate properties of a product variant. You should send only those fields that need to be changed. The remaining properties will stay the same. However, when updating metafields, images, and taxes, you need to send entire collections. Individual fields can't be updated. If you want to update particular metafields or tax resources, you can do so using their particular endpoints, i.e:\n\n * taxes - `POST /v3/shops/{shopId}/taxes/{taxId}`\n * metaFields - `POST /v3/shops/{shopId}/meta-fields/{metaFieldId}`\n\n",
        "operationId": "updateProductVariant",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateProductVariant"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProductVariantDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Product Variants"
        ],
        "summary": "Delete product variant",
        "description": "",
        "operationId": "deleteProductVariant",
        "responses": {
          "204": {
            "description": "Delete product variant",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/productId"
        },
        {
          "$ref": "#/components/parameters/variantId"
        }
      ]
    },
    "/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Get a single campaign by the campaign ID",
        "operationId": "getCampaign",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Campaign"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Update a campaign",
        "operationId": "updateCampaign",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCampaign"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Campaign"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/campaignId"
        }
      ]
    },
    "/shops/{shopId}/meta-fields": {
      "get": {
        "tags": [
          "Meta Fields"
        ],
        "summary": "Get the shop meta fields",
        "description": "\nSending a **GET** request to this URL returns a collection of meta field resources that belong to the given shop.\n\nYou can narrow down the list of resources by passing proper query parameters (the list of which you can find below in the request params section). You can basically search by:\n\n * name\n * value\n * description\n * createdOn\n\n\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getMetaFields",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search meta fields by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[description]",
            "in": "query",
            "description": "Search meta fields by description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[value]",
            "in": "query",
            "description": "Search meta fields by value",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search meta fields created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search meta fields created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MetaFieldList"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Meta Fields"
        ],
        "summary": "Create meta field",
        "description": "\nSending a **POST** request to this URL will create a new meta field resource.\n\nIn order to create a new meta field, you need to send a meta field resource in the body of the request (remember that you need to serialize the body into a JSON string)\n",
        "operationId": "createMetaField",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewMetaField"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/MetaFieldDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        }
      ]
    },
    "/shops/{shopId}/meta-fields/{metaFieldId}": {
      "get": {
        "tags": [
          "Meta Fields"
        ],
        "summary": "Get the meta field by ID",
        "description": "\nThis method returns meta field with a given `metaFieldId` in the context of a given `shopId`\n",
        "operationId": "getMetaField",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MetaFieldDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Meta Fields"
        ],
        "summary": "Update meta field",
        "description": "\nUpdate the properties of a shop's meta field. You should send only those fields that need to be changed. The rest of the properties will stay the same.\n",
        "operationId": "updateMetaField",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateMetaField"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/MetaFieldDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Meta Fields"
        ],
        "summary": "Delete meta field",
        "description": "",
        "operationId": "deleteMetaField",
        "responses": {
          "204": {
            "description": "Delete meta field",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/shopId"
        },
        {
          "$ref": "#/components/parameters/metaFieldId"
        }
      ]
    },
    "/webforms/{webformId}": {
      "get": {
        "tags": [
          "Legacy Forms"
        ],
        "summary": "Get Legacy Form by ID.",
        "description": "Get Legacy Form by ID.",
        "operationId": "getLegacyFormById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LegacyForm"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/webformId"
        }
      ]
    },
    "/gdpr-fields/{gdprFieldId}": {
      "get": {
        "tags": [
          "GDPR Fields"
        ],
        "summary": "Get GDPR Field details",
        "operationId": "getGDPRField",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GDPRFieldDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/gdprFieldId"
        }
      ]
    },
    "/workflow/{workflowId}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflow by ID",
        "description": "Get a single workflow by ID.",
        "operationId": "getWorkflow",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Workflow"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Update workflow",
        "description": "Update single workflow.",
        "operationId": "updateWorkflow",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateWorkflow"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Workflow"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/workflowId"
        }
      ]
    },
    "/sms/{smsId}": {
      "get": {
        "tags": [
          "SMS Messages"
        ],
        "summary": "Get a single SMS message by its ID",
        "operationId": "getSmsById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SmsDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/smsId"
        }
      ]
    },
    "/autoresponders/{autoresponderId}": {
      "get": {
        "tags": [
          "Autoresponders"
        ],
        "summary": "Get a single autoresponder by its ID",
        "operationId": "getAutoresponder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AutoresponderDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Autoresponders"
        ],
        "summary": "Update autoresponder",
        "description": "\u003E\n**The action-based autoresponder feature has been migrated over to marketing automation. Your existing autoresponders are\nnow converted into workflows. You can no longer create and update action-based autoresponders using our API.**\n\nThis method allows you to update an autoresponder. The same rules as in creating an autoresponder apply.\n",
        "operationId": "updateAutoresponder",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateAutoresponder"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AutoresponderDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Autoresponders"
        ],
        "summary": "Delete autoresponder.",
        "operationId": "deleteAutoresponder",
        "responses": {
          "204": {
            "description": "Delete autoresponder",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/autoresponderId"
        }
      ]
    },
    "/autoresponders/{autoresponderId}/statistics": {
      "get": {
        "tags": [
          "Autoresponders"
        ],
        "summary": "The statistics for a single autoresponder",
        "description": "\u003E\nThis requst returns the statistics summary for a single given autoresponder. As in all statistics, you can change the date and time range  (hourly daily monthly or total). Keep in mind\nthat all statistics date ranges are given in standard UTC period type objects. ([See ISO 8601 standard](http://en.wikipedia.org/wiki/ISO_8601#Time_intervals))\n\n(https://app.getresponse.com/statistics.html?t=followup#total).\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getSingleAutoresponderStatistics",
        "parameters": [
          {
            "name": "query[groupBy]",
            "in": "query",
            "description": "Group results by time interval",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "total",
                "hour",
                "day",
                "month"
              ]
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SingleMessageStatisticsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetAutoresponderStatistics"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/autoresponderId"
        }
      ]
    },
    "/autoresponders/{autoresponderId}/thumbnail": {
      "get": {
        "tags": [
          "Autoresponders"
        ],
        "summary": "Get the autoresponder thumbnail",
        "operationId": "getAutoresponderThumbnail",
        "parameters": [
          {
            "name": "size",
            "in": "query",
            "description": "The size of the autoresponder thumbnail",
            "required": false,
            "schema": {
              "type": "string",
              "default": "default",
              "enum": [
                "default",
                "small"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The autoresponder thumbnail.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            },
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-type": "get",
        "x-operation-class-name": "GetAutoresponderThumbnail"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/autoresponderId"
        }
      ]
    },
    "/websites/{websiteId}": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "Get a single Website by ID",
        "operationId": "getWebsiteById",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebsiteDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/websiteId"
        }
      ]
    },
    "/statistics/wbe/{websiteId}/performance": {
      "get": {
        "tags": [
          "Website"
        ],
        "summary": "Get details for website statistics",
        "operationId": "getWbeGeneralPerformanceStats",
        "parameters": [
          {
            "name": "query[date][from]",
            "in": "query",
            "description": "Show a single website statistics from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[date][to]",
            "in": "query",
            "description": "Show a single website statistics to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[location]",
            "in": "query",
            "description": "Website statistics by location",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[device]",
            "in": "query",
            "description": "Website statistics by device",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desktop",
                "mobile"
              ]
            }
          },
          {
            "name": "query[page]",
            "in": "query",
            "description": "Website statistics by a page UUID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebsiteStats"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/websiteId"
        }
      ]
    },
    "/webinars": {
      "get": {
        "tags": [
          "Webinars"
        ],
        "summary": "Get a list of webinars",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getWebinarList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search webinars by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "The list of campaign resource IDs (string separated with ',')",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search webinars by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "upcoming",
                "finished",
                "published",
                "unpublished"
              ]
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort webinars by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort webinars by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[startsOn]",
            "in": "query",
            "description": "Sort webinars by update date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "query[type]",
            "in": "query",
            "description": "Search webinars by type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "live",
                "on_demand"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebinarList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact list",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getContactList",
        "parameters": [
          {
            "name": "query[email]",
            "in": "query",
            "description": "Search contacts by email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search contacts by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search contacts by campaign ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[origin]",
            "in": "query",
            "description": "Search contacts by origin",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "import",
                "email",
                "www",
                "panel",
                "leads",
                "sale",
                "api",
                "forward",
                "survey",
                "iphone",
                "copy",
                "landing_page",
                "webinar",
                "website_builder_elegant"
              ]
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[changedOn][from]",
            "in": "query",
            "description": "Search contacts edited from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[changedOn][to]",
            "in": "query",
            "description": "Search contacts edited to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[email]",
            "in": "query",
            "description": "Sort by email",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[changedOn]",
            "in": "query",
            "description": "Sort by change date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[campaignId]",
            "in": "query",
            "description": "Sort by campaign ID",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "additionalFlags",
            "in": "query",
            "description": "The additional flags parameter with the value 'exactMatch' will search for contacts with the exact value of the email and name provided in the query string. Without this flag, matching is done via a standard 'like' comparison, which may sometimes be slow.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "x-set": [
              "exactMatch"
            ]
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ContactList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a new contact",
        "operationId": "createContact",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewContact"
        },
        "responses": {
          "202": {
            "description": "\u003E\nIf the request is successful, the API returns the HTTP code **202 Accepted**.\nThis means that the contact has been preliminarily validated and added to the queue. \nIt may take a few minutes to process the queue and add the contact to the list. If your contact didn't appear on the list, there's a possibility that it was rejected at a later stage of processing. \n\n### Double opt-in\n\nCampaigns can be set to double opt-in.\nThis means that the contact has to click a link in a confirmation message before they can be added to your list.\nUnconfirmed contacts are not returned by the API and can only be found using Search Contacts.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/contacts/batch": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create multiple contacts at once",
        "description": "This endpoint lets you create multiple contacts in one request.\n\n**Note** \n\nThis endpoint is subject to special limits and throttling. You can make 80 calls per time frame (10 minutes) and only 1 call per second. The allowed batch size is 1000 contacts. For more information, check our [API Docs](https://apidocs.getresponse.com/v3/case-study/adding-batch-contacts).",
        "operationId": "createBatchContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "campaignId",
                  "contacts"
                ],
                "properties": {
                  "campaignId": {
                    "description": "ID of the destination campaign (list).",
                    "type": "string",
                    "example": "C"
                  },
                  "contacts": {
                    "description": "Contacts that will be created.",
                    "type": "array",
                    "items": {
                      "required": [
                        "email"
                      ],
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john.doe@example.com"
                        },
                        "name": {
                          "type": "string",
                          "maxLength": 128,
                          "minLength": 1,
                          "example": "John Doe"
                        },
                        "dayOfCycle": {
                          "description": "The day a contact is on in an autoresponder cycle.",
                          "type": "string",
                          "example": "42"
                        },
                        "scoring": {
                          "description": "Contact's score",
                          "type": "number",
                          "example": 8
                        },
                        "ipAddress": {
                          "description": "Contact's IP address. IPv4 and IPv6 formats are accepted.",
                          "example": "1.2.3.4",
                          "oneOf": [
                            {
                              "type": "string",
                              "format": "ipv4"
                            },
                            {
                              "type": "string",
                              "format": "ipv6"
                            }
                          ]
                        },
                        "tags": {
                          "required": [
                            "ids"
                          ],
                          "properties": {
                            "ids": {
                              "description": "List of tag IDs.",
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "kL6Nh"
                              }
                            }
                          },
                          "type": "object"
                        },
                        "customFieldValues": {
                          "type": "array",
                          "items": {
                            "required": [
                              "customFieldId",
                              "value"
                            ],
                            "properties": {
                              "customFieldId": {
                                "description": "Custom field ID.",
                                "type": "string",
                                "example": "kL6Nh"
                              },
                              "value": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "example": "18-35"
                                }
                              }
                            },
                            "type": "object"
                          }
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "\u003E\nIf the request is successful, the API returns the HTTP code **202 Accepted**.\nThis means that the contacts has been preliminarily validated and added to the queue. \nIt may take a few minutes to process the queue and add the contacts to the list. If your contact doesn't appear on the list, they were likely rejected during the late processing stages. \n\n### Double opt-in\n\nCampaigns (lists) can be set to use double opt-in.\nThis means that a contact has to click a link in a confirmation message before they can be added to your list.\nUnconfirmed contacts are not returned by API and can only be found using Search Contacts.",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/search-contacts": {
      "get": {
        "tags": [
          "Search Contacts"
        ],
        "summary": "Get a saved search contact list",
        "description": "Makes it possible to retrieve a collection of short representations of search-contact (known as custom filters in the panel). Every item represents a basic filter object. You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getSearchContactsList",
        "parameters": [
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            },
            "example": "desc"
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            },
            "example": "asc"
          },
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BaseSearchContactsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Search Contacts"
        ],
        "summary": "Create search contacts",
        "description": "Makes it possible to create a new search-contact. Please refer to [Segments (search contacts) reference manual](https://apidocs.getresponse.com/v3/case-study/segments-manual)",
        "operationId": "newSearchContacts",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewSearchContacts"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SearchContactsDetails"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/search-contacts/contacts": {
      "post": {
        "tags": [
          "Search Contacts"
        ],
        "summary": "Search contacts using conditions",
        "description": "Makes it possible to get a collection of contacts according to a given condition.  Please refer to [Segments (search contacts) reference manual](https://apidocs.getresponse.com/v3/case-study/segments-manual)",
        "operationId": "getContactsFromSearchContactsConditions",
        "parameters": [
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            },
            "example": "desc"
          },
          {
            "name": "sort[email]",
            "in": "query",
            "description": "Sort by email",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            },
            "example": "desc"
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            },
            "example": "asc"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SearchContactsConditionsDetails"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SearchedContactsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetContactsBySearchContactsConditions"
      }
    },
    "/transactional-emails/templates": {
      "get": {
        "tags": [
          "Transactional Emails Templates"
        ],
        "summary": "Get the list of transactional email templates",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getTransactionalEmailsTemplatesList",
        "parameters": [
          {
            "name": "query[subject]",
            "in": "query",
            "description": "Search templates by subject",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[subject]",
            "in": "query",
            "description": "Sort by template subject",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionalEmailsTemplateList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      },
      "post": {
        "tags": [
          "Transactional Emails Templates"
        ],
        "summary": "Create transactional email template",
        "description": "This method creates a new transactional email template",
        "operationId": "createTransactionalEmailTemplate",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateTransactionalEmailTemplate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/TransactionalEmailsTemplateDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      }
    },
    "/transactional-emails": {
      "get": {
        "tags": [
          "Transactional Emails"
        ],
        "summary": "Get the list of transactional emails",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getTransactionalEmailsList",
        "parameters": [
          {
            "name": "query[sentOn][from]",
            "in": "query",
            "description": "Search transactional emails sent from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[sentOn][to]",
            "in": "query",
            "description": "Search transactional emails sent to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[tagged]",
            "in": "query",
            "description": "Search tagged/untagged transactional emails",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/StringBooleanEnum"
            }
          },
          {
            "name": "query[tagId]",
            "in": "query",
            "description": "Search transactional emails with a specific tag ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionalEmailList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      },
      "post": {
        "tags": [
          "Transactional Emails"
        ],
        "summary": "Send transactional email",
        "operationId": "createTransactionalEmail",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateTransactionalEmail"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/TransactionalEmail"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      }
    },
    "/transactional-emails/statistics": {
      "get": {
        "tags": [
          "Transactional Emails"
        ],
        "summary": "Get the overall statistics of transactional emails",
        "operationId": "getTransactionalEmailsStatistics",
        "parameters": [
          {
            "name": "query[groupBy]",
            "in": "query",
            "description": "Group results by time interval",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "total",
                "day"
              ]
            }
          },
          {
            "name": "query[timeFrame][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[timeFrame][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[tagged]",
            "in": "query",
            "description": "Search tagged/untagged transactional emails",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/StringBooleanEnum"
            }
          },
          {
            "name": "query[tagId]",
            "in": "query",
            "description": "Search transactional emails with a specific tag ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionalEmailStatistics"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      }
    },
    "/from-fields": {
      "get": {
        "tags": [
          "From Fields"
        ],
        "summary": "Get the list of 'From' addresses",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getFromFieldList",
        "parameters": [
          {
            "name": "query[email]",
            "in": "query",
            "description": "Search 'From' address by email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search 'From' address by name",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "query[isDefault]",
            "in": "query",
            "description": "Search only default 'From' address",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "query[isActive]",
            "in": "query",
            "description": "Search only active 'From' addresses",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort 'From' address by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FromFieldList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "From Fields"
        ],
        "summary": "Create 'From' address",
        "operationId": "createFromField",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewFromField"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/FromFieldDetails"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/rss-newsletters": {
      "get": {
        "tags": [
          "RSS Newsletters"
        ],
        "summary": "Get the list of RSS newsletters",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getRssNewslettersList",
        "parameters": [
          {
            "name": "query[subject]",
            "in": "query",
            "description": "Search RSS newsletters by subject",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search RSS newsletters by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ]
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search RSS newsletters created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search RSS newsletters created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search RSS newsletters by campaign ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RssNewsletterList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "RSS Newsletters"
        ],
        "summary": "Create RSS newsletter",
        "operationId": "createRssNewsletter",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewRssNewsletter"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/RssNewsletterDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/rss-newsletters/statistics": {
      "get": {
        "tags": [
          "RSS Newsletters"
        ],
        "summary": "The statistics for all RSS newsletters",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getRssNewsletterStatisticsCollection",
        "parameters": [
          {
            "name": "query[groupBy]",
            "in": "query",
            "description": "Group results by time interval",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "total",
                "hour",
                "day",
                "month"
              ]
            }
          },
          {
            "name": "query[rssNewsletterId]",
            "in": "query",
            "description": "The list of RSS newsletter resource IDs (string separated with ',')",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "The list of campaign resource IDs (string separated with ',')",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageStatisticsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetRssNewslettersStatistics"
      }
    },
    "/custom-events": {
      "get": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Get a list of custom events",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getCustomEventsList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search custom events by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[hasAttributes]",
            "in": "query",
            "description": "Search custom events with or without attributes",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/StringBooleanEnum"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomEventsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Create custom event",
        "operationId": "createCustomEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewCustomEvent"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CustomEventDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/custom-events/trigger": {
      "post": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Trigger a custom event",
        "operationId": "triggerCustomEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/TriggerCustomEvent"
        },
        "responses": {
          "201": {
            "description": "Empty response",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "TriggerCustomEvent"
      }
    },
    "/forms": {
      "get": {
        "tags": [
          "Forms"
        ],
        "summary": "Get the list of forms.",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getFormList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search forms by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search forms created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search forms created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search forms assigned to this list (campaign). You can pass multiple comma-separated values, eg. `Xd1P,sC7r`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search by status. **Note:** `disabled` includes both `unpublished` and `draft` and `enabled` equals `published`",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled",
                "published",
                "unpublished",
                "draft"
              ]
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[visitors]",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[uniqueVisitors]",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[subscribed]",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[subscriptionRate]",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FormList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/landing-pages": {
      "get": {
        "tags": [
          "Legacy Landing Pages"
        ],
        "summary": "Get a list of landing pages",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getLandingPageList",
        "parameters": [
          {
            "name": "query[domain]",
            "in": "query",
            "description": "Search landing pages by domain",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search landing pages by status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/StatusEnum"
            }
          },
          {
            "name": "query[subdomain]",
            "in": "query",
            "description": "Search landing pages by subdomain",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[metaTitle]",
            "in": "query",
            "description": "Search landing pages by metaTitle field",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[userDomain]",
            "in": "query",
            "description": "Search landing pages by user provided domain",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search landing pages by ID of the assigned campaign. Campaign ID must be encoded! You can get the campaign list with encoded IDs by calling the `/v3/campaigns` endpoint. You can search by multiple comma separated values eg. `o5lx,34er`.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Show landing pages created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Show landing pages created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[domain]",
            "in": "query",
            "description": "Sort by domain",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[campaignId]",
            "in": "query",
            "description": "Sort by campaign",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[metaTitle]",
            "in": "query",
            "description": "Sort by metaTitle",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LandingPageList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/imports": {
      "get": {
        "tags": [
          "Imports"
        ],
        "summary": "Get a list of imports.",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getImportList",
        "parameters": [
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search imports by campaignId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search imports created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search imports created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort imports by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[finishedOn]",
            "in": "query",
            "description": "Sort imports by finish date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[campaignName]",
            "in": "query",
            "description": "Sort imports by campaign name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[uploadedContacts]",
            "in": "query",
            "description": "Sort imports by uploaded contact count",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[updatedContacts]",
            "in": "query",
            "description": "Sort imports by updated contact count",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[addedContacts]",
            "in": "query",
            "description": "Sort imports by inserted contact count",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[invalidContacts]",
            "in": "query",
            "description": "Sort imports by invalid contact count",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[status]",
            "in": "query",
            "description": "Sort imports by status (uploaded, to_review, approved, finished, rejected, canceled)",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ImportList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Imports"
        ],
        "summary": "Schedule a new contact import",
        "description": "This endpoint lets you schedule a contact import. That way, you can add and update your contacts using a single API call. Since API imports are asynchronous, you should check periodically for updates while your original API request is being processed. To keep track of your import status, use [GET import](https://apireference.getresponse.com/#operation/getImportById) (provide the importId  from the response), or subscribe to an [import finished](https://apidocs.getresponse.com/v3/payloads#contacts-import-finished) webhook. Please note, that this endpoint has **specific rate limits** - for details please refer to [Create Import Limits](https://apidocs.getresponse.com/v3/case-study/create-import#limits). For more information on imports, check our [API Docs](https://apidocs.getresponse.com/v3/case-study/create-import) or [Help Center](https://www.getresponse.com/help/how-do-i-prepare-a-file-for-import.html)",
        "operationId": "createImport",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewImport"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ImportDetails"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/statistics/ecommerce/revenue": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Get the ecommerce revenue statistics",
        "operationId": "getRevenueStats",
        "parameters": [
          {
            "name": "query[orderDate][from]",
            "in": "query",
            "description": "Show statistics for orders from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "query[orderDate][to]",
            "in": "query",
            "description": "Show statistics for orders to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "query[shopId]",
            "in": "query",
            "description": "Search statistics by shop ID. You can get the shop ID by calling the `/v3/shops` endpoint. You can search for multiple shops using comma-separated values, for example, `pgIH, CNXF`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RevenueStats"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/statistics/ecommerce/performance": {
      "get": {
        "tags": [
          "Ecommerce"
        ],
        "summary": "Get the ecommerce general performance statistics",
        "operationId": "getGeneralPerformanceStats",
        "parameters": [
          {
            "name": "query[orderDate][from]",
            "in": "query",
            "description": "Show statistics for orders from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "query[orderDate][to]",
            "in": "query",
            "description": "Show statistics for orders to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "query[shopId]",
            "in": "query",
            "description": "Search statistics by shop ID. You can get the shop ID by calling the `/v3/shops` endpoint. You can search for multiple shops using comma-separated values, for example, `pgIH, CNXF`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GeneralPerformanceStats"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/predefined-fields": {
      "get": {
        "tags": [
          "Predefined Fields"
        ],
        "summary": "Get the predefined fields list",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getPredefinedFieldList",
        "parameters": [
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            },
            "example": "DESC"
          },
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search by campaign ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PredefinedFieldsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Predefined Fields"
        ],
        "summary": "Create a predefined field",
        "description": "Makes it possible to create a new predefined field.",
        "operationId": "createPredefinedField",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewPredefinedField"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/PredefinedFieldDetails"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/suppressions": {
      "get": {
        "tags": [
          "Suppressions"
        ],
        "summary": "Get suppression lists",
        "operationId": "getSuppressionsList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search suppressions by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search suppressions created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search suppressions created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by the createdOn date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuppressionsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Suppressions"
        ],
        "summary": "Creates a new suppression list",
        "operationId": "createSuppression",
        "requestBody": {
          "description": "The suppression list to be added.",
          "$ref": "#/components/requestBodies/NewSuppression"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuppressionDetails"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/subscription-confirmations/body/{languageCode}": {
      "get": {
        "tags": [
          "Subscription Confirmations"
        ],
        "summary": "Get collection of SUBSCRIPTION CONFIRMATIONS bodies",
        "description": "\nSending **GET** request to this url, returns collection of **SUBSCRIPTION CONFIRMATIONS** bodies.\n\nLanguage code used in url must be in ISO 639-1 Language Code Standard.\n\n",
        "operationId": "getSubscriptionConfirmationBodyList",
        "parameters": [
          {
            "$ref": "#/components/parameters/languageCode"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubscriptionConfirmationBodyList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/subscription-confirmations/subject/{languageCode}": {
      "get": {
        "tags": [
          "Subscription Confirmations"
        ],
        "summary": "Get collection of SUBSCRIPTION CONFIRMATIONS subjects",
        "description": "\nSending **GET** request to this url, returns collection of **SUBSCRIPTION CONFIRMATIONS** subjects.\n\nLanguage code used in url must be in ISO 639-1 Language Code Standard.\n\n",
        "operationId": "getSubscriptionConfirmationSubjectList",
        "parameters": [
          {
            "$ref": "#/components/parameters/languageCode"
          },
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubscriptionConfirmationSubjectList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/shops": {
      "get": {
        "tags": [
          "Shops"
        ],
        "summary": "Get a list of shops",
        "description": "\nSending a **GET** request to this URL returns a collection of shop resources.\n\nYou can narrow down the list of resources by passing proper query parameters (the list of which you can find below in the request params section). You can basically search by:\n\n * name\n\nThe `name` fields can be a pattern and we'll try to match this phrase.\n\n\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getShopList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search shop by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ShopList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Shops"
        ],
        "summary": "Create shop",
        "description": "\nThis method makes it possible to create a new shop.\n\n",
        "operationId": "createShop",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewShop"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ShopDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/popups": {
      "get": {
        "tags": [
          "Forms and Popups"
        ],
        "summary": "Get the list of forms and popups",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getPopupsList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search forms and popups by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search forms and popups by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "unpublished"
              ]
            }
          },
          {
            "name": "stats[from]",
            "in": "query",
            "description": "Show statistics from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "stats[to]",
            "in": "query",
            "description": "Show statistics to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort forms and popups by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[status]",
            "in": "query",
            "description": "Sort forms and popups by status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdAt]",
            "in": "query",
            "description": "Sort forms and popups by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[updatedAt]",
            "in": "query",
            "description": "Sort forms and popups by modification date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[views]",
            "in": "query",
            "description": "Sort by number of views",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[uniqueVisitors]",
            "in": "query",
            "description": "Sort by number of unique visitors",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[leads]",
            "in": "query",
            "description": "Sort by number of leads",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[ctr]",
            "in": "query",
            "description": "Sort by CTR (click-through rate)",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PopupsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/splittests": {
      "get": {
        "tags": [
          "A/B tests"
        ],
        "summary": "The list of A/B tests.",
        "description": "The list of A/B tests. You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getSplittestList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search A/B tests by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[type]",
            "in": "query",
            "description": "Search A/B tests by type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search A/B tests by status",
            "required": false,
            "schema": {
              "type": "string",
              "default": "active",
              "enum": [
                "active",
                "inactive"
              ]
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search A/B tests created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search A/B tests created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SplittestList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/file-library/quota": {
      "get": {
        "tags": [
          "File Library"
        ],
        "summary": "Get storage space information",
        "operationId": "quota",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Quota"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/file-library/files": {
      "get": {
        "tags": [
          "File Library"
        ],
        "summary": "Get the list of files",
        "description": "By default, you can only search files in the root directory. To search for files in all folders, use the parameter `query[allFolders]=true`. To search for files in a specified folder, use the parameter `query[folderId]=\u003CfolderId\u003E`. **Note: these two parameters can't be used together**. You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getFileList",
        "parameters": [
          {
            "name": "query[allFolders]",
            "in": "query",
            "description": "Return files from all folders, including the root folder. **This parameter can't be used together with ** `query[folderId]`",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/StringBooleanEnum"
            }
          },
          {
            "name": "query[folderId]",
            "in": "query",
            "description": "Search for files in a specific folder. **This parameter can't be used together with ** `query[allFolders]`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search for files by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[group]",
            "in": "query",
            "description": "Search for files by group",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/FileGroup"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[group]",
            "in": "query",
            "description": "Sort files by group",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[size]",
            "in": "query",
            "description": "Sort files by size",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FileList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "File Library"
        ],
        "summary": "Create a file",
        "operationId": "createFile",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewFile"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/File"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/file-library/folders": {
      "get": {
        "tags": [
          "File Library"
        ],
        "summary": "Get the list of folders",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getFolderList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search folders by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort folders by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[size]",
            "in": "query",
            "description": "Sort folders by size",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort folders by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FoldersList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "File Library"
        ],
        "summary": "Create a folder",
        "operationId": "createFolder",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewFolder"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Folder"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/ab-tests/subject": {
      "get": {
        "tags": [
          "A/B tests - subject"
        ],
        "summary": "The list of A/B tests",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "AbtestsSubjectGetList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search A/B tests by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[stage]",
            "in": "query",
            "description": "Search A/B tests by stage",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "preparing",
                "testing",
                "finished",
                "sending-winner",
                "cancelled",
                "draft",
                "completed"
              ]
            }
          },
          {
            "name": "query[abTestId]",
            "in": "query",
            "description": "Search A/B tests by ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search A/B tests by list ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[stage]",
            "in": "query",
            "description": "Sort by stage",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[sendOn]",
            "in": "query",
            "description": "Sort by send date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[totalDelivered]",
            "in": "query",
            "description": "Sort by total delivered",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AbtestsSubjectGetList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "A/B tests - subject"
        ],
        "summary": "Create a new A/B test",
        "operationId": "postAbtestsSubjectById",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewAbtestsSubject"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/AbtestsSubjectGetDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/click-tracks": {
      "get": {
        "tags": [
          "Click Tracks"
        ],
        "summary": "Get click tracked links list",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getClickTrackList",
        "parameters": [
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search click tracks from messages created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search click tracks from messages created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by message date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ClickTrackList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/newsletters": {
      "get": {
        "tags": [
          "Newsletters"
        ],
        "summary": "Get the newsletter list",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getNewsletterList",
        "parameters": [
          {
            "name": "query[subject]",
            "in": "query",
            "description": "Search newsletters by subject",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search newsletters by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search newsletters by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ]
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search newsletters created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search newsletters created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[sendOn][from]",
            "in": "query",
            "description": "Search for newsletters sent from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-20"
            }
          },
          {
            "name": "query[sendOn][to]",
            "in": "query",
            "description": "Search for newsletters sent to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2023-01-20"
            }
          },
          {
            "name": "query[type]",
            "in": "query",
            "description": "Search newsletters by type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "broadcast",
                "splittest",
                "automation"
              ]
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search newsletters by campaign ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[sendOn]",
            "in": "query",
            "description": "Sort by send on date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/NewsletterList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Newsletters"
        ],
        "summary": "Create newsletter",
        "description": "\u003E\nThis method creates a new newsletter and puts it in a queue to send.\n\n**NOTE: This method has a limit of 256 calls per day.**\n",
        "operationId": "createNewsletter",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewNewsletter"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/NewsletterDetails"
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 404,
                      "code": 1013,
                      "codeDescription": "The requested resource was not found",
                      "message": "Resource not found",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1013",
                      "context": {
                        "contactId": "pVyRW"
                      },
                      "uuid": "87b90a96-5ee5-4ca4-8180-ac00adcf62c7"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/newsletters/send-draft": {
      "post": {
        "tags": [
          "Newsletters"
        ],
        "summary": "Send the newsletter draft",
        "operationId": "sendDraft",
        "requestBody": {
          "$ref": "#/components/requestBodies/SendNewsletterDraft"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/NewsletterDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "SendNewsletterDraft"
      }
    },
    "/newsletters/statistics": {
      "get": {
        "tags": [
          "Newsletters"
        ],
        "summary": "Total newsletter statistics",
        "description": "\u003EThis makes it possible to fetch newsletter statistics based on the list of campaign or newsletter IDs\n(you can pass them in the query parameter - see the description below). Remember that all the statistics date ranges\nare returned in standard UTC period type objects. ([See ISO 8601 standard](http://en.wikipedia.org/wiki/ISO_8601#Time_intervals)). You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getNewsletterStatisticsCollection",
        "parameters": [
          {
            "name": "query[groupBy]",
            "in": "query",
            "description": "Group results by time interval",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "total",
                "hour",
                "day",
                "month"
              ]
            }
          },
          {
            "name": "query[newsletterId]",
            "in": "query",
            "description": "The list of newsletter resource IDs (string separated with '')",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "The list of campaign resource IDs (string separated with '')",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageStatisticsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get the list of tags",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getTagsList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search tags by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdAt][from]",
            "in": "query",
            "description": "Search tags created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdAt][to]",
            "in": "query",
            "description": "Search tags created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "sort[createdAt]",
            "in": "query",
            "description": "Sort tags by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TagList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Add a new tag",
        "operationId": "createTag",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewTag"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/TagDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/addresses": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Get a list of addresses",
        "description": "\nSending a **GET** request to this URL returns collection of address resources.\n\nYou can narrow down the list of resources by passing proper query parameters (the list of which you can find below in the request params section). You can basically search by:\n* name\n* firstName\n* lastName\n* address1\n* address2\n* city\n* zip\n* province\n* provinceCode\n* phone\n* company\n* createdOn\n\nThe `name` field can be a pattern and we'll try to match this phrase.\n\nYou can specify which page of the results you want and how many results per page to display. You can also specify the sort-order using one or more of the allowed fields (listed below in the request params section).\n\nLast but not least, you can even specify which fields from a resource you want to get. If you pass the param `fields` with the list of fields (separated by a comma [,]) we'll return the list of resources with only those fields (we'll always add a resource ID to ensure that you can use that data later on)\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getAddressList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search addresses by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[firstName]",
            "in": "query",
            "description": "Search addresses by first name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[lastName]",
            "in": "query",
            "description": "Search addresses by last name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[address1]",
            "in": "query",
            "description": "Search addresses by address1 field",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[address2]",
            "in": "query",
            "description": "Search addresses by address2 field",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[city]",
            "in": "query",
            "description": "Search addresses by city",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[zip]",
            "in": "query",
            "description": "Search addresses by ZIP",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[province]",
            "in": "query",
            "description": "Search addresses by province",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[provinceCode]",
            "in": "query",
            "description": "Search addresses by province code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[phone]",
            "in": "query",
            "description": "Search addresses by phone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[company]",
            "in": "query",
            "description": "Search addresses by company",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search addresses created from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search addresses created to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AddressList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Create address",
        "description": "",
        "operationId": "createAddress",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewAddress"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/AddressDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/accounts/blocklists": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns account blocklist masks",
        "operationId": "getAccountBlocklist",
        "parameters": [
          {
            "name": "query[mask]",
            "in": "query",
            "description": "Blocklist mask to search for",
            "required": false,
            "schema": {
              "type": "string",
              "example": "@somedomain.com"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountBlocklist"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update account blocklist",
        "operationId": "updateAccountBlocklist",
        "parameters": [
          {
            "name": "additionalFlags",
            "in": "query",
            "description": "The flag value `add` adds the masks provided in the request body to your blocklist. The flag value `delete` deletes the masks. The masks are replaced if there are no flag values in the request body. \n\n For better performance, use the flag value `noResponse`. It removes the response body and can be used alone or combined with other flags. If multiple flags are used, separate them by a comma, like this: `additionalFlags=noResponse` or `additionalFlags=add,noResponse`.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "add",
                "delete",
                "noResponse"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateAccountBlocklist"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountBlocklist"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-type": "update"
      }
    },
    "/custom-fields": {
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Get a list of custom fields",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getCustomFieldList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search custom fields by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomFieldList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Create a custom field",
        "operationId": "createCustomField",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewCustomField"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CustomFieldDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/lps": {
      "get": {
        "tags": [
          "Landing Pages"
        ],
        "summary": "Get the list of landing pages",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getLpsList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search landing pages by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search landing pages by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "unpublished"
              ]
            }
          },
          {
            "name": "stats[from]",
            "in": "query",
            "description": "Show statistics for landing pages from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "stats[to]",
            "in": "query",
            "description": "Show statistics for landing pages to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort landing pages by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdAt]",
            "in": "query",
            "description": "Sort landing pages by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[updatedAt]",
            "in": "query",
            "description": "Sort landing pages by modification date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[visits]",
            "in": "query",
            "description": "Sort by number of page visits",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[leads]",
            "in": "query",
            "description": "Sort landing pages by number of leads",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[subscriptionRate]",
            "in": "query",
            "description": "Sort by subscription rate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LpsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/multimedia": {
      "get": {
        "tags": [
          "Multimedia"
        ],
        "summary": "Get images list",
        "operationId": "getImageList",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ImageList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Multimedia"
        ],
        "summary": "Upload image",
        "operationId": "uploadImage",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateMultimedia"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ImageDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "CreateMultimedia",
        "x-type": "upload"
      }
    },
    "/tracking": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Get Tracking JavaScript code snippets",
        "description": "With code snippets you will be able to track Purchases, Abandoned carts, and Visited URLs. Find more in our [Help Center](https://www.getresponse.com/help/marketing-automation/ecommerce-conditions/how-do-i-add-the-tracking-javascript-code-to-my-website.html).",
        "operationId": "getTracking",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Tracking"
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/tracking/facebook-pixels": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Get the list of \"Facebook Pixels\"",
        "description": "Returns the name and ID of \"Facebook Pixels\" assigned to a user's account.",
        "operationId": "getFacebookPixelList",
        "responses": {
          "200": {
            "$ref": "#/components/responses/FacebookPixelList"
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Account information",
        "operationId": "getAccount",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update account",
        "operationId": "updateAccount",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateAccount"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "UpdateAccount"
      }
    },
    "/accounts/billing": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Billing information",
        "operationId": "getAccountBilling",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountBillingDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/accounts/timezones": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List of timezones",
        "description": "List of timezones in account's language context.",
        "operationId": "getTimezones",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountTimezoneList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/accounts/callbacks": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get callbacks configuration",
        "operationId": "getCallbacks",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Callback"
          },
          "404": {
            "description": "Callbacks are disabled for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Enable or update callbacks configuration",
        "operationId": "updateCallbacks",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCallbacks"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Callback"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "UpdateCallback"
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Disable callbacks",
        "operationId": "disableCallbacks",
        "responses": {
          "204": {
            "description": "Empty response",
            "headers": {
              "X-RateLimit-Limit": {
                "$ref": "#/components/headers/RateLimitLimit"
              },
              "X-RateLimit-Remaining": {
                "$ref": "#/components/headers/RateLimitRemaining"
              },
              "X-RateLimit-Reset": {
                "$ref": "#/components/headers/RateLimitReset"
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/accounts/industries": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List of Industry Tags",
        "description": "List of Industry Tags in account's language context.",
        "operationId": "getIndustries",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/IndustryList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/accounts/login-history": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "History of logins",
        "operationId": "getAccountLoginHistory",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountLoginHistoryList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/accounts/badge": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Current status of your GetResponse badge",
        "operationId": "getAccountBadge",
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountBadgeDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Turn on/off the GetResponse Badge",
        "operationId": "updateAccountBadge",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateAccountBadge"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountBadgeDetails"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-type": "update"
      }
    },
    "/accounts/sending-limits": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Send limits",
        "operationId": "getSendingLimits",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SendingLimitsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/campaigns": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Get a list of campaigns",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getCampaignList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "campaign_name"
            }
          },
          {
            "name": "query[isDefault]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CampaignList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Create a campaign",
        "operationId": "createCampaign",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewCampaign"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Campaign"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/campaigns/statistics/origins": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Get subscriber origin statistics",
        "description": "The results are indexed with the campaign ID.",
        "operationId": "getCampaignStatisticsOrigins",
        "parameters": [
          {
            "$ref": "#/components/parameters/CampaignStatisticsIdQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsGroupByQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateFromQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateToQuery"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CampaignOriginsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetCampaignStatisticsOrigins"
      }
    },
    "/campaigns/statistics/locations": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Get subscriber location statistics",
        "description": "The results are indexed with the location name (PL, EN, etc.).",
        "operationId": "getCampaignStatisticsLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/CampaignStatisticsIdQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsGroupByQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateFromQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateToQuery"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CampaignLocationsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetCampaignStatisticsLocations"
      }
    },
    "/campaigns/statistics/list-size": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Get campaign size statistics",
        "description": "Returns the number of the total added and removed subscribers, grouped by default or by time period.",
        "operationId": "getCampaignStatisticsListSize",
        "parameters": [
          {
            "$ref": "#/components/parameters/CampaignStatisticsIdQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsGroupByQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateFromQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateToQuery"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CampaignListSizesStatisticsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetCampaignStatisticsListSize"
      }
    },
    "/campaigns/statistics/subscriptions": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Get the number and origin of subscription statistics",
        "description": "Returns the number and origin of subscriptions, grouped by a specified campaigns for each day on which any changes were made. Dates in the YYYY-MM-DD format are used as keys in the response.",
        "operationId": "getCampaignStatisticsSubscriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/CampaignStatisticsIdQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsGroupByQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateFromQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateToQuery"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubscriptionsByDatesStatisticsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetCampaignStatisticsSubscriptions"
      }
    },
    "/campaigns/statistics/removals": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Get removal statistics",
        "description": "Returns the number and reason for removed contacts. Dates in the YYYY-MM-DD format are used as keys in the response.",
        "operationId": "getCampaignStatisticsRemovals",
        "parameters": [
          {
            "$ref": "#/components/parameters/CampaignStatisticsIdQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsGroupByQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateFromQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateToQuery"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/RemovalsByDatesStatisticsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetCampaignStatisticsRemovals"
      }
    },
    "/campaigns/statistics/balance": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Get balance statistics",
        "description": "Returns the balance of subscriptions. Dates in the YYYY-MM-DD format are used as keys in the response.",
        "operationId": "getCampaignStatisticsBalance",
        "parameters": [
          {
            "$ref": "#/components/parameters/CampaignStatisticsIdQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsGroupByQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateFromQuery"
          },
          {
            "$ref": "#/components/parameters/CampaignStatisticsDateToQuery"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BalanceByDatesStatisticsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetCampaignStatisticsBalance"
      }
    },
    "/campaigns/statistics/summary": {
      "get": {
        "tags": [
          "Campaigns (Lists)"
        ],
        "summary": "Get the statistics summary for selected campaigns",
        "description": "The results are indexed with the campaign ID.",
        "operationId": "getCampaignStatisticsSummary",
        "parameters": [
          {
            "name": "query[campaignId]",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/CampaignStatisticsIdQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CampaignSummaryList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetCampaignStatisticsSummary"
      }
    },
    "/webforms": {
      "get": {
        "tags": [
          "Legacy Forms"
        ],
        "summary": "Get Legacy Forms.",
        "description": "Get the list of Legacy Forms. You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getLegacyFormList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search Legacy Forms by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[modifiedOn][from]",
            "in": "query",
            "description": "Search Legacy Forms modified from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[modifiedOn][to]",
            "in": "query",
            "description": "Search Legacy Forms modified to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search Legacy Forms by campaignId. Accepts multiple IDs separated with a comma",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort[modifiedOn]",
            "in": "query",
            "description": "Sort Legacy Forms by modification date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LegacyFormList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/gdpr-fields": {
      "get": {
        "tags": [
          "GDPR Fields"
        ],
        "summary": "Get the GDPR fields list",
        "operationId": "getGDPRFieldList",
        "parameters": [
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort fields by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort fields by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GDPRFieldList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/workflow": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get workflows",
        "description": "Get the list of workflows.",
        "operationId": "getWorkflowList",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WorkflowList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetWorkflows"
      }
    },
    "/sms-automation": {
      "get": {
        "tags": [
          "SMS Automation Messages"
        ],
        "summary": "Get the list of automated SMS messages.",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getSMSAutomationList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search automated SMS messages by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search automated SMS messages by campaign (list) ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[hasLinks]",
            "in": "query",
            "description": "Search for automated SMS messages containing links",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort[status]",
            "in": "query",
            "description": "Sort by the status of the SMS message",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by the name of the automated SMS message",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[modifiedOn]",
            "in": "query",
            "description": "Sort by the date the SMS message was modified on",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[delivered]",
            "in": "query",
            "description": "Sort by the number of delivered SMS messages",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[sent]",
            "in": "query",
            "description": "Sort by the number of sent SMS messages",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[clicks]",
            "in": "query",
            "description": "Sort by the number of link clicks",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SmsAutomationList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      }
    },
    "/sms": {
      "get": {
        "tags": [
          "SMS Messages"
        ],
        "summary": "Get the list of SMS messages.",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getSMSList",
        "parameters": [
          {
            "name": "query[type]",
            "in": "query",
            "description": "Search SMS messages by type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "sms",
                "draft"
              ]
            }
          },
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search SMS messages by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[sendingStatus]",
            "in": "query",
            "description": "Search SMS messages by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "scheduled",
                "sending",
                "sent"
              ]
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search SMS messages by campaign (list) ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[hasLinks]",
            "in": "query",
            "description": "Search for SMS messages with links",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort[sendingStatus]",
            "in": "query",
            "description": "Sort by sending status",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[sendOn]",
            "in": "query",
            "description": "Sort by sending date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[modifiedOn]",
            "in": "query",
            "description": "Sort by modification date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[delivered]",
            "in": "query",
            "description": "Sort by number of delivered messages",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[sent]",
            "in": "query",
            "description": "Sort by number of sent messages",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[clicks]",
            "in": "query",
            "description": "Sort by number of link clicks",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SmsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-labels": [
          {
            "content": "GetResponse MAX",
            "class": "primary"
          },
          {
            "content": "Add-on required",
            "class": "warning"
          }
        ]
      }
    },
    "/autoresponders": {
      "get": {
        "tags": [
          "Autoresponders"
        ],
        "summary": "Get the list of autoresponders.",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getAutoresponderList",
        "parameters": [
          {
            "name": "query[subject]",
            "in": "query",
            "description": "Search autoresponder by subject",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search autoresponder by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search autoresponder by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "enabled",
                "disabled"
              ]
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Search autoresponder created from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Search autoresponder created to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "Search autoresponder by campaign ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[type]",
            "in": "query",
            "description": "Search autoresponder by type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "timebase",
                "actionbase"
              ]
            }
          },
          {
            "name": "query[triggerType]",
            "in": "query",
            "description": "Search autoresponder by triggerType",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "onday"
              ]
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[subject]",
            "in": "query",
            "description": "Sort by subject",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[dayOfCycle]",
            "in": "query",
            "description": "Sort by cycle day",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[delivered]",
            "in": "query",
            "description": "Sort by delivered",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[openRate]",
            "in": "query",
            "description": "Sort by open rate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[clickRate]",
            "in": "query",
            "description": "Sort by click rate",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdOn]",
            "in": "query",
            "description": "Sort by date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AutoresponderList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Autoresponders"
        ],
        "summary": "Create autoresponder",
        "description": "\u003E\n**The action-based autoresponder feature has been migrated over to marketing automation. Your existing autoresponders are\nnow converted into workflows. You can no longer create and update action-based autoresponders using our API.**\n\nThis request allows you to create an autoresponder. Remember to select the proper `sendSettings` - depending on `type` you need to fill corresponding setting (eg. if you selected type `delay`, then you MUST fill `delayInHours` field).\n",
        "operationId": "createAutoresponder",
        "requestBody": {
          "$ref": "#/components/requestBodies/NewAutoresponder"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/AutoresponderDetails"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 409,
                      "code": 1008,
                      "codeDescription": "There is another resource with the same value of unique property",
                      "message": "Property value is already taken",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1008",
                      "context": [],
                      "uuid": "b89a0d53-67f6-4269-b207-223b42b6bfbd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    },
    "/autoresponders/statistics": {
      "get": {
        "tags": [
          "Autoresponders"
        ],
        "summary": "The statistics for all autoresponders",
        "description": "\u003E\nThis returns the statistics summary for selected autoresponders. You can select them by specifying the autoresponder or campaign IDs.\nAs in all statistics, you can change the date and time range  (hourly daily monthly or total). Keep in mind\nthat all statistics date ranges are given in standard UTC period type objects. ([See ISO 8601 standard](http://en.wikipedia.org/wiki/ISO_8601#Time_intervals))\n\n(https://app.getresponse.com/statistics.html?t=followup#total).\n You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getAutoresponderStatisticsCollection",
        "parameters": [
          {
            "name": "query[groupBy]",
            "in": "query",
            "description": "Group results by time interval",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "total",
                "hour",
                "day",
                "month"
              ]
            }
          },
          {
            "name": "query[autoreponderId]",
            "in": "query",
            "description": "The list of autoresponder resource IDs (string separated with '')",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[campaignId]",
            "in": "query",
            "description": "The list of campaign resource IDs (string separated with '')",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[createdOn][from]",
            "in": "query",
            "description": "Count data from this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "name": "query[createdOn][to]",
            "in": "query",
            "description": "Count data to this date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/DateOrDateTime"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MessageStatisticsList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ],
        "x-operation-class-name": "GetAutorespondersStatistics"
      }
    },
    "/websites": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "Get the list of websites",
        "description": "You can filter the resource using criteria specified as `query[*]`. You can provide multiple criteria, to use AND logic. You can sort the resource using parameters specified as `sort[*]`. You can specify multiple fields to sort by.",
        "operationId": "getWebsitesList",
        "parameters": [
          {
            "name": "query[name]",
            "in": "query",
            "description": "Search websites by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query[status]",
            "in": "query",
            "description": "Search websites by status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "published",
                "unpublished"
              ]
            }
          },
          {
            "name": "stats[from]",
            "in": "query",
            "description": "Show statistics for websites from this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "stats[to]",
            "in": "query",
            "description": "Show statistics for websites to this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sort[name]",
            "in": "query",
            "description": "Sort websites by name",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[createdAt]",
            "in": "query",
            "description": "Sort websites by creation date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[updatedAt]",
            "in": "query",
            "description": "Sort websites by modification date",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[pageViews]",
            "in": "query",
            "description": "Sort websites by page views",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[visits]",
            "in": "query",
            "description": "Sort by number of site visits",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "name": "sort[uniqueVisitors]",
            "in": "query",
            "description": "Sort by number of unique visitors",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortOrderEnum"
            }
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WebsitesList"
          },
          "400": {
            "description": "Request validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 400,
                      "code": 1000,
                      "codeDescription": "General error of validation process, more details should be in context section",
                      "message": "Validation error, see context section for more information",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1000",
                      "context": {
                        "validationType": "searchFilter[query]",
                        "fieldName": "name",
                        "originalName": "lorem-ipsum",
                        "errorDescription": "Not allowed search field"
                      },
                      "uuid": "77dabfd1-1fa7-4f9f-8d3f-487b4403e3aa"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 401,
                      "code": 1014,
                      "codeDescription": "Problem during authentication process, check headers!",
                      "message": "Unable to authenticate request. Check credentials or authentication method details",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1014",
                      "context": {
                        "authenticationType": "auth_token"
                      },
                      "uuid": "62417847-4f12-4c25-9b3a-0b619a187efe"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "The throttling limit has been reached",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "httpStatus": 429,
                      "code": 1015,
                      "codeDescription": "Too many request to API, quota reached, please wait till next quota window",
                      "message": "You have reached your requests limit for this time window, please wait...",
                      "moreInfo": "https://apidocs.getresponse.com/en/v3/errors/1015",
                      "context": {
                        "currentLimit": 30000,
                        "timeToReset": "100 seconds"
                      },
                      "uuid": "510c6726-7f65-46b7-a798-ca403133924f"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          },
          {
            "oauth2": [
              "all"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CreateAndUpdate": {
        "properties": {
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedOn": {
            "description": "The date of the last update",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "Shop": {
        "properties": {
          "shopId": {
            "description": "The shop ID",
            "type": "string",
            "readOnly": true,
            "example": "pf3"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3"
          },
          "name": {
            "description": "The shop name",
            "type": "string",
            "maxLength": 124,
            "minLength": 4,
            "example": "Monster market"
          },
          "locale": {
            "description": "The language locale (ISO 639-1)",
            "type": "string",
            "example": "PL"
          },
          "currency": {
            "description": "The currency code (ISO 4217)",
            "type": "string",
            "example": "PLN"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "NewShop": {
        "required": [
          "name",
          "locale",
          "currency"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Shop"
          }
        ]
      },
      "BaseCategory": {
        "properties": {
          "categoryId": {
            "description": "The category ID",
            "type": "string",
            "readOnly": true,
            "example": "atQ"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3/categories/atQ"
          },
          "name": {
            "description": "The name of the category",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "Headwear"
          },
          "parentId": {
            "description": "The parent category ID",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "amh"
          },
          "isDefault": {
            "description": "This is a default category",
            "type": "boolean",
            "example": true
          },
          "url": {
            "description": "The external URL to the category",
            "type": "string",
            "format": "uri",
            "maxLength": 2048,
            "example": "https://somedomain.com/category/446"
          },
          "externalId": {
            "description": "The external ID is the identifying string or number of the category given by another software",
            "type": "string",
            "maxLength": 255,
            "example": "ext3343"
          }
        },
        "type": "object"
      },
      "Category": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCategory"
          },
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "NewCategory": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          }
        ]
      },
      "UpdateCategory": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Category"
          }
        ]
      },
      "UpdateShop": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Shop"
          }
        ]
      },
      "ProductCategory": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCategory"
          },
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "NewProductCategory": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCategory"
          }
        ]
      },
      "BaseMetaField": {
        "properties": {
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3/meta-fields/NoF"
          },
          "metaFieldId": {
            "description": "The meta field ID",
            "type": "string",
            "readOnly": true,
            "example": "NoF"
          },
          "name": {
            "description": "The meta field name",
            "type": "string",
            "maxLength": 63,
            "minLength": 3,
            "example": "Shoe size"
          },
          "value": {
            "description": "The meta field value",
            "type": "string",
            "maxLength": 65000,
            "minLength": 0,
            "example": "11"
          },
          "valueType": {
            "description": "The value type enumerable",
            "type": "string",
            "enum": [
              "string",
              "integer"
            ],
            "example": "integer"
          },
          "description": {
            "description": "The meta field description",
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "Description of this meta field"
          }
        },
        "type": "object"
      },
      "MetaField": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMetaField"
          },
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "NewMetaField": {
        "required": [
          "name",
          "value",
          "valueType"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMetaField"
          }
        ]
      },
      "Product": {
        "properties": {
          "productId": {
            "description": "The product ID",
            "type": "string",
            "readOnly": true,
            "example": "9I"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3/products/9I"
          },
          "name": {
            "description": "The product name",
            "type": "string",
            "maxLength": 255,
            "minLength": 2,
            "example": "Monster Cap"
          },
          "type": {
            "description": "The product type",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "Headwear"
          },
          "url": {
            "description": "The external URL for the product",
            "type": "string",
            "format": "uri",
            "maxLength": 2048,
            "example": "https://somedomain.com/products/456"
          },
          "vendor": {
            "description": "The product vendor",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "GetResponse"
          },
          "externalId": {
            "description": "The external ID is the identifying string or number of the product given by another software",
            "type": "string",
            "maxLength": 255,
            "example": "123456"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewProductCategory"
            }
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewProductVariant"
            }
          },
          "metaFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewMetaField"
            }
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "NewProduct": {
        "required": [
          "name",
          "variants"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "UpdateProduct": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ]
      },
      "UpsertProductCategory": {
        "description": "This method makes it possible to assign product categories, and to set a default product category. It doesn't remove or unassign product categories.",
        "required": [
          "categories"
        ],
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpsertSingleProductCategory"
            }
          }
        },
        "type": "object"
      },
      "UpsertSingleProductCategory": {
        "required": [
          "categoryId"
        ],
        "properties": {
          "categoryId": {
            "description": "The category ID",
            "type": "string",
            "example": "atQ"
          },
          "isDefault": {
            "description": "This is a default category",
            "type": "boolean",
            "example": true
          }
        },
        "type": "object"
      },
      "UpsertMetaField": {
        "description": "This method assigns metafields. It doesn't unassign or delete them.",
        "required": [
          "metaFields"
        ],
        "properties": {
          "metaFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpsertSingleMetaField"
            }
          }
        },
        "type": "object"
      },
      "UpsertSingleMetaField": {
        "required": [
          "metaFieldId"
        ],
        "properties": {
          "metaFieldId": {
            "description": "MetaField ID",
            "type": "string",
            "example": "NoF"
          }
        },
        "type": "object"
      },
      "UpdateMetaField": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MetaField"
          }
        ]
      },
      "BaseProductVariant": {
        "properties": {
          "variantId": {
            "description": "The product ID",
            "type": "string",
            "readOnly": true,
            "example": "VTB"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3/products/9I/variants/VTB"
          },
          "name": {
            "description": "The product name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "example": "Red Monster Cap"
          },
          "url": {
            "description": "The external URL to the product variant",
            "type": "string",
            "format": "uri",
            "maxLength": 2048,
            "example": "https://somedomain.com/products-variants/986"
          },
          "sku": {
            "description": "The stock-keeping unit of a variant. Must be unique within the product",
            "type": "string",
            "maxLength": 255,
            "minLength": 2,
            "example": "SKU-1254-56-457-5689"
          },
          "price": {
            "description": "The price",
            "type": "number",
            "format": "double",
            "example": 20
          },
          "priceTax": {
            "description": "The price including tax",
            "type": "number",
            "format": "double",
            "example": 27.5
          },
          "previousPrice": {
            "description": "The price before the change",
            "type": "number",
            "format": "double",
            "example": 25,
            "nullable": true
          },
          "previousPriceTax": {
            "description": "The price before the change including tax",
            "type": "number",
            "format": "double",
            "example": 33.6,
            "nullable": true
          },
          "quantity": {
            "description": "The quantity of variant items",
            "type": "integer",
            "format": "int64",
            "default": 1
          },
          "position": {
            "description": "The position of a variant",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "barcode": {
            "description": "The barcode of a variant",
            "type": "string",
            "maxLength": 255,
            "minLength": 2,
            "example": "12455687"
          },
          "externalId": {
            "description": "The external ID is the identifying string or number of the variant given by another software",
            "type": "string",
            "maxLength": 255,
            "example": "ext1456"
          },
          "description": {
            "description": "The description of a variant",
            "type": "string",
            "maxLength": 1000,
            "minLength": 2,
            "example": "Red Cap with GetResponse Monster print"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewProductVariantImage"
            }
          },
          "metaFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewMetaField"
            }
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewTax"
            }
          }
        },
        "type": "object"
      },
      "ProductVariant": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductVariant"
          },
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "NewProductVariant": {
        "required": [
          "name",
          "price",
          "priceTax",
          "sku"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseProductVariant"
          }
        ]
      },
      "UpdateProductVariant": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProductVariant"
          }
        ]
      },
      "NewProductVariantImage": {
        "required": [
          "src",
          "position"
        ],
        "properties": {
          "imageId": {
            "description": "The image ID",
            "type": "string",
            "readOnly": true,
            "example": "hY"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3/images/hY"
          },
          "src": {
            "description": "The source URL of an image",
            "type": "string",
            "format": "uri",
            "example": "http://somedomain.com/images/src/img58db7ec64bab9.png"
          },
          "position": {
            "description": "The position of an image",
            "type": "integer",
            "format": "int32",
            "example": "1"
          }
        },
        "type": "object"
      },
      "BaseTax": {
        "properties": {
          "taxId": {
            "description": "The tax ID",
            "type": "string",
            "readOnly": true,
            "example": "Sk"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3/taxes/Sk"
          },
          "name": {
            "description": "The tax name",
            "type": "string",
            "maxLength": 255,
            "minLength": 2,
            "example": "VAT"
          },
          "rate": {
            "description": "The rate value",
            "type": "number",
            "format": "double",
            "maximum": 99.9,
            "minimum": 0,
            "example": 23
          }
        },
        "type": "object"
      },
      "Tax": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTax"
          },
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "NewTax": {
        "required": [
          "name",
          "rate"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTax"
          }
        ]
      },
      "UpdateTax": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTax"
          }
        ]
      },
      "Address": {
        "properties": {
          "addressId": {
            "type": "string",
            "readOnly": true,
            "example": "k9"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/addresses/k9"
          },
          "countryCode": {
            "description": "The country code (ISO 3166-1 alpha-3)",
            "type": "string",
            "maxLength": 3,
            "minLength": 3,
            "example": "POL"
          },
          "countryName": {
            "description": "The country name, based on `countryCode`",
            "type": "string",
            "readOnly": true,
            "example": "Poland"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 3,
            "example": "some_shipping_address"
          },
          "firstName": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "example": "Doe"
          },
          "address1": {
            "description": "Address line 1",
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "Arkonska 6"
          },
          "address2": {
            "description": "Address line 2",
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": ""
          },
          "city": {
            "type": "string",
            "maxLength": 128,
            "minLength": 0,
            "example": "Gdansk"
          },
          "zip": {
            "description": "The ZIP/postal code, free text",
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "example": "80-387"
          },
          "province": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "pomorskie"
          },
          "provinceCode": {
            "description": "The province code, free text",
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "example": ""
          },
          "phone": {
            "description": "The phone number, free text",
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "1122334455"
          },
          "company": {
            "description": "The company name, free text",
            "type": "string",
            "maxLength": 128,
            "minLength": 0,
            "example": "GetResponse"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "NewAddress": {
        "required": [
          "name",
          "countryCode"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Address"
          }
        ]
      },
      "UpdateAddress": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Address"
          }
        ]
      },
      "Order": {
        "properties": {
          "orderId": {
            "description": "The order ID",
            "type": "string",
            "readOnly": true,
            "example": "fOh"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3/orders/fOh"
          },
          "contactId": {
            "description": "Create a contact by using `POST /v3/contacts`. Or, if the contact already exists, using `GET /v3/contacts`",
            "type": "string",
            "example": "k8u"
          },
          "orderUrl": {
            "description": "The external URL for an order",
            "type": "string",
            "format": "uri",
            "maxLength": 2048,
            "example": "https://somedomain.com/orders/order446"
          },
          "externalId": {
            "description": "The external ID is the identifying string or number of the order given by another software",
            "type": "string",
            "maxLength": 255,
            "example": "DH71239"
          },
          "totalPrice": {
            "description": "The total price of an order",
            "type": "number",
            "format": "double",
            "maximum": 999999999999.99,
            "minimum": 0,
            "example": 716
          },
          "totalPriceTax": {
            "description": "The total price tax of an order",
            "type": "number",
            "format": "double",
            "maximum": 999999999999.99,
            "minimum": 0,
            "example": 358.67
          },
          "currency": {
            "description": "The order currency code (ISO 4217)",
            "type": "string",
            "example": "PLN"
          },
          "status": {
            "description": "The status value",
            "type": "string",
            "maxLength": 64,
            "example": "NEW"
          },
          "cartId": {
            "description": "Create a cart by using `POST /v3/shops/{shopId}/carts`",
            "type": "string",
            "example": "QBNgBR"
          },
          "description": {
            "description": "The order description",
            "type": "string",
            "example": "More information about order."
          },
          "shippingPrice": {
            "description": "The shipping price for an order",
            "type": "number",
            "format": "double",
            "maximum": 999999999999.99,
            "minimum": 0,
            "example": 23
          },
          "shippingAddress": {
            "description": "The shipping address for an order",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAddress"
              }
            ]
          },
          "billingStatus": {
            "description": "The billing status of an order",
            "type": "string",
            "example": "PENDING"
          },
          "billingAddress": {
            "description": "The billing address for an order",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewAddress"
              }
            ]
          },
          "processedAt": {
            "description": "The exact time an order was made",
            "type": "string",
            "format": "date-time"
          },
          "metaFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewMetaField"
            }
          }
        },
        "type": "object"
      },
      "OrderResponse": {
        "properties": {
          "selectedVariants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderSelectedProductVariant"
            }
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Order"
          }
        ]
      },
      "NewOrder": {
        "required": [
          "contactId",
          "totalPrice",
          "currency",
          "selectedVariants"
        ],
        "properties": {
          "selectedVariants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewSelectedProductVariant"
            }
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Order"
          }
        ]
      },
      "UpdateOrder": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Order"
          }
        ]
      },
      "NewSelectedProductVariant": {
        "required": [
          "variantId",
          "price",
          "quantity"
        ],
        "properties": {
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/aS/products/Rf/variants/aBc"
          },
          "variantId": {
            "description": "The ID of a selected variant. You must first create a variant using: \n\n`POST` [Create product](https://apireference.getresponse.com/#operation/createProduct) \n\n`POST` [Create product variant](https://apireference.getresponse.com/#operation/createProductVariant)\n\n or get ID from variants created already:\n\n  `GET` [Get a list of product variants](https://apireference.getresponse.com/#operation/getProductVariantList)",
            "type": "string",
            "example": "p"
          },
          "price": {
            "description": "The product variant price",
            "type": "number",
            "format": "double",
            "maximum": 999999999999.99,
            "minimum": 0,
            "example": 840
          },
          "priceTax": {
            "description": "The product variant price tax",
            "type": "number",
            "format": "double",
            "maximum": 999999999999.99,
            "minimum": 0,
            "example": 428
          },
          "quantity": {
            "description": "The product variant quantity",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "example": "2"
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewTax"
            }
          }
        },
        "type": "object"
      },
      "OrderSelectedProductVariant": {
        "required": [
          "variantId",
          "price",
          "quantity"
        ],
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseCategory"
            }
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NewSelectedProductVariant"
          }
        ]
      },
      "NewCartSelectedProductVariant": {
        "required": [
          "variantId",
          "quantity",
          "price",
          "priceTax"
        ],
        "properties": {
          "variantId": {
            "description": "The ID of a selected variant. You must first create a variant using: \n\n`POST` [Create product](https://apireference.getresponse.com/#operation/createProduct) \n\n`POST` [Create product variant](https://apireference.getresponse.com/#operation/createProductVariant)\n\n or get ID from variants created already:\n\n  `GET` [Get a list of product variants](https://apireference.getresponse.com/#operation/getProductVariantList)",
            "type": "string",
            "example": "VTB"
          },
          "quantity": {
            "description": "The quantity",
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "example": 3
          },
          "price": {
            "description": "The price, tax excluded",
            "type": "number",
            "format": "double",
            "maximum": 999999999999.99,
            "minimum": 0,
            "example": 57
          },
          "priceTax": {
            "description": "The price, tax included",
            "type": "number",
            "format": "double",
            "maximum": 999999999999.99,
            "minimum": 0,
            "example": 68
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3/products/9I/variants/VTB"
          }
        },
        "type": "object"
      },
      "Cart": {
        "properties": {
          "cartId": {
            "description": "The contact ID",
            "type": "string",
            "readOnly": true,
            "example": "V"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3/carts/V"
          },
          "contactId": {
            "description": "The ID of the contact that the cart belongs to. You must first create the contact using POST /v3/contacts, or if it already exists, using GET /v3/contacts",
            "type": "string",
            "example": "Vp"
          },
          "totalPrice": {
            "description": "The total cart price, tax excluded",
            "type": "number",
            "format": "double",
            "maximum": 999999999999.99,
            "minimum": 0,
            "example": 1234.56
          },
          "totalTaxPrice": {
            "description": "The total cart price, tax included",
            "type": "number",
            "format": "double",
            "maximum": 999999999999.99,
            "minimum": 0,
            "example": 1334.56
          },
          "currency": {
            "description": "The currency code (ISO 4217)",
            "type": "string",
            "maxLength": 3,
            "minLength": 3,
            "example": "USD"
          },
          "selectedVariants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewCartSelectedProductVariant"
            }
          },
          "externalId": {
            "description": "The external ID is the identifying string or number of the cart, given by another software",
            "type": "string",
            "example": "ext-1234"
          },
          "cartUrl": {
            "description": "The external cart URL",
            "type": "string",
            "format": "url",
            "example": "http://example.com/cart/nQ"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "NewCart": {
        "required": [
          "contactId",
          "totalPrice",
          "currency",
          "selectedVariants"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Cart"
          }
        ]
      },
      "UpdateCart": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Cart"
          }
        ]
      },
      "Webinar": {
        "properties": {
          "webinarId": {
            "type": "string",
            "readOnly": true,
            "example": "yK6d"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/webinars/yK6d"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "startsOn": {
            "type": "string",
            "format": "date-time"
          },
          "webinarUrl": {
            "description": "The URL to the webinar room",
            "type": "string",
            "format": "uri"
          },
          "status": {
            "type": "string",
            "enum": [
              "upcoming",
              "finished",
              "published",
              "unpublished"
            ],
            "readOnly": true
          },
          "type": {
            "description": "The webinar type",
            "type": "string",
            "enum": [
              "all",
              "live",
              "on_demand"
            ],
            "readOnly": true
          },
          "campaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignReference"
            }
          },
          "newsletters": {
            "description": "The list of invitation messages",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebinarNewsletter"
            }
          },
          "statistics": {
            "type": "object",
            "$ref": "#/components/schemas/WebinarStatistics"
          }
        },
        "type": "object"
      },
      "WebinarStatistics": {
        "required": [
          "registrants",
          "visitors",
          "attendees"
        ],
        "properties": {
          "registrants": {
            "type": "integer",
            "format": "int64",
            "example": 15
          },
          "visitors": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "attendees": {
            "type": "integer",
            "format": "int64",
            "example": 5
          }
        },
        "type": "object"
      },
      "WebinarNewsletter": {
        "required": [
          "newsletterId",
          "href"
        ],
        "properties": {
          "newsletterId": {
            "description": "The ID of the webinar invitation message",
            "type": "string",
            "example": "NuE4"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "example": "https://api.getresponse.com/v3/newsletters/NuE4"
          }
        },
        "type": "object"
      },
      "ContactCustomField": {
        "properties": {
          "customFieldId": {
            "type": "string",
            "example": "kL6Nh"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "18-35"
            }
          }
        },
        "type": "object"
      },
      "ContactActivity": {
        "properties": {
          "activity": {
            "description": "The type of activity",
            "type": "string",
            "enum": [
              "send",
              "open",
              "click"
            ],
            "example": "click"
          },
          "subject": {
            "type": "string",
            "example": "Shop offer update!"
          },
          "createdOn": {
            "description": "The activity date",
            "type": "string",
            "format": "date-time"
          },
          "previewUrl": {
            "description": "This is only available for the `send` activity. It includes a link to the message preview",
            "type": "string",
            "format": "uri",
            "example": "https://www.grnewsletters.com/archive/campaign_name55f6b0ff01/Test-2135303.html",
            "nullable": true
          },
          "resource": {
            "type": "object",
            "$ref": "#/components/schemas/ContactActivityResource"
          },
          "clickTrack": {
            "description": "This is only available for the `click` activity. It includes the clicked link data",
            "type": "object",
            "nullable": true,
            "$ref": "#/components/schemas/ContactActivityClickTrack"
          }
        },
        "type": "object",
        "readOnly": true
      },
      "ContactActivityClickTrack": {
        "properties": {
          "id": {
            "description": "The click tracking ID",
            "type": "string",
            "example": "62WrE"
          },
          "name": {
            "description": "The name of the clicked link",
            "type": "string",
            "example": "Go to shop"
          },
          "url": {
            "description": "The URL of the clicked link",
            "type": "string",
            "format": "uri",
            "example": "https://my-shop.example.com/"
          }
        },
        "type": "object"
      },
      "ContactActivityResource": {
        "properties": {
          "resourceId": {
            "type": "string",
            "example": "oY2n",
            "nullable": true
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "newsletters",
              "splittests",
              "autoresponders",
              "rss-newsletters",
              "sms"
            ],
            "example": "newsletters"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "example": "https://api.getresponse.com/v3/newsletters/oY2n"
          }
        },
        "type": "object"
      },
      "ContactCustomFieldList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ContactCustomField"
        }
      },
      "ContactListElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Contact"
          },
          {
            "properties": {
              "note": {
                "type": "string",
                "maxLength": 255,
                "minLength": 0,
                "nullable": true
              },
              "ipAddress": {
                "description": "The contact's IP address. IPv4 and IPv6 formats are accepted.",
                "example": "1.2.3.4",
                "oneOf": [
                  {
                    "type": "string",
                    "format": "ipv4"
                  },
                  {
                    "type": "string",
                    "format": "ipv6"
                  }
                ]
              }
            },
            "type": "object"
          }
        ]
      },
      "ContactDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactListElement"
          },
          {
            "properties": {
              "geolocation": {
                "type": "object",
                "readOnly": true,
                "$ref": "#/components/schemas/ContactGeolocation"
              },
              "tags": {
                "description": "The list of contact tags, limited to 500 tags.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactTag"
                }
              },
              "customFieldValues": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactCustomFieldValue"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "ContactCustomFieldValue": {
        "required": [
          "customFieldId",
          "name",
          "type",
          "value",
          "values"
        ],
        "properties": {
          "customFieldId": {
            "description": "Custom field ID",
            "type": "string",
            "example": "4klkN"
          },
          "name": {
            "type": "string",
            "example": "age"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "18-35"
            }
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "18-35"
            }
          },
          "type": {
            "type": "string",
            "example": "single_select"
          },
          "fieldType": {
            "type": "string",
            "example": "single_select"
          },
          "valueType": {
            "type": "string",
            "example": "string"
          }
        },
        "type": "object"
      },
      "ContactGeolocation": {
        "properties": {
          "latitude": {
            "type": "string",
            "example": "54.35",
            "nullable": true
          },
          "longitude": {
            "type": "string",
            "example": "18.6667",
            "nullable": true
          },
          "continentCode": {
            "type": "string",
            "enum": [
              "OC",
              "AN",
              "SA",
              "NA",
              "AS",
              "EU",
              "AF"
            ],
            "example": "EU",
            "nullable": true
          },
          "countryCode": {
            "description": "The country code, compliant with ISO 3166-1 alpha-2",
            "type": "string",
            "example": "PL",
            "nullable": true
          },
          "region": {
            "type": "string",
            "example": "82",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "example": "80-387",
            "nullable": true
          },
          "dmaCode": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "example": "Gdansk",
            "nullable": true
          }
        },
        "type": "object"
      },
      "BaseSearchContacts": {
        "description": "The short description of a saved search.",
        "properties": {
          "searchContactId": {
            "description": "The unique search-contact identifier",
            "type": "string",
            "readOnly": true,
            "example": "pV3r"
          },
          "name": {
            "description": "The unique name of search-contact",
            "type": "string",
            "example": "custom test filter"
          },
          "createdOn": {
            "description": "The UTC date time format ISO 8601, e.g. 2018-04-10T10:02:57+0000",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-04-10T10:02:57+0000"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://app.getresponse.com/v3/search-contacts/pV3r"
          }
        },
        "type": "object"
      },
      "BaseSearchContactsDetails": {
        "required": [
          "searchContactId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSearchContacts"
          }
        ]
      },
      "SearchContactsDetails": {
        "description": "Search contact details.",
        "required": [
          "searchContactId",
          "name",
          "createdOn",
          "href"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactsConditionsDetails"
          },
          {
            "$ref": "#/components/schemas/BaseSearchContacts"
          }
        ]
      },
      "SearchContactsConditionsDetails": {
        "required": [
          "subscribersType",
          "sectionLogicOperator",
          "section"
        ],
        "properties": {
          "subscribersType": {
            "description": "Only one subscription status",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "subscribed",
                "undelivered",
                "removed",
                "unconfirmed"
              ],
              "example": [
                "subscribed"
              ]
            }
          },
          "sectionLogicOperator": {
            "description": "Match 'any' (`or` value) or 'all' (`and` value) of the following conditions",
            "type": "string",
            "enum": [
              "or",
              "and"
            ],
            "example": "or"
          },
          "section": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchContactSection"
            }
          }
        },
        "type": "object",
        "example": {
          "subscribersType": [
            "subscribed"
          ],
          "sectionLogicOperator": "or",
          "section": [
            {
              "campaignIdsList": [
                "tamqY"
              ],
              "logicOperator": "or",
              "subscriberCycle": [
                "receiving_autoresponder",
                "not_receiving_autoresponder"
              ],
              "subscriptionDate": "all_time",
              "conditions": [
                {
                  "conditionType": "crm",
                  "pipelineScope": "PSVq",
                  "stageScope": "all"
                }
              ]
            }
          ]
        }
      },
      "NewSearchContacts": {
        "description": "New search contacts.",
        "required": [
          "name",
          "subscribersType",
          "sectionLogicOperator",
          "section"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactsConditionsDetails"
          },
          {
            "$ref": "#/components/schemas/BaseSearchContacts"
          }
        ]
      },
      "UpdateSearchContacts": {
        "description": "New search contacts.",
        "required": [
          "name",
          "subscribersType",
          "sectionLogicOperator",
          "section"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactsConditionsDetails"
          },
          {
            "$ref": "#/components/schemas/BaseSearchContacts"
          }
        ]
      },
      "SpecificDateEnum": {
        "description": "The specific date.",
        "type": "string",
        "enum": [
          "today",
          "yesterday",
          "last_7_days",
          "last_30_days",
          "last_n_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month"
        ],
        "example": "last_30_days"
      },
      "SpecificDateExtendedEnum": {
        "description": "The specific date.",
        "type": "string",
        "example": "last_30_days",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SpecificDateEnum"
          },
          {
            "description": "The last 2 months specific date constant.",
            "enum": [
              "last_2_months"
            ]
          }
        ]
      },
      "RelationalNumericOperatorEnum": {
        "description": "The relational operators.",
        "type": "string",
        "enum": [
          "numeric_lt",
          "numeric_gt",
          "numeric_eq",
          "numeric_not_eq",
          "numeric_lt_eq",
          "numeric_gt_eq"
        ],
        "example": "numeric_lt"
      },
      "MessageTypeOperator": {
        "description": "The type of message.",
        "type": "string",
        "enum": [
          "autoresponder",
          "newsletter",
          "splittest",
          "automation"
        ],
        "example": "autoresponder"
      },
      "SearchedContactDetails": {
        "properties": {
          "contactId": {
            "description": "The contact identifier",
            "type": "string",
            "example": "jtLF5i"
          },
          "name": {
            "description": "The contact description",
            "type": "string",
            "example": "John Doe",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "origin": {
            "type": "string",
            "enum": [
              "import",
              "email",
              "www",
              "panel",
              "leads",
              "sale",
              "api",
              "forward",
              "survey",
              "iphone",
              "copy",
              "landing_page",
              "webinar",
              "course",
              "premium_newsletter"
            ],
            "example": "landing_page"
          },
          "dayOfCycle": {
            "type": "string",
            "format": "integer",
            "example": "153",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "example": "2018-01-15T13:30:42+0000"
          },
          "campaign": {
            "type": "object",
            "example": {
              "campaignId": "tamqY",
              "name": "test_campaign",
              "href": "https://api.getresponse.com/v3/campaigns/tamqY"
            },
            "$ref": "#/components/schemas/CampaignReference"
          },
          "score": {
            "type": "string",
            "format": "integer",
            "example": "5",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "enum": [
              "api",
              "automation",
              "blacklisted",
              "bounce",
              "cleaner",
              "complaint",
              "support",
              "unsubscribe",
              "user"
            ],
            "example": "support",
            "nullable": true
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "example": "2024-02-12T11:00:00+0000",
            "nullable": true
          }
        },
        "type": "object",
        "readOnly": true
      },
      "SpecificDateType": {
        "description": "The date formatted as yyyy-mm-dd",
        "type": "string",
        "format": "date",
        "example": "2018-04-01"
      },
      "SpecificDateTimeType": {
        "description": "The date time string compliant with ISO 8601",
        "type": "string",
        "format": "date",
        "example": "2018-04-01T00:00:00+0000"
      },
      "IntervalDateType": {
        "description": "The date interval string compliant with ISO 8601, supported format: \u003Cstart_date\u003E/\u003Cend_date\u003E",
        "type": "string",
        "example": "2018-04-01/2018-04-10"
      },
      "ConditionStringOperator": {
        "required": [
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "string_operator"
            ],
            "example": "string_operator"
          },
          "operator": {
            "type": "string",
            "enum": [
              "is",
              "is_not",
              "contains",
              "not_contains",
              "starts",
              "ends",
              "not_starts",
              "not_ends"
            ],
            "example": "is_not"
          },
          "value": {
            "type": "string",
            "example": "new"
          }
        },
        "type": "object",
        "example": {
          "operatorType": "string_operator",
          "operator": "starts",
          "value": "new"
        }
      },
      "ConditionStringOperatorList": {
        "description": "Used with a custom field only.",
        "required": [
          "operatorType",
          "operator"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "string_operator_list"
            ],
            "example": "string_operator_list"
          },
          "operator": {
            "type": "string",
            "enum": [
              "is",
              "is_not",
              "contains",
              "not_contains",
              "starts",
              "ends",
              "not_starts",
              "not_ends",
              "assigned",
              "not_assigned"
            ],
            "example": "is"
          },
          "value": {
            "description": "The value of the search",
            "type": "string",
            "example": "18-29"
          }
        },
        "type": "object",
        "example": {
          "operatorType": "string_operator_list",
          "operator": "is",
          "value": "18-29"
        }
      },
      "ConditionMessageOperator": {
        "description": "The operator allows searching by message type.",
        "required": [
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "message_operator"
            ],
            "example": "message_operator"
          },
          "operator": {
            "$ref": "#/components/schemas/MessageTypeOperator"
          },
          "value": {
            "description": "The identifier of a selected resource: autoresponder, newsletter, split test or automation message",
            "type": "string",
            "example": "SGNLr"
          }
        },
        "type": "object",
        "example": {
          "operatorType": "message_operator",
          "operator": "autoresponder",
          "value": "SGNLr"
        }
      },
      "CustomDateRange": {
        "required": [
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "description": "The UTC date format",
            "type": "string",
            "format": "date",
            "example": "2018-04-01"
          },
          "to": {
            "description": "The UTC date format",
            "type": "string",
            "format": "date",
            "example": "2018-04-10"
          }
        },
        "type": "object"
      },
      "SectionAllTimeSubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionTodaySubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionYesterdaySubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionLast7DaysSubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionLast30DaysSubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionThisWeekSubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionLastWeekSubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionThisMonthSubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionLastMonthSubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionLast2MonthsSubscriptionDate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SectionCustomSubscriptionDate": {
        "required": [
          "customDate"
        ],
        "properties": {
          "customDate": {
            "type": "object",
            "$ref": "#/components/schemas/CustomDateRange"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchContactSection"
          }
        ]
      },
      "SearchContactSection": {
        "required": [
          "campaignIdsList",
          "logicOperator",
          "subscriberCycle",
          "subscriptionDate"
        ],
        "properties": {
          "campaignIdsList": {
            "description": "An array of campaign identifiers",
            "type": "array",
            "items": {
              "type": "string",
              "example": "tamqY"
            },
            "example": [
              "tamqY",
              "tuKd3"
            ]
          },
          "logicOperator": {
            "type": "string",
            "enum": [
              "and",
              "or"
            ]
          },
          "subscriberCycle": {
            "description": "Defining whether or not a subscriber is in an autoresponder cycle",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "receiving_autoresponder",
                "not_receiving_autoresponder"
              ]
            },
            "example": [
              "receiving_autoresponder",
              "not_receiving_autoresponder"
            ]
          },
          "conditions": {
            "description": "One of the search contact conditions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionType"
            }
          },
          "subscriptionDate": {
            "description": "Matches the matching period",
            "type": "string",
            "enum": [
              "all_time",
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "this_week",
              "last_week",
              "this_month",
              "last_month",
              "last_2_months",
              "custom"
            ]
          }
        },
        "type": "object",
        "discriminator": {
          "propertyName": "subscriptionDate",
          "mapping": {
            "all_time": "#/components/schemas/SectionAllTimeSubscriptionDate",
            "today": "#/components/schemas/SectionTodaySubscriptionDate",
            "yesterday": "#/components/schemas/SectionYesterdaySubscriptionDate",
            "last_7_days": "#/components/schemas/SectionLast7DaysSubscriptionDate",
            "last_30_days": "#/components/schemas/SectionLast30DaysSubscriptionDate",
            "this_week": "#/components/schemas/SectionThisWeekSubscriptionDate",
            "last_week": "#/components/schemas/SectionLastWeekSubscriptionDate",
            "this_month": "#/components/schemas/SectionThisMonthSubscriptionDate",
            "last_month": "#/components/schemas/SectionLastMonthSubscriptionDate",
            "last_2_months": "#/components/schemas/SectionLast2MonthsSubscriptionDate",
            "custom": "#/components/schemas/SectionCustomSubscriptionDate"
          }
        }
      },
      "ConditionType": {
        "required": [
          "conditionType"
        ],
        "properties": {
          "conditionType": {
            "type": "string",
            "enum": [
              "name",
              "email",
              "custom",
              "subscription_date",
              "subscription_method",
              "opened",
              "not_opened",
              "phase",
              "last_send_date",
              "last_click_date",
              "last_open_date",
              "webinar",
              "clicked",
              "not_clicked",
              "sent",
              "not_sent",
              "geo",
              "gdpr",
              "score",
              "engagement_score",
              "tag",
              "goal",
              "crm",
              "ecommerce_number_of_purchases",
              "ecommerce_total_spent",
              "ecommerce_product_purchased",
              "ecommerce_brand_purchased",
              "ecommerce_abandoned_cart",
              "sms_sent",
              "sms_link_clicked",
              "sms_link_not_clicked",
              "custom_event"
            ]
          }
        },
        "type": "object",
        "discriminator": {
          "propertyName": "conditionType",
          "mapping": {
            "name": "#/components/schemas/NameCondition",
            "email": "#/components/schemas/EmailCondition",
            "custom": "#/components/schemas/CustomFieldCondition",
            "subscription_date": "#/components/schemas/SubscriptionDateCondition",
            "subscription_method": "#/components/schemas/SubscriptionMethodCondition",
            "opened": "#/components/schemas/OpenedCondition",
            "not_opened": "#/components/schemas/NotOpenedCondition",
            "phase": "#/components/schemas/AutoresponderDayCondition",
            "last_send_date": "#/components/schemas/LastSendDateCondition",
            "last_click_date": "#/components/schemas/LastClickDateCondition",
            "last_open_date": "#/components/schemas/LastOpenDateCondition",
            "webinar": "#/components/schemas/WebinarCondition",
            "clicked": "#/components/schemas/LinkClickedCondition",
            "not_clicked": "#/components/schemas/LinkNotClickedCondition",
            "sent": "#/components/schemas/MessageSentCondition",
            "not_sent": "#/components/schemas/MessageNotSentCondition",
            "geo": "#/components/schemas/GeolocationCondition",
            "gdpr": "#/components/schemas/GdprCondition",
            "score": "#/components/schemas/ScoringCondition",
            "engagement_score": "#/components/schemas/EngagementScoreCondition",
            "tag": "#/components/schemas/TagCondition",
            "goal": "#/components/schemas/GoalCondition",
            "crm": "#/components/schemas/CrmCondition",
            "ecommerce_number_of_purchases": "#/components/schemas/ECommerceNumberOfPurchasesCondition",
            "ecommerce_total_spent": "#/components/schemas/ECommerceTotalSpentCondition",
            "ecommerce_product_purchased": "#/components/schemas/ECommerceProductPurchasedCondition",
            "ecommerce_brand_purchased": "#/components/schemas/ECommerceBrandPurchasedCondition",
            "sms_sent": "#/components/schemas/SmsSentCondition",
            "sms_link_clicked": "#/components/schemas/SmsLinkClickedCondition",
            "sms_link_not_clicked": "#/components/schemas/SmsLinkNotClickedCondition",
            "ecommerce_abandoned_cart": "#/components/schemas/ECommerceAbandonedCartCondition",
            "custom_event": "#/components/schemas/CustomEventCondition"
          }
        }
      },
      "NameCondition": {
        "type": "object",
        "example": {
          "conditionType": "name",
          "operatorType": "string_operator",
          "operator": "contains",
          "value": "John"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          },
          {
            "$ref": "#/components/schemas/ConditionStringOperator"
          }
        ]
      },
      "EmailCondition": {
        "type": "object",
        "example": {
          "conditionType": "email",
          "operatorType": "string_operator",
          "operator": "contains",
          "value": "john"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          },
          {
            "$ref": "#/components/schemas/ConditionStringOperator"
          }
        ]
      },
      "CustomFieldCondition": {
        "description": "Search a contact by custom fields.",
        "required": [
          "operator",
          "scope",
          "operatorType"
        ],
        "properties": {
          "operatorType": {
            "description": "Depends on the type of custom field, read more in [custom field condition documentation in segments (search contacts) reference manual](https://apidocs.getresponse.com/v3/case-study/segments-manual#get-by-custom-fields-search-contacts)",
            "type": "string",
            "enum": [
              "string_operator_list",
              "string_operator",
              "numeric_operator",
              "date_operator"
            ],
            "example": "string_operator_list"
          },
          "operator": {
            "description": "Depends on selected `\"operatorType\"`, read more in [custom field condition documentation in segments (search contacts) reference manual](https://apidocs.getresponse.com/v3/case-study/segments-manual#get-by-custom-fields-search-contacts)",
            "type": "string",
            "example": "is",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomFieldStringOperatorEnum"
              },
              {
                "$ref": "#/components/schemas/CustomFieldNumericOperatorEnum"
              },
              {
                "$ref": "#/components/schemas/CustomFieldDateOperatorEnum"
              }
            ]
          },
          "value": {
            "description": "Depends on selected `\"operator\"` and `\"operatorType\"`, read more in [custom field condition documentation in segments (search contacts) reference manual](https://apidocs.getresponse.com/v3/case-study/segments-manual#get-by-custom-fields-search-contacts)",
            "type": "string",
            "example": "new",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomFieldValueForStringOperatorTypes"
              },
              {
                "$ref": "#/components/schemas/CustomFieldValueForNumericOperatorType"
              },
              {
                "$ref": "#/components/schemas/CustomFieldValueForOperatorTypeDateAndOperatorSpecificDate"
              },
              {
                "$ref": "#/components/schemas/CustomFieldValueDateForOperatorTypeDateAndOperatorDateToOrDateFrom"
              },
              {
                "$ref": "#/components/schemas/CustomFieldValueDateTimeForOperatorTypeDateAndOperatorDateToOrDateFrom"
              },
              {
                "$ref": "#/components/schemas/CustomFieldValueForOperatorTypeDateAndOperatorCustom"
              }
            ]
          },
          "scope": {
            "description": "The identifier of the custom field, read more in  [custom field condition documentation in segments (search contacts) reference manual](https://apidocs.getresponse.com/v3/case-study/segments-manual#get-by-custom-fields-search-contacts)",
            "type": "string"
          },
          "numberOfDays": {
            "description": "Required only when `\"value\":\"last_n_days\"`, read more in [custom field condition documentation in segments (search contacts) reference manual](https://apidocs.getresponse.com/v3/case-study/segments-manual#get-by-custom-fields-search-contacts)",
            "type": "integer",
            "example": 20
          },
          "includeCurrentPeriod": {
            "description": "Flag determines if current day will be included into chosen range. This flag can be used with `last_n_days`.",
            "type": "boolean",
            "example": true
          }
        },
        "type": "object",
        "example": {
          "conditionType": "custom",
          "scope": "pa3N6",
          "operatorType": "string_operator_list",
          "operator": "is",
          "value": "Female"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "CustomFieldStringOperatorEnum": {
        "description": "Allowed operators for `\"operatorType\":\"string_operator\"` and `\"operatorType\":\"string_operator_list\"`",
        "type": "string",
        "enum": [
          "is",
          "is_not",
          "contains",
          "not_contains",
          "starts",
          "ends",
          "not_starts",
          "not_ends",
          "assigned",
          "not_assigned"
        ],
        "example": "is"
      },
      "CustomFieldNumericOperatorEnum": {
        "description": "Allowed operators for `\"operatorType\":\"numeric_operator\"`",
        "type": "string",
        "enum": [
          "numeric_lt",
          "numeric_gt",
          "numeric_eq",
          "numeric_not_eq",
          "numeric_lt_eq",
          "numeric_gt_eq",
          "assigned'",
          "not_assigned"
        ],
        "example": "numeric_lt"
      },
      "CustomFieldDateOperatorEnum": {
        "description": "Allowed operators for `\"operatorType\":\"date_operator\"`",
        "type": "string",
        "enum": [
          "date_to",
          "date_from",
          "custom",
          "specific_date",
          "assigned",
          "not_assigned"
        ],
        "example": "date_to"
      },
      "CustomFieldValueForStringOperatorTypes": {
        "description": "Any string, allowed only for `\"operatorType\":\"string_operator\"` and `\"operatorType\":\"string_operator_list\"`",
        "type": "string",
        "example": "Canada"
      },
      "CustomFieldValueForNumericOperatorType": {
        "description": "Any number, allowed only for `\"operatorType\":\"numeric_operator\"`",
        "type": "string",
        "example": "1"
      },
      "CustomFieldValueForOperatorTypeDateAndOperatorSpecificDate": {
        "description": "Allowed values for `\"operatorType\":\"date_operator\"` with `\"operator\":\"specific_date\"`",
        "type": "string",
        "enum": [
          "today",
          "yesterday",
          "last_7_days",
          "last_30_days",
          "last_n_days",
          "this_week",
          "last_week",
          "this_month",
          "last_month",
          "last_2_months"
        ],
        "example": "today"
      },
      "CustomFieldValueDateForOperatorTypeDateAndOperatorDateToOrDateFrom": {
        "description": "Date string formatted as yyyy-mm-dd, allowed only for `\"operatorType\":\"date_operator\"` with `\"operator\":\"date_to\"` or `\"operator\":\"date_from\"`",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecificDateType"
          }
        ]
      },
      "CustomFieldValueDateTimeForOperatorTypeDateAndOperatorDateToOrDateFrom": {
        "description": "Date time string compliant with ISO 8601, allowed only for `\"operatorType\":\"date_operator\"` with `\"operator\":\"date_to\"` or `\"operator\":\"date_from\"`",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpecificDateTimeType"
          }
        ]
      },
      "CustomFieldValueForOperatorTypeDateAndOperatorCustom": {
        "description": "Date interval string compliant with ISO 8601, supported format: \u003Cstart_date\u003E/\u003Cend_date\u003E, allowed only for `\"operatorType\":\"date_operator\"` with `\"operator\":\"custom\"`",
        "allOf": [
          {
            "$ref": "#/components/schemas/IntervalDateType"
          }
        ]
      },
      "SubscriptionDateCondition": {
        "description": "Use this to find a contact by subscription date, use.",
        "required": [
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "date_operator"
            ],
            "example": "date_operator"
          },
          "operator": {
            "type": "string",
            "enum": [
              "date_to",
              "date_from",
              "specific_date",
              "custom"
            ]
          },
          "value": {
            "type": "string",
            "example": "2018-04-01/2018-04-30",
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateType"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateTimeType"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateExtendedEnum"
                  }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntervalDateType"
                  }
                ]
              }
            ]
          }
        },
        "type": "object",
        "example": {
          "conditionType": "subscription_date",
          "operatorType": "date_operator",
          "operator": "custom",
          "value": "2018-04-01/2018-04-30"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "SubscriptionMethodCondition": {
        "description": "The subscription method.",
        "required": [
          "method"
        ],
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "webform",
              "import",
              "landing_page",
              "api",
              "email",
              "panel",
              "mobile",
              "survey",
              "sales",
              "copy",
              "leads",
              "webinar",
              "chat",
              "website_builder_elegant",
              "course",
              "premium_newsletter"
            ]
          },
          "webformType": {
            "description": "The property required for the webform subscription method. If it equals webforms, webformsv2 or popups, additonal property value is needed.",
            "type": "string",
            "enum": [
              "all",
              "webforms",
              "webformsv2",
              "popups"
            ]
          },
          "value": {
            "description": "The field required for `import`, `landing_page`, `webinar` and `website_builder_elegant`, optional for the `webform` method",
            "type": "string",
            "oneOf": [
              {
                "description": "If the method value equals `webform`, then the value is equal to the webform, webformv2 or popup identifiers. The field is required for the webformType={webforms, webformsv2, popups}.",
                "example": "PSO39"
              },
              {
                "description": "If the method value equals `import`, then the value is equal to the import identifier, or `all` for all imports.",
                "example": "all"
              },
              {
                "description": "If the method value equals `landing_page`, then the value is equal to the landing page identifier, or `all` for all landing pages",
                "example": "all"
              },
              {
                "description": "If the method value equals `webinar`, then the value is equal to the webinar identifier, or `all` for all webinars",
                "example": "all"
              },
              {
                "description": "If the method value equals `website_builder_elegant`, then the value is equal to the website UUID, or `all` for all websites",
                "example": "861c0426-f876-49a9-9306-b15cd5d3db2f"
              }
            ]
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "OpenedCondition": {
        "description": "Search contacts who did open a message.",
        "type": "object",
        "example": {
          "conditionType": "opened",
          "operatorType": "message_operator",
          "operator": "autoresponder",
          "value": "SGNLr:"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          },
          {
            "$ref": "#/components/schemas/ConditionMessageOperator"
          }
        ]
      },
      "NotOpenedCondition": {
        "description": "Search contacts who didn't open a message.",
        "required": [
          "operatorType",
          "operator",
          "dateOperator"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "complex_message_operator"
            ],
            "example": "complex_message_operator"
          },
          "operator": {
            "description": "Specifies the type of message to search for",
            "example": "newsletter",
            "oneOf": [
              {
                "description": "For all available message types",
                "type": "string",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "$ref": "#/components/schemas/MessageTypeOperator"
              }
            ]
          },
          "scope": {
            "description": "The message identifier. Required only for the operator different from 'all'.",
            "type": "string",
            "example": "z4Zje"
          },
          "dateOperator": {
            "description": "It allows you to set a date range. For some of them `value` will be required. Examples can be found here: [API Docs](https://apidocs.getresponse.com/v3/case-study/segments-manual#not-opened-action).",
            "type": "string",
            "enum": [
              "date_from",
              "never",
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "last_n_days",
              "this_week",
              "this_month"
            ]
          },
          "value": {
            "description": "This field is required only for `date_from` and `last_n_days` date operators.",
            "oneOf": [
              {
                "description": "The date string compliant with ISO 8601. The value field is required for the dateOperator equal to `date_from`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateType"
                  }
                ]
              },
              {
                "description": "Number of days. Required for `last_n_days` date operator.",
                "type": "integer",
                "example": 10
              }
            ]
          },
          "includeCurrentPeriod": {
            "description": "Flag determines if current day will be included into chosen range. This flag can be used with `last_7_days`, `last_30_days`, `last_n_days`.",
            "type": "boolean",
            "example": true
          }
        },
        "type": "object",
        "example": {
          "conditionType": "not_opened",
          "operatorType": "complex_message_operator",
          "scope": "z4Zje",
          "operator": "autoresponder",
          "dateOperator": "never"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "AutoresponderDayCondition": {
        "description": "To find the autoresponder cycle day of a contact.",
        "required": [
          "operatorType",
          "operator"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "numeric_operator"
            ]
          },
          "operator": {
            "type": "string",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RelationalNumericOperatorEnum"
              },
              {
                "enum": [
                  "assigned",
                  "not_assigned"
                ],
                "example": "assigned"
              }
            ]
          },
          "value": {
            "description": "The autoresponder cycle day value. The field is prohibited for the operators assigned and not_assigned.",
            "type": "integer",
            "format": "int32",
            "example": 6
          }
        },
        "type": "object",
        "example": {
          "conditionType": "phase",
          "operatorType": "numeric_operator",
          "operator": "numeric_eq",
          "value": 6
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "LastSendDateCondition": {
        "description": "Search the last time when an email message was sent to a contact.",
        "required": [
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "date_operator"
            ]
          },
          "operator": {
            "type": "string",
            "enum": [
              "date_to",
              "date_from",
              "specific_date",
              "custom"
            ]
          },
          "value": {
            "type": "string",
            "example": "last_7_days",
            "oneOf": [
              {
                "description": "For `date_to` or `date_from` operators. Date string is compliant with ISO 8601.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateType"
                  }
                ]
              },
              {
                "description": "For the operator=custom, it's the time interval compliant with ISO 8601",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntervalDateType"
                  }
                ]
              },
              {
                "description": "For a specific_date operator",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateExtendedEnum"
                  }
                ]
              }
            ]
          }
        },
        "type": "object",
        "example": {
          "conditionType": "last_send_date",
          "operatorType": "date_operator",
          "operator": "specific_date",
          "value": "last_7_days"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "LastClickDateCondition": {
        "description": "This is used to find the last time when a contact clicked a message.",
        "required": [
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "date_operator"
            ],
            "example": "date_operator"
          },
          "operator": {
            "type": "string",
            "enum": [
              "date_to",
              "date_from",
              "specific_date",
              "custom"
            ],
            "example": "specific_date"
          },
          "value": {
            "type": "string",
            "example": "last_7_days",
            "oneOf": [
              {
                "description": "For `date_to` or `date_from` operators. Date string is compliant with ISO 8601.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateType"
                  }
                ]
              },
              {
                "description": "For the operator=custom, it's the time interval compliant with ISO 8601",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntervalDateType"
                  }
                ]
              },
              {
                "description": "For the specific_date operator",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateExtendedEnum"
                  }
                ]
              }
            ]
          }
        },
        "type": "object",
        "example": {
          "conditionType": "last_click_date",
          "operatorType": "date_operator",
          "operator": "specific_date",
          "value": "last_7_days"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "LastOpenDateCondition": {
        "description": "Search the last time when a contact opened a message.",
        "required": [
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "date_operator"
            ],
            "example": "date_operator"
          },
          "operator": {
            "type": "string",
            "enum": [
              "date_to",
              "date_from",
              "specific_date",
              "custom"
            ],
            "example": "specific_date"
          },
          "value": {
            "type": "string",
            "example": "last_7_days",
            "oneOf": [
              {
                "description": "For `date_to` or `date_from` operators. Date string is compliant with ISO 8601.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateType"
                  }
                ]
              },
              {
                "description": "For the operator=custom, it's the time interval compliant with ISO 8601",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntervalDateType"
                  }
                ]
              },
              {
                "description": "For the specific_date operator",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateExtendedEnum"
                  }
                ]
              }
            ]
          }
        },
        "type": "object",
        "example": {
          "conditionType": "last_open_date",
          "operatorType": "date_operator",
          "operator": "specific_date",
          "value": "last_7_days"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "WebinarCondition": {
        "description": "Search contacts that have participated/not participated in a specific webinar as a host/listener/presenter/registrant/any user.",
        "required": [
          "scope",
          "webinarCondition",
          "contactType"
        ],
        "properties": {
          "scope": {
            "description": "The identifier of a webinar",
            "type": "string",
            "example": "MNAR"
          },
          "webinarCondition": {
            "type": "string",
            "enum": [
              "participated",
              "not_participated"
            ],
            "example": "participated"
          },
          "contactType": {
            "type": "string",
            "enum": [
              "host",
              "listener",
              "presenter",
              "registrant",
              "all"
            ],
            "example": "presenter"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "webinar",
          "scope": "MNAR",
          "webinarCondition": "participated",
          "contactType": "presenter"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "LinkClickedCondition": {
        "description": "Search contacts that clicked on a link.",
        "required": [
          "operatorType",
          "operator",
          "scope",
          "clickTrackId"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "message_operator"
            ],
            "example": "message_operator"
          },
          "operator": {
            "$ref": "#/components/schemas/MessageTypeOperator"
          },
          "scope": {
            "description": "The message identifier",
            "type": "string",
            "example": "SGNLr"
          },
          "clickTrackId": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "description": "The identifier of the clickTrackId",
                "type": "string",
                "example": "SGNLr"
              }
            ]
          }
        },
        "type": "object",
        "example": {
          "conditionType": "clicked",
          "operatorType": "message_operator",
          "operator": "autoresponder",
          "scope": "SGNLr",
          "clickTrackId": "all"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "LinkNotClickedCondition": {
        "description": "Search contacts that didn't click a link.",
        "required": [
          "operatorType",
          "operator",
          "dateOperator"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "complex_message_operator"
            ],
            "example": "complex_message_operator"
          },
          "operator": {
            "example": "newsletter",
            "oneOf": [
              {
                "description": "For all available message types",
                "type": "string",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "$ref": "#/components/schemas/MessageTypeOperator"
              }
            ]
          },
          "dateOperator": {
            "description": "It allows you to set a date range. For some of them `value` will be required. Examples can be found here: [API Docs](https://apidocs.getresponse.com/v3/case-study/segments-manual#not-opened-action).",
            "enum": [
              "date_from",
              "never",
              "today",
              "yesterday",
              "last_7_days",
              "last_30_days",
              "last_n_days",
              "this_week",
              "this_month"
            ],
            "example": "today"
          },
          "value": {
            "description": "This field is required only for `date_from` and `last_n_days` date operators.",
            "oneOf": [
              {
                "description": "The date string compliant with ISO 8601. The value field is required for the dateOperator equal to `date_from`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateType"
                  }
                ]
              },
              {
                "description": "Number of days. Required for `last_n_days` date operator.",
                "type": "integer",
                "example": 10
              }
            ]
          },
          "includeCurrentPeriod": {
            "description": "Flag determines if current day will be included into chosen range. This flag can be used with `last_7_days`, `last_30_days`, `last_n_days`.",
            "type": "boolean",
            "example": true
          },
          "scope": {
            "description": "The message identifier. This field is prohibited for the 'all' operator.",
            "type": "string",
            "example": "zhgnQ"
          },
          "clickTrackId": {
            "description": "The click track identifier",
            "type": "string",
            "example": "PPxiOW",
            "oneOf": [
              {
                "description": "For all possible links in a message",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "description": "For a specified click track ID",
                "example": "PPxiOW"
              }
            ]
          }
        },
        "type": "object",
        "example": {
          "conditionType": "not_clicked",
          "operatorType": "complex_message_operator",
          "operator": "newsletter",
          "dateOperator": "today",
          "scope": "zhgnQ",
          "clickTrackId": "all"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "MessageSentCondition": {
        "description": "Search contacts who received a certain message.",
        "required": [
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "message_operator"
            ],
            "example": "message_operator"
          },
          "operator": {
            "$ref": "#/components/schemas/MessageTypeOperator"
          },
          "value": {
            "description": "The message identifier",
            "type": "string",
            "example": "zSFIB"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "sent",
          "operatorType": "message_operator",
          "operator": "autoresponder",
          "value": "zSFIB"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "MessageNotSentCondition": {
        "description": "Search contacts who didn't receive a certain message.",
        "required": [
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "message_operator"
            ],
            "example": "message_operator"
          },
          "operator": {
            "$ref": "#/components/schemas/MessageTypeOperator"
          },
          "value": {
            "description": "The message identifier",
            "type": "string",
            "example": "z4Zje"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "not_sent",
          "operatorType": "message_operator",
          "operator": "autoresponder",
          "value": "z4Zje"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "ECommerceBrandPurchasedCondition": {
        "description": "Search contacts by brand purchased.",
        "required": [
          "scope",
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "scope": {
            "description": "The shop identifier",
            "type": "string",
            "example": "ZTo"
          },
          "operatorType": {
            "type": "string",
            "enum": [
              "equal_operator"
            ],
            "example": "equal_operator"
          },
          "operator": {
            "type": "string",
            "enum": [
              "is",
              "not_is"
            ],
            "example": "is"
          },
          "value": {
            "type": "string",
            "example": "GetResponse"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "ecommerce_brand_purchased",
          "scope": "ZTo",
          "operatorType": "equal_operator",
          "operator": "is",
          "value": "GetResponse"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "ECommerceProductPurchasedCondition": {
        "description": "Search the product purchased.",
        "required": [
          "shopScope",
          "categoryScope",
          "operatorType",
          "operator",
          "productScope",
          "dateOperator"
        ],
        "properties": {
          "shopScope": {
            "description": "Limit the searched shops",
            "type": "string",
            "oneOf": [
              {
                "description": "For all available shops",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "description": "The shop identifier",
                "example": "ZTo"
              }
            ]
          },
          "categoryScope": {
            "description": "The product category",
            "type": "string",
            "oneOf": [
              {
                "description": "For all available categories",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "description": "The category identifier",
                "example": "PZ3"
              }
            ]
          },
          "operatorType": {
            "type": "string",
            "enum": [
              "equal_operator"
            ],
            "example": "equal_operator"
          },
          "operator": {
            "type": "string",
            "enum": [
              "is",
              "is_not"
            ],
            "example": "is"
          },
          "productScope": {
            "type": "string",
            "oneOf": [
              {
                "description": "For all available products",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "description": "For a specified product",
                "example": "oZt"
              }
            ]
          },
          "dateOperator": {
            "description": "Set a date range. For the date_from and date_to, custom field value is required.",
            "type": "string",
            "oneOf": [
              {
                "description": "The field value is prohibited. The date string is compliant with ISO 8601.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateExtendedEnum"
                  }
                ]
              },
              {
                "description": "The field value is prohibited",
                "enum": [
                  "all_time"
                ],
                "example": "all_time"
              },
              {
                "description": "The field value is required",
                "enum": [
                  "date_to",
                  "date_from",
                  "custom"
                ]
              }
            ]
          },
          "value": {
            "description": "This field stores the date or time interval for the `date_to`, `date_from`, or `custom` date operator",
            "type": "string",
            "example": "2018-04-01",
            "oneOf": [
              {
                "description": "For the `date_to` and `date_from` date operators, it's the time compliant with ISO 8601",
                "$ref": "#/components/schemas/SpecificDateType"
              },
              {
                "description": "For the `custom` date operator, it's the time interval compliant with ISO 8601",
                "$ref": "#/components/schemas/IntervalDateType"
              }
            ]
          },
          "numberOfDays": {
            "description": "Number of days, required for the `last_n_days` date operator",
            "type": "integer",
            "example": 20
          },
          "includeCurrentPeriod": {
            "description": "Flag determines if current day will be included into chosen range. This flag is required for `last_n_days` date operator. Can be used with `last_7_days` and `last_30_days` date operators",
            "type": "boolean",
            "example": true
          }
        },
        "type": "object",
        "example": {
          "conditionType": "ecommerce_product_purchased",
          "shopScope": "all",
          "categoryScope": "all",
          "operatorType": "equal_operator",
          "operator": "is",
          "productScope": "all",
          "dateOperator": "date_from",
          "value": "2018-04-01"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "ECommerceTotalSpentCondition": {
        "description": "Search contacts by total spent.",
        "required": [
          "operatorType",
          "operator",
          "scope",
          "value",
          "currency",
          "date"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "numeric_operator"
            ],
            "example": "numeric_operator"
          },
          "operator": {
            "type": "string",
            "enum": [
              "numeric_lt",
              "numeric_gt",
              "numeric_eq",
              "numeric_not_eq",
              "numeric_lt_eq",
              "numeric_gt_eq"
            ],
            "example": "numeric_eq"
          },
          "scope": {
            "description": "The condition limiting the searched shop",
            "type": "string",
            "example": "Zto",
            "oneOf": [
              {
                "description": "For all available shops",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "description": "The shop identifier",
                "example": "ZTo"
              }
            ]
          },
          "value": {
            "type": "number",
            "format": "double",
            "example": "7.00"
          },
          "currency": {
            "description": "The currency code according to ISO 4217, i.e. USD, GBP, PLN",
            "type": "string",
            "example": "USD"
          },
          "date": {
            "description": "Limit search by date range",
            "required": [
              "operator"
            ],
            "properties": {
              "operator": {
                "description": "Set a date range operator",
                "type": "string",
                "enum": [
                  "anytime",
                  "today",
                  "yesterday",
                  "last_n_days",
                  "this_week",
                  "last_week",
                  "this_month",
                  "last_month",
                  "last_2_months",
                  "custom"
                ]
              },
              "numberOfDays": {
                "description": "Number of days, required for the `last_n_days` date operator",
                "type": "integer",
                "example": 20
              },
              "includeCurrentPeriod": {
                "description": "Flag determines if current day will be included into chosen range. This flag is required for `last_n_days` date operator",
                "type": "boolean",
                "example": true
              },
              "range": {
                "description": "Date interval string compliant with ISO 8601, supported format: \u003Cstart_date\u003E/\u003Cend_date\u003E, allowed only for `custom` date operator",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntervalDateType"
                  }
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "ecommerce_total_spent",
          "scope": "all",
          "operatorType": "numeric_operator",
          "operator": "numeric_eq",
          "value": 7,
          "currency": "USD",
          "date": {
            "operator": "anytime"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "ECommerceNumberOfPurchasesCondition": {
        "description": "Search contacts by the number of purchases.",
        "required": [
          "operatorType",
          "operator",
          "scope",
          "value",
          "date"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "numeric_operator"
            ],
            "example": "numeric_operator"
          },
          "operator": {
            "type": "string",
            "enum": [
              "numeric_lt",
              "numeric_gt",
              "numeric_eq",
              "numeric_not_eq",
              "numeric_lt_eq",
              "numeric_gt_eq"
            ],
            "example": "numeric_eq"
          },
          "scope": {
            "description": "The condition limiting the searched shop",
            "type": "string",
            "example": "Zto",
            "oneOf": [
              {
                "description": "For all available shops",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "description": "The shop identifier",
                "example": "ZTo"
              }
            ]
          },
          "value": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "date": {
            "description": "Limit search by date range",
            "required": [
              "operator"
            ],
            "properties": {
              "operator": {
                "description": "Set a date range operator",
                "type": "string",
                "enum": [
                  "anytime",
                  "today",
                  "yesterday",
                  "last_n_days",
                  "this_week",
                  "last_week",
                  "this_month",
                  "last_month",
                  "last_2_months",
                  "custom"
                ]
              },
              "numberOfDays": {
                "description": "Number of days, required for the `last_n_days` date operator",
                "type": "integer",
                "example": 20
              },
              "includeCurrentPeriod": {
                "description": "Flag determines if current day will be included into chosen range. This flag is required for `last_n_days` date operator",
                "type": "boolean",
                "example": true
              },
              "range": {
                "description": "Date interval string compliant with ISO 8601, supported format: \u003Cstart_date\u003E/\u003Cend_date\u003E, allowed only for `custom` date operator",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntervalDateType"
                  }
                ]
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "ecommerce_number_of_purchases",
          "scope": "all",
          "operatorType": "numeric_operator",
          "operator": "numeric_eq",
          "value": 7,
          "date": {
            "operator": "anytime"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "TagCondition": {
        "description": "Search contacts by tag.",
        "required": [
          "operatorType",
          "operator",
          "value"
        ],
        "properties": {
          "operatorType": {
            "description": "The operator for the existence of a property",
            "type": "string",
            "enum": [
              "exists"
            ],
            "example": "exists"
          },
          "operator": {
            "description": "This operator verifies whether the property you are looking for exists or not",
            "type": "string",
            "enum": [
              "exists",
              "not_exists"
            ],
            "example": "exists"
          },
          "value": {
            "description": "The tag identifier",
            "type": "string",
            "example": "BB"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "tag",
          "value": "BB",
          "operatorType": "exists",
          "operator": "exists"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "ECommerceAbandonedCartCondition": {
        "description": "Search contacts by abandoned cart.",
        "required": [
          "shopScope",
          "cartValue",
          "dateOperator"
        ],
        "properties": {
          "shopScope": {
            "description": "Limit the searched shops",
            "type": "string",
            "oneOf": [
              {
                "description": "For all available shops",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "description": "The shop identifier",
                "example": "ZTo"
              }
            ]
          },
          "cartValue": {
            "description": "Limit search by cart value",
            "required": [
              "currency",
              "value",
              "operator"
            ],
            "properties": {
              "currency": {
                "description": "The currency code according to ISO 4217, i.e. USD, GBP, PLN",
                "type": "string",
                "example": "USD"
              },
              "value": {
                "type": "number",
                "format": "double",
                "example": "7.00"
              },
              "operator": {
                "type": "string",
                "enum": [
                  "numeric_lt",
                  "numeric_gt",
                  "numeric_eq",
                  "numeric_not_eq",
                  "numeric_lt_eq",
                  "numeric_gt_eq"
                ],
                "example": "numeric_eq"
              }
            },
            "type": "object"
          },
          "dateOperator": {
            "description": "Set a date range. For the date_from and last_n_days, custom field value is required. Examples can be found here: [API Docs](https://apidocs.getresponse.com/v3/case-study/segments-manual/#ecommerce-abandoned-cart-condition-type).",
            "type": "string",
            "enum": [
              "date_from",
              "anytime",
              "never",
              "today",
              "yesterday",
              "last_n_days",
              "this_week",
              "last_week",
              "this_month",
              "last_month",
              "custom"
            ]
          },
          "value": {
            "description": "This field is required only for `date_from` and `last_n_days` date operators.",
            "oneOf": [
              {
                "description": "The date string compliant with ISO 8601. The value field is required for the dateOperator equal to `date_from`.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateType"
                  }
                ]
              },
              {
                "description": "Number of days. Required for `last_n_days` date operator.",
                "type": "integer",
                "example": 10
              }
            ]
          },
          "includeCurrentPeriod": {
            "description": "Flag determines if current day will be included into chosen range. This flag can be used with `last_n_days`.",
            "type": "boolean",
            "example": true
          },
          "range": {
            "description": "Date interval string compliant with ISO 8601, supported format: \u003Cstart_date\u003E/\u003Cend_date\u003E, allowed only for `custom` date operator",
            "allOf": [
              {
                "$ref": "#/components/schemas/IntervalDateType"
              }
            ]
          }
        },
        "type": "object",
        "example": {
          "conditionType": "ecommerce_abandoned_cart",
          "shopScope": "ZTo",
          "dateOperator": "date_from",
          "value": "2018-04-01",
          "cartValue": {
            "currency": "USD",
            "value": 7,
            "operator": "numeric_eq"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "SmsSentCondition": {
        "description": "Find contacts who were sent an SMS",
        "required": [
          "smsId"
        ],
        "properties": {
          "smsId": {
            "description": "The SMS message ID",
            "type": "string",
            "example": "ZTo"
          },
          "deliveryStatus": {
            "description": "Specify the delivery status. Omit this field if the delivery status is not relevant.",
            "type": "string",
            "enum": [
              "delivered",
              "undelivered",
              "any"
            ],
            "example": "delivered"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "sms_sent",
          "smsId": "ZTo",
          "deliveryStatus": "undelivered"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "SmsLinkClickedCondition": {
        "description": "Find contacts who clicked a link from an SMS",
        "required": [
          "smsId",
          "clickTrackId"
        ],
        "properties": {
          "smsId": {
            "description": "The SMS message ID",
            "type": "string",
            "example": "ZTo"
          },
          "clickTrackId": {
            "description": "The click track ID",
            "type": "string",
            "example": "ABc"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "sms_link_clicked",
          "smsId": "ZTo",
          "clickTrackId": "ABc"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "SmsLinkNotClickedCondition": {
        "description": "Find contacts who didn't click a link from an SMS",
        "required": [
          "smsId",
          "clickTrackId"
        ],
        "properties": {
          "smsId": {
            "description": "The SMS message ID",
            "type": "string",
            "example": "ZTo"
          },
          "clickTrackId": {
            "description": "The click track ID",
            "type": "string",
            "example": "ABc"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "sms_link_not_clicked",
          "smsId": "ZTo",
          "clickTrackId": "ABc"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "ScoringCondition": {
        "description": "Search contacts by scoring.",
        "required": [
          "operatorType"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "numeric_operator",
              "not_exists"
            ],
            "example": "numeric_operator"
          },
          "operator": {
            "description": "The relational operator. Required for the operatorType=numeric_operator.",
            "type": "string",
            "enum": [
              "numeric_lt",
              "numeric_gt",
              "numeric_eq",
              "numeric_not_eq",
              "numeric_lt_eq",
              "numeric_gt_eq"
            ],
            "example": "numeric_lt"
          },
          "value": {
            "description": "This field is required for the relational operator, and prohibited for the not_exists operator type",
            "type": "integer",
            "format": "int32",
            "example": 5
          }
        },
        "type": "object",
        "example": {
          "conditionType": "score",
          "operatorType": "numeric_operator",
          "operator": "numeric_lt",
          "value": 5
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "EngagementScoreCondition": {
        "description": "Search contacts by their engagement score",
        "required": [
          "operator",
          "value"
        ],
        "properties": {
          "operator": {
            "description": "The operator used in engagement score comparison",
            "type": "string",
            "enum": [
              "numeric_lt",
              "numeric_gt",
              "numeric_eq",
              "numeric_not_eq",
              "numeric_lt_eq",
              "numeric_gt_eq"
            ],
            "example": "numeric_lt"
          },
          "value": {
            "description": "The condition value",
            "type": "integer",
            "format": "int32",
            "example": 5
          }
        },
        "type": "object",
        "example": {
          "conditionType": "engagement_score",
          "operatorType": "numeric_operator",
          "operator": "numeric_lt",
          "value": 5
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "GeolocationCondition": {
        "description": "Search contacts by geolocation.",
        "required": [
          "operatorType",
          "operator",
          "value",
          "scope"
        ],
        "properties": {
          "scope": {
            "description": "Specify the search parameters",
            "type": "string",
            "enum": [
              "country",
              "country_code",
              "region",
              "city",
              "longitude",
              "latitude",
              "postal_code",
              "dma_code"
            ],
            "example": "city"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "geo",
          "operatorType": "string_operator",
          "operator": "starts",
          "value": "New",
          "scope": "city"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          },
          {
            "$ref": "#/components/schemas/ConditionStringOperator"
          }
        ]
      },
      "GdprCondition": {
        "description": "Find contacts based on whether they have given or not given specific consents.",
        "required": [
          "gdprFieldId",
          "consentStatus"
        ],
        "properties": {
          "gdprFieldId": {
            "description": "The ID of the consent field. You can retrieve it using [this API call](https://apireference.getresponse.com/#operation/getGDPRFieldList).",
            "type": "string",
            "example": "abC"
          },
          "consentStatus": {
            "description": "Specify whether you want to search for contacts who have given or not given consent.",
            "type": "string",
            "enum": [
              "given",
              "not_given"
            ],
            "example": "given"
          },
          "consentDate": {
            "description": "Specify when consent was given or not given. Not providing this field is equivalent to using the `anytime` operator.",
            "required": [
              "operator"
            ],
            "properties": {
              "operator": {
                "description": "This field allows you to specify how you want to narrow down the search results by date.",
                "type": "string",
                "enum": [
                  "anytime",
                  "date_from",
                  "date_to"
                ],
                "oneOf": [
                  {
                    "description": "Select this option when no specific date is relevant. You cannot provide a value for the `date` field when this option is selected.",
                    "enum": [
                      "anytime"
                    ],
                    "example": "anytime"
                  },
                  {
                    "description": "Select one of these options when you want to narrow down the search to a specific period. Providing a `date` field is required when using any of these options.",
                    "enum": [
                      "date_to",
                      "date_from"
                    ]
                  }
                ]
              },
              "date": {
                "description": "Date in the `Y-m-d` format. Required with `date_to`, `date_from` operators. Prohibited with `anytime`.",
                "type": "string",
                "format": "date",
                "example": "2024-11-08"
              }
            },
            "type": "object"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "gdpr",
          "gdprFieldId": "abC",
          "consentStatus": "given",
          "consentDate": {
            "operator": "anytime"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "CrmCondition": {
        "description": "This makes it possible to search contacts by CRM conditions.",
        "required": [
          "pipelineScope",
          "stageScope"
        ],
        "properties": {
          "pipelineScope": {
            "description": "The pipeline identifier",
            "type": "string",
            "example": "PSVq"
          },
          "stageScope": {
            "description": "",
            "type": "string",
            "example": "ZAHB",
            "oneOf": [
              {
                "description": "For all available stages",
                "enum": [
                  "all"
                ],
                "example": "all"
              },
              {
                "description": "The stage identifier",
                "example": "ZAHB"
              }
            ]
          }
        },
        "type": "object",
        "example": {
          "conditionType": "crm",
          "pipelineScope": "PSVq",
          "stageScope": "ZAHB"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "GoalCondition": {
        "description": "Search contacts by a defined goal.",
        "required": [
          "operatorType",
          "operator",
          "scope"
        ],
        "properties": {
          "operatorType": {
            "type": "string",
            "enum": [
              "numeric_operator"
            ],
            "example": "numeric_operator"
          },
          "operator": {
            "description": "The relational and existence operator. For the relational operator, the value field is required.",
            "type": "string",
            "enum": [
              "numeric_lt",
              "numeric_gt",
              "numeric_eq",
              "numeric_not_eq",
              "numeric_lt_eq",
              "numeric_gt_eq",
              "assigned",
              "not_assigned"
            ],
            "example": "numeric_lt"
          },
          "value": {
            "description": "The value to be compared for the relational operator. For the assigned, the not_assigned operator field is prohibited.",
            "type": "integer",
            "format": "int32",
            "example": 5
          },
          "scope": {
            "description": "The goal identifier",
            "type": "string",
            "example": "p22"
          }
        },
        "type": "object",
        "example": {
          "conditionType": "goal",
          "operatorType": "numeric_operator",
          "operator": "numeric_lt",
          "value": "5",
          "scope": "p22"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "CustomEventCondition": {
        "description": "Search contacts for which an custom event occurred / not occurred",
        "required": [
          "customEventId",
          "occurrence",
          "dateOperator"
        ],
        "properties": {
          "customEventId": {
            "description": "The custom event identifier",
            "type": "string",
            "example": "PNM"
          },
          "occurrence": {
            "description": "Whether the custom event occurred or not",
            "type": "string",
            "enum": [
              "occurred",
              "not_occurred"
            ],
            "example": "occurred"
          },
          "dateOperator": {
            "description": "Show contacts for which a custom event occurred / not occurred in certain date range",
            "type": "string",
            "oneOf": [
              {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SpecificDateExtendedEnum"
                  }
                ]
              },
              {
                "description": "Anytime",
                "enum": [
                  "anytime"
                ],
                "example": "anytime"
              },
              {
                "description": "Allows you to choose a custom date range. The `date` field must be set to use this operator.",
                "enum": [
                  "date_to",
                  "date_from",
                  "custom"
                ]
              }
            ]
          },
          "date": {
            "description": "The operators `date_to`, `date_from`, and `customDate` require you to provide, respectively, a date, datetime, or a time interval.",
            "type": "string",
            "example": "2018-04-01",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SpecificDateType"
              },
              {
                "$ref": "#/components/schemas/SpecificDateTimeType"
              },
              {
                "$ref": "#/components/schemas/IntervalDateType"
              }
            ]
          }
        },
        "type": "object",
        "example": {
          "conditionType": "custom_event",
          "customEventId": "PNM",
          "occurrence": "occurred",
          "dateOperator": "date_from",
          "value": "2018-04-01"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionType"
          }
        ]
      },
      "CreateTransactionalEmail": {
        "required": [
          "fromField",
          "subject",
          "recipients",
          "contentType"
        ],
        "properties": {
          "fromField": {
            "description": "The 'From' address ID to be used as the message sender",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "replyTo": {
            "description": "The 'From' address ID to be used as the Reply-to",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "tag": {
            "description": "The tag ID used for statistical data collection",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewTransactionalEmailTag"
              }
            ]
          },
          "recipients": {
            "$ref": "#/components/schemas/TransactionalEmailRecipients"
          },
          "contentType": {
            "description": "The message content type",
            "type": "string",
            "default": "direct",
            "enum": [
              "direct",
              "template"
            ]
          }
        },
        "type": "object",
        "discriminator": {
          "propertyName": "contentType",
          "mapping": {
            "direct": "#/components/schemas/DirectContent",
            "template": "#/components/schemas/TemplateContent"
          }
        }
      },
      "DirectContent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateTransactionalEmail"
          },
          {
            "$ref": "#/components/schemas/TransactionalEmailContent"
          }
        ]
      },
      "TemplateContent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateTransactionalEmail"
          },
          {
            "$ref": "#/components/schemas/TransactionalEmailTemplate"
          }
        ]
      },
      "NewTransactionalEmailTag": {
        "required": [
          "tagId"
        ],
        "properties": {
          "tagId": {
            "type": "string",
            "example": "vBd5"
          }
        },
        "type": "object"
      },
      "TransactionalEmailContent": {
        "required": [
          "content"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "example": "Order Confirmation - Example Shop"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionalEmailAttachment"
            }
          },
          "content": {
            "description": "The message content. At least one field is required. The maximum combined size of plain text and HTML is 16MB",
            "properties": {
              "plain": {
                "type": "string",
                "example": "Your order has been confirmed. Thank you for shopping with us!"
              },
              "html": {
                "type": "string",
                "example": "\u003Ch1\u003EYour order has been confirmed\u003C/h1\u003E\u003Cstrong\u003EThank you for shopping with us!\u003C/strong\u003E"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "TransactionalEmailTemplate": {
        "description": "The template content",
        "required": [
          "template"
        ],
        "properties": {
          "template": {
            "description": "The message template. At least templateId is required",
            "required": [
              "templateId"
            ],
            "properties": {
              "templateId": {
                "description": "Transactional emails template identifier",
                "type": "string",
                "example": "Ykz"
              },
              "lexpad": {
                "description": "Transactional email lexpad",
                "type": "object",
                "example": {
                  "some-key": "some-value"
                }
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "TransactionalEmailRecipients": {
        "required": [
          "to"
        ],
        "properties": {
          "to": {
            "$ref": "#/components/schemas/TransactionalEmailRecipientTo"
          },
          "cc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionalEmailRecipient"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionalEmailRecipient"
            }
          }
        },
        "type": "object"
      },
      "TransactionalEmailRecipientTo": {
        "required": [
          "email"
        ],
        "properties": {
          "validSince": {
            "description": "The first time this address appeared in your system",
            "type": "string",
            "format": "date-time",
            "example": "2018-05-02T09:30:43+0200"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionalEmailRecipient"
          }
        ]
      },
      "TransactionalEmailRecipient": {
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "example": "John Doe"
          },
          "status": {
            "type": "string",
            "enum": [
              "unknown",
              "sent",
              "rejected",
              "opened",
              "bounced",
              "reported_spam"
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "TransactionalEmailAttachment": {
        "required": [
          "fileName",
          "content",
          "mimeType"
        ],
        "properties": {
          "fileName": {
            "type": "string",
            "maxLength": 128,
            "minLength": 3,
            "example": "pixel.png"
          },
          "mimeType": {
            "description": "The MIME attachment type",
            "type": "string",
            "maxLength": 128,
            "minLength": 3,
            "example": "image/png"
          },
          "content": {
            "description": "The base64-encoded attachment",
            "type": "string",
            "format": "base64",
            "example": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mOUua1dDwAD4AGjnrXmUAAAAABJRU5ErkJggg=="
          }
        },
        "type": "object"
      },
      "TransactionalEmailsTemplateDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionalEmailsTemplateListElement"
          },
          {
            "properties": {
              "content": {
                "$ref": "#/components/schemas/TransactionalEmailTemplateContent"
              }
            },
            "type": "object"
          }
        ]
      },
      "TransactionalEmailsTemplateListElement": {
        "properties": {
          "templateId": {
            "description": "Transactional email template ID",
            "type": "string",
            "readOnly": true,
            "example": "p"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api3.getresponse360.com/v3/transactional-emails/templates/tRe4i"
          },
          "subject": {
            "description": "The template subject",
            "type": "string",
            "example": "Order Confirmation Template"
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time"
          },
          "updatedOn": {
            "description": "The date of the last template update",
            "type": "string",
            "format": "date-time"
          },
          "editor": {
            "description": "The Editor type",
            "allOf": [
              {
                "type": "string",
                "enum": [
                  "html",
                  "wysiwyg"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "CreateTransactionalEmailTemplate": {
        "required": [
          "subject"
        ],
        "properties": {
          "subject": {
            "description": "The template subject",
            "type": "string",
            "example": "Order Confirmation - Example Shop"
          },
          "content": {
            "$ref": "#/components/schemas/TransactionalEmailTemplateContent"
          }
        },
        "type": "object"
      },
      "TransactionalEmailTemplateContent": {
        "description": "The template content. At least one field is required",
        "properties": {
          "plain": {
            "description": "The plain text equivalent of template content",
            "type": "string",
            "example": "Your order has been confirmed. Thank you for shopping with us!"
          },
          "html": {
            "description": "The template content in HTML",
            "type": "string",
            "example": "\u003Ch1\u003EYour order has been confirmed\u003C/h1\u003E\u003Cstrong\u003EThank you for shopping with us!\u003C/strong\u003E"
          }
        },
        "type": "object"
      },
      "TransactionalEmailRecipientStatuses": {
        "properties": {
          "rejectedOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": null,
            "nullable": true
          },
          "openedOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-06-02T09:30:43+0200",
            "nullable": true
          },
          "bouncedOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": null,
            "nullable": true
          },
          "complainedOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": null,
            "nullable": true
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionalEmailRecipientSentOnStatus"
          }
        ]
      },
      "TransactionalEmailRecipientClickedLink": {
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://example.com"
          },
          "clickedOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-06-02T09:31:20+0200"
          }
        },
        "type": "object"
      },
      "TransactionalEmailRecipientDetails": {
        "properties": {
          "statuses": {
            "$ref": "#/components/schemas/TransactionalEmailRecipientStatuses"
          },
          "clickedLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionalEmailRecipientClickedLink"
            }
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionalEmailRecipient"
          }
        ]
      },
      "TransactionalEmailRecipientsDetails": {
        "required": [
          "to"
        ],
        "properties": {
          "to": {
            "$ref": "#/components/schemas/TransactionalEmailRecipientDetails"
          },
          "cc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionalEmailRecipientDetails"
            }
          },
          "bcc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionalEmailRecipientDetails"
            }
          }
        },
        "type": "object"
      },
      "TransactionalEmailDetails": {
        "required": [
          "transactionalEmailId",
          "fromField",
          "subject",
          "recipients"
        ],
        "properties": {
          "fromField": {
            "description": "The 'From' address ID to be used as the message sender",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "replyTo": {
            "description": "The 'From' address ID to be used as the Reply-to",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "subject": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "example": "Order Confirmation - Example Shop"
          },
          "tag": {
            "description": "The tag ID used for statistical data collection",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalEmailTag"
              }
            ]
          },
          "recipients": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionalEmailRecipientsDetails"
              }
            ]
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api3.getresponse360.com/v3/transactional-emails/tRe4i"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionalEmail"
          }
        ]
      },
      "TransactionalEmailTag": {
        "required": [
          "tagId"
        ],
        "properties": {
          "tagId": {
            "type": "string",
            "example": "vBd5"
          }
        },
        "type": "object"
      },
      "TransactionalEmailRecipientSentOnStatus": {
        "properties": {
          "sentOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-06-02T09:30:43+0200",
            "nullable": true
          }
        },
        "type": "object"
      },
      "TransactionalEmailListElement": {
        "required": [
          "transactionalEmailId",
          "recipients",
          "fromField",
          "subject"
        ],
        "properties": {
          "transactionalEmailId": {
            "type": "string",
            "readOnly": true,
            "example": "tRe4i"
          },
          "fromField": {
            "$ref": "#/components/schemas/FromFieldReference"
          },
          "recipients": {
            "allOf": [
              {
                "required": [
                  "to"
                ],
                "properties": {
                  "to": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TransactionalEmailRecipient"
                      },
                      {
                        "properties": {
                          "statuses": {
                            "$ref": "#/components/schemas/TransactionalEmailRecipientSentOnStatus"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "subject": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "example": "Order Confirmation - Example Shop"
          },
          "tag": {
            "$ref": "#/components/schemas/TransactionalEmailTag"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api3.getresponse360.com/v3/transactional-emails/tRe4i"
          }
        },
        "type": "object"
      },
      "TransactionalEmailStatistics": {
        "properties": {
          "timeFrame": {
            "description": "The statistics time frame in the ISO 8601 date format with duration interval",
            "type": "string",
            "pattern": "/^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?(\\/)P(?=\\w*\\d)(?:\\d+Y|Y)?(?:\\d+M|M)?(?:\\d+W|W)?(?:\\d+D|D)?(?:T(?:\\d+H|H)?(?:\\d+M|M)?(?:\\d+(?:\\­.\\d{1,2})?S|S)?)?$/",
            "example": "2014-09-20T00:00:00+0000/P2M18DT10H0M0S"
          },
          "sent": {
            "type": "integer",
            "format": "int64"
          },
          "opened": {
            "type": "integer",
            "format": "int64"
          },
          "bounced": {
            "type": "integer",
            "format": "int64"
          },
          "complaint": {
            "type": "integer",
            "format": "int64"
          },
          "clicks": {
            "type": "integer",
            "format": "int64"
          }
        },
        "type": "object"
      },
      "TransactionalEmail": {
        "properties": {
          "transactionalEmailId": {
            "type": "string",
            "readOnly": true,
            "example": "tRe4i"
          }
        },
        "type": "object"
      },
      "FromField": {
        "properties": {
          "fromFieldId": {
            "description": "The 'From' address ID",
            "type": "string",
            "readOnly": true,
            "example": "TTzW"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/from-fields/TTzW"
          },
          "email": {
            "description": "The email address",
            "type": "string",
            "format": "email",
            "example": "jsmith@example.com"
          },
          "rewrittenEmail": {
            "description": "Email address used to send message.",
            "type": "string",
            "format": "email",
            "example": "jsmith@example.com",
            "nullable": true
          },
          "name": {
            "description": "The name connected to the email address",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "John Smith"
          },
          "isActive": {
            "description": "Flag if the 'From' address is active",
            "readOnly": true,
            "example": "true",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "isDefault": {
            "description": "Flag if the 'From' address is default for the account",
            "readOnly": true,
            "example": "true",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "domain": {
            "properties": {
              "status": {
                "description": "Status of domain",
                "type": "string",
                "enum": [
                  "confirmed",
                  "unconfirmed",
                  "deleted",
                  "can_not_be_used",
                  "dns_configuration_pending"
                ],
                "nullable": true
              },
              "DKIMWarning": {
                "description": "DKIM warning status",
                "type": "string",
                "enum": [
                  "not_recommended",
                  "can_not_be_used",
                  "not_authenticated",
                  "at_risk"
                ],
                "nullable": true
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "NewFromField": {
        "required": [
          "email",
          "name"
        ],
        "properties": {
          "email": {
            "description": "The email address",
            "type": "string",
            "format": "email",
            "example": "jsmith@example.com"
          },
          "name": {
            "description": "The name connected to the email address",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "John Smith"
          }
        },
        "type": "object"
      },
      "FromFieldReference": {
        "required": [
          "fromFieldId"
        ],
        "properties": {
          "fromFieldId": {
            "description": "The 'From' address ID",
            "type": "string",
            "example": "V"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/from-fields/V"
          }
        },
        "type": "object"
      },
      "RssNewsletterDetails": {
        "properties": {
          "clickTracks": {
            "description": "The list of tracked links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClickTrack"
            }
          },
          "flags": {
            "$ref": "#/components/schemas/MessageFlagsArray"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletter"
          }
        ]
      },
      "RssNewsletterListItem": {
        "properties": {
          "flags": {
            "$ref": "#/components/schemas/MessageFlagsString"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletterListing"
          }
        ]
      },
      "RssNewsletterSendSettingsListing": {
        "required": [
          "frequency",
          "filter"
        ],
        "properties": {
          "frequency": {
            "description": "When to send the message",
            "type": "string",
            "example": "asap"
          },
          "filter": {
            "description": "The filter settings for an RSS post",
            "type": "string",
            "enum": [
              "recent",
              "engaged",
              "shared",
              "commented"
            ]
          },
          "maxArticles": {
            "description": "How many articles to display in a list",
            "type": "integer",
            "format": "int32",
            "maximum": 30,
            "minimum": 1
          },
          "selectedCampaigns": {
            "$ref": "#/components/schemas/MessageSendSettingSelectedCampaigns"
          },
          "selectedSegments": {
            "$ref": "#/components/schemas/MessageSendSettingSelectedSegments"
          },
          "selectedSuppressions": {
            "$ref": "#/components/schemas/MessageSendSettingSelectedSuppressions"
          },
          "excludedCampaigns": {
            "$ref": "#/components/schemas/MessageSendSettingExcludedCampaigns"
          },
          "excludedSegments": {
            "$ref": "#/components/schemas/MessageSendSettingExcludedSegments"
          }
        },
        "type": "object",
        "discriminator": {
          "propertyName": "frequency",
          "mapping": {
            "asap": "#/components/schemas/RssNewsletterListSendAsapSettings",
            "daily": "#/components/schemas/RssNewsletterListSendDailySettings",
            "weekly": "#/components/schemas/RssNewsletterListSendWeeklySettings",
            "monthly": "#/components/schemas/RssNewsletterListSendMonthlySettings"
          }
        }
      },
      "RssNewsletterListSendAsapSettings": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletterSendSettingsListing"
          }
        ]
      },
      "RssNewsletterListSendDailySettings": {
        "required": [
          "sendAtHour"
        ],
        "properties": {
          "sendAtHour": {
            "description": "The hour when the message should be sent",
            "type": "integer",
            "format": "int32",
            "maximum": 23,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletterSendSettingsListing"
          }
        ]
      },
      "RssNewsletterListSendWeeklySettings": {
        "required": [
          "sendAtHour",
          "sendAtWeekDay"
        ],
        "properties": {
          "sendAtHour": {
            "description": "The hour when the message should be sent",
            "type": "integer",
            "format": "int32",
            "maximum": 23,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false
          },
          "sendAtWeekDay": {
            "description": "The day of the week when the message should be sent",
            "type": "string",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletterSendSettingsListing"
          }
        ]
      },
      "RssNewsletterListSendMonthlySettings": {
        "required": [
          "sendAtHour",
          "sendAtMonthDay"
        ],
        "properties": {
          "sendAtHour": {
            "description": "The hour when the message should be sent",
            "type": "integer",
            "format": "int32",
            "maximum": 23,
            "minimum": 0
          },
          "sendAtMonthDay": {
            "description": "The day of the month when the message should be sent or 31 representing last day of month",
            "type": "integer",
            "format": "int32",
            "maximum": 28,
            "minimum": 1
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletterSendSettingsListing"
          }
        ]
      },
      "RssNewsletterListing": {
        "required": [
          "rssNewsletterId",
          "href"
        ],
        "properties": {
          "rssNewsletterId": {
            "description": "The RSS newsletter ID",
            "type": "string",
            "readOnly": true,
            "example": "dGer"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/rss-newsletters/dGer"
          },
          "rssFeedUrl": {
            "description": "The URL for the RSS Feed",
            "type": "string",
            "format": "uri",
            "example": "http://blog.getresponse.com"
          },
          "subject": {
            "description": "The RSS message subject",
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "example": "My rss to newsletters"
          },
          "name": {
            "description": "How your newsletters will be seen inside the application",
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "example": "rsstest0"
          },
          "status": {
            "description": "The status of the RSS newsletter",
            "example": "enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ]
          },
          "editor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageEditorEnum"
              }
            ]
          },
          "fromField": {
            "description": "The 'From' email address used for the message",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "replyTo": {
            "description": "The email that will be used as a reply-to address",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "content": {
            "$ref": "#/components/schemas/MessageContent"
          },
          "sendSettings": {
            "description": "How the message will be delivered to the subscriber",
            "allOf": [
              {
                "$ref": "#/components/schemas/RssNewsletterSendSettingsListing"
              }
            ]
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "MessageSendSettingSelectedCampaigns": {
        "description": "The list of campaign IDs to choose subscribers from.",
        "items": {
          "type": "string",
          "example": "C"
        }
      },
      "MessageSendSettingSelectedSegments": {
        "description": "The list of segment IDs to choose subscribers from.",
        "items": {
          "type": "string",
          "example": "Se"
        }
      },
      "MessageSendSettingSelectedSuppressions": {
        "description": "The list of suppression IDs to exclude subscribers.",
        "items": {
          "type": "string",
          "example": "Ss"
        }
      },
      "MessageSendSettingExcludedCampaigns": {
        "description": "The list of campaign IDs to exclude subscribers.",
        "items": {
          "type": "string",
          "example": "eC"
        }
      },
      "MessageSendSettingExcludedSegments": {
        "description": "The list of segment IDs to exclude subscribers.",
        "items": {
          "type": "string",
          "example": "eSs"
        }
      },
      "MessageSendSettingSelectedContacts": {
        "description": "The list of selected contacts.",
        "items": {
          "type": "string",
          "example": "eSs"
        }
      },
      "BaseCampaign": {
        "properties": {
          "campaignId": {
            "description": "Campaign ID",
            "type": "string",
            "readOnly": true,
            "example": "V3J"
          },
          "name": {
            "description": "The campaign (list) name.\n\n* You can use each list name just once in your account.\n\n* The name must be between 3-64 characters.\n\n* All alphabets supported by GetResponse, including right-to-left ones, are allowed.\n\n* You can use upper and lower case letters, numbers, spaces and special characters apart from the ones listed below.\n\n* You can’t use emojis and the following special characters: `/`, `\\`, `@`, and `[` or `]`.",
            "type": "string",
            "maxLength": 64,
            "minLength": 3,
            "example": "my_campaign"
          },
          "techName": {
            "description": "Tech name is a unique internal ID of a list used for [FTP imports](https://www.getresponse.com/help/how-to-import-files-via-ftp.html) (available in GetResponse MAX accounts only)",
            "type": "string",
            "readOnly": true,
            "example": "my_campaign"
          },
          "languageCode": {
            "description": "The campaign language code according to ISO 639-1, plus: zt - Chinese (Traditional), fs - Afghan Persian (Dari), md - Moldavian",
            "type": "string",
            "example": "EN"
          },
          "isDefault": {
            "description": "Is the campaign default",
            "example": "true",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "createdOn": {
            "description": "The date of creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2014-02-12T15:19:21+0000"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/campaigns/V3J"
          }
        },
        "type": "object"
      },
      "CampaignAdditionalProperties": {
        "properties": {
          "postal": {
            "$ref": "#/components/schemas/CampaignPostal"
          },
          "confirmation": {
            "$ref": "#/components/schemas/CampaignConfirmation"
          },
          "optinTypes": {
            "$ref": "#/components/schemas/CampaignOptinTypes"
          },
          "subscriptionNotifications": {
            "$ref": "#/components/schemas/CampaignSubscriptionNotifications"
          },
          "profile": {
            "$ref": "#/components/schemas/CampaignProfile"
          }
        },
        "type": "object"
      },
      "Campaign": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCampaign"
          },
          {
            "$ref": "#/components/schemas/CampaignAdditionalProperties"
          }
        ]
      },
      "NewCampaign": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "UpdateCampaign": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Campaign"
          }
        ]
      },
      "CampaignConfirmation": {
        "properties": {
          "fromField": {
            "$ref": "#/components/schemas/FromFieldReference"
          },
          "redirectType": {
            "description": "What will happen after email confirmation. The values allowed include: hosted (the subscriber will stay on the default GetResponse website), customUrl (the subscriber will be redirected to a custom URL provided by the user).",
            "type": "string",
            "enum": [
              "hosted",
              "customUrl"
            ],
            "example": "hosted"
          },
          "mimeType": {
            "description": "The MIME type for the confirmation message",
            "type": "string",
            "enum": [
              "text/html",
              "text/plain",
              "combo"
            ],
            "example": "text/plain"
          },
          "redirectUrl": {
            "description": "Required if the redirectType is customUrl. The URL a subscriber will be redirected to if the redirectType is set to customUrl.",
            "type": "string",
            "format": "uri",
            "example": "http://example.com"
          },
          "replyTo": {
            "$ref": "#/components/schemas/FromFieldReference"
          },
          "subscriptionConfirmationBodyId": {
            "description": "The subscription confirmation body ID",
            "type": "string",
            "example": "asS1"
          },
          "subscriptionConfirmationSubjectId": {
            "description": "Subscription confirmation subject ID",
            "type": "string",
            "example": "TEww"
          }
        },
        "type": "object"
      },
      "CampaignOptinTypes": {
        "properties": {
          "email": {
            "description": "Single opt-in: confirmed opt-in disabled. Double opt-in: confirmed opt-in enabled. You can find more information [here](https://www.getresponse.com/resources/glossary/confirmed-opt-in.html)",
            "type": "string",
            "enum": [
              "single",
              "double"
            ],
            "example": "single"
          },
          "api": {
            "description": "Single opt-in: confirmed opt-in disabled. Double opt-in: confirmed opt-in enabled. You can find more information [here](https://www.getresponse.com/resources/glossary/confirmed-opt-in.html)",
            "type": "string",
            "enum": [
              "single",
              "double"
            ],
            "example": "single"
          },
          "import": {
            "description": "Single opt-in: confirmed opt-in disabled. Double opt-in: confirmed opt-in enabled. You can find more information [here](https://www.getresponse.com/resources/glossary/confirmed-opt-in.html)",
            "type": "string",
            "enum": [
              "single"
            ],
            "example": "single"
          },
          "webform": {
            "description": "Single opt-in: confirmed opt-in disabled. Double opt-in: confirmed opt-in enabled. You can find more information [here](https://www.getresponse.com/resources/glossary/confirmed-opt-in.html)",
            "type": "string",
            "enum": [
              "single",
              "double"
            ],
            "example": "single"
          }
        },
        "type": "object"
      },
      "CampaignPostal": {
        "properties": {
          "addPostalToMessages": {
            "description": "Should the postal address be included in all message footers for this campaign (mandatory for Canada and the US)",
            "example": "true",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "city": {
            "description": "The city, free-text",
            "type": "string",
            "example": "London"
          },
          "companyName": {
            "description": "The company name, free-text",
            "type": "string",
            "example": "Company Ltd."
          },
          "country": {
            "description": "The country name, free-text",
            "type": "string",
            "example": "Great Britain"
          },
          "design": {
            "description": "How the postal address will display in messages. The available fields include: [[name]], [[address]], [[city]], [[state]] [[zip]], [[country]]",
            "type": "string",
            "example": "[[name]] from [[city]] in [[country]]"
          },
          "state": {
            "description": "The state, free-text",
            "type": "string",
            "example": "Shire"
          },
          "street": {
            "description": "The street, free-text",
            "type": "string",
            "example": "Bilbo Baggins Av"
          },
          "zipCode": {
            "description": "The ZIP code",
            "type": "string",
            "example": "81-611"
          }
        },
        "type": "object"
      },
      "CampaignProfile": {
        "properties": {
          "description": {
            "description": "The campaign description",
            "type": "string",
            "maxLength": 255,
            "minLength": 2,
            "example": "campaign description"
          },
          "industryTagId": {
            "description": "The industry tag ID",
            "type": "string",
            "format": "integer",
            "example": "1"
          },
          "logo": {
            "description": "The logo URL",
            "type": "string",
            "format": "uri",
            "example": "http://logos.com/imageupdated.jpg"
          },
          "logoLinkUrl": {
            "description": "The logo link URL",
            "type": "string",
            "format": "uri",
            "example": "http://somePageLogoLinkUpdated.com"
          },
          "title": {
            "description": "The profile title",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "title"
          }
        },
        "type": "object"
      },
      "CampaignSubscriptionNotifications": {
        "properties": {
          "status": {
            "description": "Are notifications enabled. Possible values include: enabled, disabled.",
            "example": "enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ]
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FromFieldReference"
            }
          }
        },
        "type": "object"
      },
      "RssNewsletterSendSettingsDetails": {
        "required": [
          "frequency",
          "filter"
        ],
        "properties": {
          "frequency": {
            "description": "When to send the message",
            "type": "string",
            "example": "asap"
          },
          "filter": {
            "description": "The filter settings for an RSS post",
            "type": "string",
            "enum": [
              "recent",
              "engaged",
              "shared",
              "commented"
            ]
          },
          "maxArticles": {
            "description": "How many articles to display in a list",
            "type": "integer",
            "format": "int32",
            "maximum": 30,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false
          },
          "selectedCampaigns": {
            "$ref": "#/components/schemas/MessageSendSettingSelectedCampaigns"
          },
          "selectedSegments": {
            "$ref": "#/components/schemas/MessageSendSettingSelectedSegments"
          },
          "selectedSuppressions": {
            "$ref": "#/components/schemas/MessageSendSettingSelectedSuppressions"
          },
          "excludedCampaigns": {
            "$ref": "#/components/schemas/MessageSendSettingExcludedCampaigns"
          },
          "excludedSegments": {
            "$ref": "#/components/schemas/MessageSendSettingExcludedSegments"
          },
          "selectedContacts": {
            "$ref": "#/components/schemas/MessageSendSettingSelectedContacts"
          }
        },
        "type": "object",
        "discriminator": {
          "propertyName": "frequency",
          "mapping": {
            "asap": "#/components/schemas/RssNewsletterSendAsapSettings",
            "daily": "#/components/schemas/RssNewsletterSendDailySettings",
            "weekly": "#/components/schemas/RssNewsletterSendWeeklySettings",
            "monthly": "#/components/schemas/RssNewsletterSendMonthlySettings"
          }
        }
      },
      "RssNewsletterSendAsapSettings": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletterSendSettingsDetails"
          }
        ]
      },
      "RssNewsletterSendDailySettings": {
        "required": [
          "sendAtHour"
        ],
        "properties": {
          "sendAtHour": {
            "description": "The hour when the message should be sent",
            "type": "integer",
            "format": "int32",
            "maximum": 23,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletterSendSettingsDetails"
          }
        ]
      },
      "RssNewsletterSendWeeklySettings": {
        "required": [
          "sendAtHour",
          "sendAtWeekDay"
        ],
        "properties": {
          "sendAtHour": {
            "description": "The hour when the message should be sent",
            "type": "integer",
            "format": "int32",
            "maximum": 23,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false
          },
          "sendAtWeekDay": {
            "description": "The day of the week when the message should be sent",
            "type": "string",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletterSendSettingsDetails"
          }
        ]
      },
      "RssNewsletterSendMonthlySettings": {
        "required": [
          "sendAtHour",
          "sendAtMonthDay"
        ],
        "properties": {
          "sendAtHour": {
            "description": "The hour when the message should be sent",
            "type": "integer",
            "format": "int32",
            "maximum": 23,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false
          },
          "sendAtMonthDay": {
            "description": "The day of the month when the message should be sent or 31 representing last day of month",
            "type": "integer",
            "format": "int32",
            "oneOf": [
              {
                "description": "Days available for every month",
                "maximum": 28,
                "minimum": 1
              },
              {
                "description": "Represents the last day of month, even if it has less then 31 days",
                "enum": [31]
              }
            ]
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletterSendSettingsDetails"
          }
        ]
      },
      "RssNewsletter": {
        "required": [
          "rssNewsletterId",
          "href"
        ],
        "properties": {
          "rssNewsletterId": {
            "description": "The RSS newsletter ID",
            "type": "string",
            "readOnly": true,
            "example": "dGer"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/rss-newsletters/dGer"
          },
          "rssFeedUrl": {
            "description": "The URL for the RSS Feed",
            "type": "string",
            "format": "uri",
            "example": "http://blog.getresponse.com"
          },
          "subject": {
            "description": "The RSS message subject",
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "example": "My rss to newsletters"
          },
          "name": {
            "description": "How your newsletters will be seen inside the application",
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "example": "rsstest0"
          },
          "status": {
            "description": "The status of the RSS newsletter",
            "example": "enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ]
          },
          "editor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageEditorEnum"
              }
            ]
          },
          "fromField": {
            "description": "The 'From' email address used for the message",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "replyTo": {
            "description": "The email that will be used as a reply-to address",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "content": {
            "$ref": "#/components/schemas/MessageContent"
          },
          "sendSettings": {
            "description": "How the message will be delivered to the subscriber",
            "allOf": [
              {
                "$ref": "#/components/schemas/RssNewsletterSendSettingsDetails"
              }
            ]
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "NewRssNewsletter": {
        "required": [
          "rssFeedUrl",
          "subject",
          "status",
          "fromField",
          "content",
          "sendSettings"
        ],
        "properties": {
          "flags": {
            "$ref": "#/components/schemas/MessageFlagsArray"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletter"
          }
        ]
      },
      "UpdateRssNewsletter": {
        "properties": {
          "flags": {
            "$ref": "#/components/schemas/MessageFlagsArray"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RssNewsletter"
          }
        ]
      },
      "MessageFlagsArray": {
        "description": "The message flags.",
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "openrate",
            "clicktrack",
            "google_analytics"
          ]
        }
      },
      "MessageFlagsString": {
        "description": "Comma-separated list of message flags. The possible values are: `openrate`, `clicktrack`, and `google_analytics`.",
        "type": "string",
        "example": "openrate,clicktrack,google_analytics"
      },
      "MessageEditorEnum": {
        "description": "How the message was created: `custom` means a custom-made message, `text` means plain text content, `getresponse` means that the message was created using the GetResponse editor.",
        "type": "string",
        "enum": [
          "custom",
          "text",
          "getresponse",
          "legacy",
          "html2"
        ]
      },
      "MessageContent": {
        "description": "The message content.",
        "properties": {
          "html": {
            "description": "The message content in HTML",
            "type": "string",
            "maxLength": 524288,
            "example": "\u003Ch1\u003Etest 12\u003C/h1\u003E\u003Cp\u003ESome test \u003Ca href=\"http://example.com\"\u003Ehttp://example.com\u003C/a\u003E\u003C/p\u003E"
          },
          "plain": {
            "description": "The plain text equivalent of the message content",
            "type": "string",
            "maxLength": 524288,
            "example": "test 12 Some test"
          }
        },
        "type": "object"
      },
      "Contact": {
        "required": [
          "contactId",
          "href",
          "email"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "readOnly": true,
            "example": "pV3r"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "example": "John Doe"
          },
          "origin": {
            "type": "string",
            "enum": [
              "import",
              "email",
              "www",
              "panel",
              "leads",
              "sale",
              "api",
              "forward",
              "survey",
              "iphone",
              "copy",
              "landing_page",
              "website_builder_elegant"
            ],
            "readOnly": true
          },
          "timeZone": {
            "description": "The time zone of a contact, uses the time zone database format (https://www.iana.org/time-zones)",
            "type": "string",
            "readOnly": true,
            "example": "Europe/Warsaw"
          },
          "activities": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/contacts/pV3r/activities"
          },
          "changedOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-12-19T13:11:48+0000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-03-02T07:30:49+0000"
          },
          "campaign": {
            "type": "object",
            "$ref": "#/components/schemas/CampaignReference"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "dayOfCycle": {
            "description": "The day on which the contact is in the Autoresponder cycle. `null` indicates the contacts is not in the cycle.",
            "type": "string",
            "example": "42",
            "nullable": true
          },
          "scoring": {
            "description": "Contact scoring, pass null to remove the score from a contact",
            "type": "number",
            "example": 8,
            "nullable": true
          },
          "engagementScore": {
            "description": "Engagement Score is a feature that presents a visual estimate of a contact's engagement with mailings. The score is based on the contact's interactions with your e-mails. Via API, it's returned in the form of numbers ranging from 1 (Not Engaged) to 5 (Highly Engaged).",
            "type": "integer",
            "format": "int32",
            "maximum": 5,
            "minimum": 1,
            "readOnly": true,
            "example": 3,
            "nullable": true
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/contacts/pV3r"
          }
        },
        "type": "object"
      },
      "NewContactCustomFieldValue": {
        "required": [
          "customFieldId",
          "value"
        ],
        "properties": {
          "customFieldId": {
            "description": "Custom field ID",
            "type": "string",
            "example": "kL6Nh"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "18-35"
            }
          }
        },
        "type": "object"
      },
      "NewContactTag": {
        "required": [
          "tagId"
        ],
        "properties": {
          "tagId": {
            "type": "string",
            "example": "m7E2"
          }
        },
        "type": "object"
      },
      "ContactTag": {
        "properties": {
          "tagId": {
            "type": "string",
            "example": "hR"
          },
          "name": {
            "type": "string",
            "example": "super_promo"
          },
          "href": {
            "type": "string",
            "format": "uri",
            "example": "https://api.getresponse.com/v3/tags/hR"
          },
          "color": {
            "type": "string",
            "deprecated": true
          }
        },
        "type": "object"
      },
      "NewContactTags": {
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewContactTag"
            }
          }
        },
        "type": "object"
      },
      "NewContactCustomFieldValues": {
        "properties": {
          "customFieldValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewContactCustomFieldValue"
            }
          }
        },
        "type": "object"
      },
      "NewContact": {
        "required": [
          "email",
          "campaign"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Contact"
          },
          {
            "properties": {
              "ipAddress": {
                "description": "The contact's IP address. IPv4 and IPv6 formats are accepted.",
                "example": "1.2.3.4",
                "oneOf": [
                  {
                    "type": "string",
                    "format": "ipv4"
                  },
                  {
                    "type": "string",
                    "format": "ipv6"
                  }
                ]
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/NewContactTags"
          },
          {
            "$ref": "#/components/schemas/NewContactCustomFieldValues"
          }
        ]
      },
      "UpsertContactCustomFields": {
        "required": [
          "customFieldValues"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NewContactCustomFieldValues"
          }
        ]
      },
      "UpsertContactTags": {
        "required": [
          "tags"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NewContactTags"
          }
        ]
      },
      "UpdateContact": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Contact"
          },
          {
            "properties": {
              "note": {
                "type": "string",
                "maxLength": 255,
                "minLength": 0,
                "nullable": true
              }
            },
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/NewContactTags"
          },
          {
            "$ref": "#/components/schemas/NewContactCustomFieldValues"
          }
        ]
      },
      "NewSuppression": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSuppression"
          }
        ]
      },
      "UpdateSuppression": {
        "required": [
          "name",
          "masks"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSuppression"
          }
        ]
      },
      "NewPredefinedField": {
        "required": [
          "name",
          "value",
          "campaign"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PredefinedField"
          }
        ]
      },
      "UpdatePredefinedField": {
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "string",
            "maxLength": 350,
            "minLength": 1,
            "pattern": "^[A-Za-z_]{1,350}$",
            "example": "my_new_value"
          }
        },
        "type": "object"
      },
      "UpdateCallbacks": {
        "properties": {
          "url": {
            "description": "URL to use to post notifications, required if callbacks are not yet enabled",
            "type": "string",
            "format": "uri",
            "example": "https://example.com/callback"
          },
          "actions": {
            "type": "object",
            "$ref": "#/components/schemas/CallbackActions"
          }
        },
        "type": "object"
      },
      "TriggerCustomEvent": {
        "required": [
          "name",
          "contactId"
        ],
        "properties": {
          "name": {
            "description": "The name of custom event. Custom event with this name must already exist",
            "type": "string",
            "maxLength": 64,
            "minLength": 3,
            "pattern": "^[a-z0-9_]{3,64}$",
            "example": "lesson_finished"
          },
          "contactId": {
            "description": "The contact ID",
            "type": "string",
            "example": "lTgH5"
          },
          "attributes": {
            "description": "The attributes for the trigger",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TriggerCustomEventAttribute"
            }
          }
        },
        "type": "object"
      },
      "TriggerCustomEventAttribute": {
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "description": "The name of the attribute. It must be already defined for the custom event",
            "type": "string",
            "maxLength": 64,
            "minLength": 3,
            "example": "lesson_name"
          },
          "value": {
            "example": "lesson_3",
            "$ref": "#/components/schemas/TriggerCustomEventAttributeValue"
          }
        },
        "type": "object"
      },
      "TriggerCustomEventAttributeValue": {
        "description": "The value of the attribute. Value type depends on the attribute definition",
        "oneOf": [
          {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "example": "lesson_3"
          },
          {
            "$ref": "#/components/schemas/StringBooleanEnum"
          },
          {
            "type": "boolean"
          },
          {
            "description": "Date in extended ISO 8601 datetime format: *2019-01-01T08:00:00+00*",
            "type": "string",
            "format": "date-time",
            "example": "2019-01-01T08:00:00+0000"
          },
          {
            "type": "integer",
            "format": "int64",
            "example": 1500
          }
        ]
      },
      "NewCustomEvent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomEvent"
          }
        ]
      },
      "UpdateCustomEvent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomEvent"
          }
        ]
      },
      "CustomEvent": {
        "required": [
          "name",
          "attributes"
        ],
        "properties": {
          "name": {
            "description": "Unique name of custom event",
            "type": "string",
            "pattern": "^[a-z0-9_]{3,64}$",
            "example": "sample_custom_event"
          },
          "attributes": {
            "description": "Optional collection of attributes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEventAttributeDetails"
            }
          }
        },
        "type": "object"
      },
      "CustomEventDetails": {
        "required": [
          "customEventId",
          "createdOn"
        ],
        "properties": {
          "customEventId": {
            "description": "The custom event ID",
            "type": "string",
            "readOnly": true,
            "example": "hy7"
          },
          "createdOn": {
            "description": "Date of creation custom event definition",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-08-19T11:32:34+0000"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "url",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/custom-events/vBd5"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomEvent"
          }
        ]
      },
      "CustomEventAttributeDetails": {
        "required": [
          "customEventAttributeId"
        ],
        "properties": {
          "customEventAttributeId": {
            "type": "string",
            "readOnly": true,
            "example": "gt7"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomEventAttribute"
          }
        ]
      },
      "CustomEventAttribute": {
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "description": "Unique name of attribute",
            "type": "string",
            "pattern": "^[a-z0-9_]{3,64}$",
            "example": "sample_attribute"
          },
          "type": {
            "description": "Type of attribute",
            "enum": [
              "string",
              "number",
              "datetime",
              "boolean"
            ],
            "example": "string"
          }
        },
        "type": "object"
      },
      "FormVariant": {
        "properties": {
          "variant": {
            "description": "The index of variants",
            "type": "string",
            "readOnly": true,
            "example": "0"
          },
          "variantName": {
            "type": "string",
            "example": "Variant A"
          },
          "winner": {
            "description": "Is this variant the winner in the A/B test",
            "$ref": "#/components/schemas/StringBooleanEnum"
          },
          "status": {
            "type": "string",
            "enum": [
              "published",
              "unpublished",
              "disabled"
            ]
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "example": "2018-07-11T13:37:25+0000"
          },
          "statistics": {
            "$ref": "#/components/schemas/FormStatistics"
          }
        },
        "type": "object"
      },
      "FormVariantDetails": {
        "properties": {
          "formId": {
            "type": "string",
            "readOnly": true,
            "example": "pL4e"
          },
          "webformId": {
            "description": "Same as `formId`",
            "type": "string",
            "readOnly": true,
            "example": "pL4e"
          },
          "variant": {
            "description": "The index of variants",
            "type": "string",
            "readOnly": true,
            "example": "0"
          },
          "variantName": {
            "type": "string",
            "example": "Variant A"
          },
          "winner": {
            "description": "Is this variant the winner in the A/B test",
            "type": "string",
            "enum": [
              "yes",
              "no"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "published",
              "unpublished",
              "disabled"
            ]
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "example": "2018-07-09T15:45:12+0000"
          },
          "numberOfVisitors": {
            "description": "The total number of form visitors",
            "type": "integer",
            "format": "int64",
            "example": 152
          },
          "numberOfUniqueVisitors": {
            "description": "The number of unique form visitors",
            "type": "integer",
            "format": "int64",
            "example": 136
          },
          "numberOfSubscribers": {
            "description": "The number of visitors who subscribed through this form",
            "type": "integer",
            "format": "int64",
            "example": 94
          },
          "subscriptionRate": {
            "description": "The ratio of `numberOfSubscribers` to `numberOfVisitors`",
            "type": "number",
            "format": "double",
            "example": 0.62
          }
        },
        "type": "object"
      },
      "FormDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Form"
          },
          {
            "properties": {
              "settings": {
                "$ref": "#/components/schemas/FormSettings"
              },
              "variants": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormVariant"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "FormSettings": {
        "properties": {
          "optin": {
            "description": "`single` - Single opt-in means that the contact will be added without confirming their subscription first. `double` - Double opt-in means that the contact will receive a subscription confirmation email.",
            "type": "string",
            "enum": [
              "single",
              "double"
            ],
            "example": "single"
          },
          "phase": {
            "description": "The contact who subscribed via this form will be added to the selected day in the autoresponder cycle. If null, the contact won't be added to the cycle.",
            "type": "integer",
            "format": "int32",
            "maximum": 9999,
            "minimum": 0,
            "example": 5,
            "nullable": true
          },
          "thankYouType": {
            "description": "What should happen when a new contact subscribes via the form.",
            "type": "string",
            "enum": [
              "stay_on_page",
              "default",
              "custom_url"
            ],
            "example": "stay_on_page"
          },
          "thankYouUrl": {
            "description": "The URL used to redirect the newly subscribed contacts when they complete this form. Used if `thankYouType` is `custom_url`.",
            "type": "string",
            "format": "uri",
            "example": "https://example.com/thank-you",
            "nullable": true
          },
          "alreadySubscribedType": {
            "description": "What to do when the address already exists in the campaign",
            "type": "string",
            "enum": [
              "stay_on_page",
              "default",
              "custom_url"
            ],
            "example": "stay_on_page"
          },
          "alreadySubscribedUrl": {
            "description": "The URL used to redirect the already subscribed contacts when they complete this form. Used if `alreadySubscribedType` is `custom_url`.",
            "type": "string",
            "format": "uri",
            "example": "https://example.com/thank-you",
            "nullable": true
          },
          "secondStageCaptcha": {
            "description": "Is captcha enabled for the form",
            "$ref": "#/components/schemas/StringBooleanEnum"
          },
          "forwardDataRequestType": {
            "description": "How to forward form data to a thank-you page. [Learn more](https://www.getresponse.com/help/building-contact-lists/forms-and-pop-ups/can-i-forward-subscriber-data-to-a-custom-thank-you-page.html). `null` means that the data forwarding is turned off.",
            "type": "string",
            "enum": [
              "GET",
              "POST"
            ],
            "nullable": true
          },
          "trackingCustomField": {
            "description": "Subscribers added via this form will have this custom field set with a value passed in `trackingCustomFieldValue`",
            "type": "string",
            "nullable": true,
            "$ref": "#/components/schemas/CustomFieldReference"
          },
          "trackingCustomFieldValue": {
            "description": "See the `trackingCustomField` description",
            "type": "string",
            "example": "123",
            "nullable": true
          }
        },
        "type": "object"
      },
      "Form": {
        "properties": {
          "formId": {
            "type": "string",
            "readOnly": true,
            "example": "pL4e"
          },
          "webformId": {
            "description": "Same as `formId`",
            "type": "string",
            "readOnly": true,
            "example": "pL4e"
          },
          "name": {
            "type": "string",
            "example": "My first form"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/forms/pL4e"
          },
          "hasVariants": {
            "description": "Indicates if the form has variants (A/B tests)",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "scriptUrl": {
            "description": "The URL to a JavaScript file of the form. This is used to embed the form within a web page.",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://app.getresponse.com/view_webform_v2.js?u=nTfa&webforms_id=123"
          },
          "status": {
            "type": "string",
            "enum": [
              "published",
              "unpublished",
              "draft"
            ],
            "example": "published"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "example": "2018-07-02T11:22:33+0000"
          },
          "statistics": {
            "$ref": "#/components/schemas/FormStatistics"
          },
          "campaign": {
            "$ref": "#/components/schemas/CampaignReference"
          }
        },
        "type": "object"
      },
      "FormStatistics": {
        "properties": {
          "visitors": {
            "description": "The total number of form visitors",
            "type": "integer",
            "format": "int64",
            "example": 4371
          },
          "uniqueVisitors": {
            "description": "The number of unique form visitors",
            "type": "integer",
            "format": "int64",
            "example": 3865
          },
          "subscribed": {
            "description": "The number of visitors that subscribed using this form",
            "type": "integer",
            "format": "int64",
            "example": 2594
          },
          "subscriptionRate": {
            "description": "The ratio of `subscribed` to `visitors`",
            "type": "number",
            "format": "double",
            "example": 0.59
          }
        },
        "type": "object"
      },
      "BaseLandingPage": {
        "properties": {
          "landingPageId": {
            "description": "The landing page ID",
            "type": "string",
            "example": "avYn"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "example": "https://api.getresponse.com/v3/landing-pages/avYn"
          },
          "metaTitle": {
            "description": "The landing page meta title property",
            "type": "string",
            "example": "Some meta title"
          },
          "domain": {
            "description": "The domain where the landing page is hosted",
            "type": "string",
            "example": "gr8.new"
          },
          "subdomain": {
            "description": "The subdomain where the landing page is assigned",
            "type": "string",
            "example": "summer-sale"
          },
          "userDomain": {
            "description": "The private domain provided by the user",
            "type": "string",
            "example": ""
          },
          "userDomainPath": {
            "description": "The private domain path provided by the user",
            "type": "string",
            "example": ""
          },
          "campaign": {
            "description": "The campaign to which the landing page is linked",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignReference"
              }
            ]
          },
          "status": {
            "description": "The landing page status",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ]
          },
          "userDomainStatus": {
            "description": "The DNS status for the user's private domain. Can be `null` if a private domain isn't assigned.",
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "waiting"
            ],
            "nullable": true
          },
          "testAB": {
            "description": "Does the landing page have AB testing (variants) enabled",
            "example": "true",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedOn": {
            "description": "The date of the last page update",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "LandingPageVariant": {
        "properties": {
          "variantId": {
            "description": "The landing page variant ID.",
            "type": "string",
            "example": "PKxn"
          },
          "variant": {
            "description": "The variant index.",
            "type": "string",
            "format": "integer",
            "example": "0"
          },
          "winner": {
            "type": "boolean",
            "example": true
          },
          "visitors": {
            "type": "string",
            "format": "integer",
            "example": "12"
          },
          "uniqueVisitors": {
            "type": "string",
            "format": "integer",
            "example": "2"
          },
          "subscribed": {
            "type": "string",
            "format": "integer",
            "example": "2"
          }
        },
        "type": "object"
      },
      "LandingPage": {
        "properties": {
          "metaDescription": {
            "description": "The landing page meta description property",
            "type": "string",
            "example": "Some meta description"
          },
          "metaNoindex": {
            "description": "To entirely prevent your page content from being listed in the Google web index, even if other sites link to it use a noindex meta tag",
            "type": "string",
            "enum": [
              "yes",
              "no"
            ]
          },
          "dayOfCycle": {
            "description": "Contacts subscribed via the landing page will be added to the autoresponder cycle. `Null` if contacts shouldn't be added to the cycle.",
            "type": "integer",
            "format": "int32",
            "maximum": 9999,
            "minimum": 0,
            "example": 2,
            "nullable": true
          },
          "optin": {
            "description": "The opt-in type (double or single)",
            "type": "string",
            "enum": [
              "single",
              "double"
            ]
          },
          "favicoUrl": {
            "description": "The favicon URL. Can be `null` if a favicon isn't present",
            "type": "string",
            "format": "uri",
            "example": "https://my-landing-page.mohahaha.com/favico.ico",
            "nullable": true
          },
          "thankYouPageType": {
            "description": "What should happen after a contact subscribes",
            "type": "string",
            "enum": [
              "stay_on_page",
              "default",
              "custom_url"
            ]
          },
          "thankYouPageUrl": {
            "description": "The `thank-you` page URL. Can be empty if a custom thank-you page isn't being used",
            "type": "string",
            "format": "uri",
            "example": "https://my-landing-page.mohahaha.com/thank_you.html"
          },
          "url": {
            "description": "The landing page URL",
            "type": "string",
            "format": "uri",
            "example": "https://my-landing-page.mohahaha.com"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LandingPageVariant"
            }
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseLandingPage"
          }
        ]
      },
      "NewImport": {
        "required": [
          "campaignId",
          "contacts",
          "fieldMapping"
        ],
        "properties": {
          "campaignId": {
            "description": "The ID of the destination campaign (list)",
            "type": "string",
            "example": "z5c"
          },
          "fieldMapping": {
            "description": "Mapping definition for such contact properties as email address, name, or custom fields. It's the equivalent of column headers in a CSV file used to import contacts in a GetResponse account. The `email` value is required. For custom fields, provide only custom fields name in the mapping. Include their values in the corresponding field in the contact array",
            "type": "array",
            "items": {
              "type": "string",
              "example": "email"
            }
          },
          "contacts": {
            "description": "Container for a contact definition. Include the values defined in the `fieldMapping` array",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewImportContact"
            }
          }
        },
        "type": "object"
      },
      "NewImportContact": {
        "type": "array",
        "items": {
          "type": "string",
          "example": "example@somedomain.com"
        }
      },
      "Import": {
        "properties": {
          "importId": {
            "description": "The import ID",
            "type": "string",
            "readOnly": true,
            "example": "o6gE"
          },
          "campaign": {
            "type": "object",
            "$ref": "#/components/schemas/CampaignReference"
          },
          "status": {
            "type": "string",
            "enum": [
              "uploaded",
              "review",
              "approved",
              "rejected",
              "finished",
              "canceled",
              "to_review"
            ],
            "readOnly": true
          },
          "statistics": {
            "description": "The import statistics",
            "type": "object",
            "$ref": "#/components/schemas/ImportStatistics"
          },
          "errorStatistics": {
            "description": "The detailed import error statistics",
            "type": "object",
            "$ref": "#/components/schemas/ImportErrorStatistics"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "finishedOn": {
            "type": "string",
            "format": "date-time"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/imports/o6gE"
          }
        },
        "type": "object"
      },
      "ImportStatistics": {
        "required": [
          "uploaded",
          "invalid",
          "updated",
          "addedToList"
        ],
        "properties": {
          "uploaded": {
            "description": "The number of uploaded contacts",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 25
          },
          "invalid": {
            "description": "The number of invalid contacts",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 5
          },
          "updated": {
            "description": "The number of updated contacts",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 10
          },
          "addedToList": {
            "description": "The number of added contacts",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 10
          }
        },
        "type": "object"
      },
      "ImportErrorStatistics": {
        "properties": {
          "syntaxErrors": {
            "description": "The number of contacts with a syntax error",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 2
          },
          "alreadyInQueue": {
            "description": "The number of contacts already in queue",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "invalidDomains": {
            "description": "The number of contacts with invalid domains",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "blacklist": {
            "description": "The number of blocked contacts",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "policyFailures": {
            "description": "The number of contacts rejected for policy reasons",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          },
          "mismatchedCriteria": {
            "description": "The number of contacts rejected because of mismatched criteria, [learn more](https://www.getresponse.com/help/managing-contacts/working-with-contact-lists/where-can-i-find-import-statistics.html#what-do-the-numbers-for-uploaded-approved-and-import-errors-mean)",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 1
          }
        },
        "type": "object"
      },
      "SmsStats": {
        "required": [
          "smsId"
        ],
        "properties": {
          "smsId": {
            "description": "The SMS message ID",
            "type": "string",
            "example": "PvLI8C"
          },
          "totalSms": {
            "description": "The number of SMS messages sent",
            "type": "integer",
            "example": 1
          },
          "totalRecipients": {
            "description": "The number of recipients",
            "type": "integer",
            "example": 1
          },
          "totalClicks": {
            "description": "The number of link clicks from an SMS message",
            "type": "integer",
            "example": 1
          },
          "totalUniqueClicks": {
            "description": "The number of total unique link clicks from an SMS message",
            "type": "integer",
            "example": 1
          },
          "totalUnsubscribes": {
            "description": "The number of opt-outs from an SMS message",
            "type": "integer",
            "example": 1
          },
          "totalDelivered": {
            "description": "The number of delivered SMS messages",
            "type": "integer",
            "example": 1
          },
          "totalPrice": {
            "description": "Cost details of a specific SMS",
            "type": "object",
            "nullable": false,
            "allOf": [
              {
                "properties": {
                  "amount": {
                    "description": "Total SMS message cost",
                    "type": "string",
                    "example": "0.0240"
                  },
                  "currency": {
                    "description": "Pricing currency",
                    "type": "string",
                    "example": "USD"
                  }
                },
                "type": "object"
              }
            ]
          },
          "link": {
            "description": "Link details",
            "type": "object",
            "nullable": false,
            "allOf": [
              {
                "properties": {
                  "url": {
                    "description": "Link URL",
                    "type": "string",
                    "example": "https://getresponse.com"
                  },
                  "clicks": {
                    "description": "The number of link clicks from an SMS message",
                    "type": "integer",
                    "example": 1
                  },
                  "uniqueClicks": {
                    "description": "The number of unique link clicks from an SMS message",
                    "type": "integer",
                    "example": 1
                  }
                },
                "type": "object"
              }
            ]
          },
          "countryStatistics": {
            "description": "SMS message statistics per country",
            "type": "object",
            "nullable": false,
            "allOf": [
              {
                "properties": {
                  "countryCode": {
                    "description": "Country code",
                    "type": "string",
                    "example": "PL"
                  },
                  "recipients": {
                    "description": "The number of recipients",
                    "type": "integer",
                    "example": 1
                  },
                  "smsCount": {
                    "description": "The number of messages sent",
                    "type": "integer",
                    "example": 1
                  },
                  "price": {
                    "description": "Pricing details",
                    "type": "object",
                    "allOf": [
                      {
                        "properties": {
                          "price": {
                            "description": "Total cost",
                            "type": "string",
                            "example": "0.0240"
                          },
                          "currency": {
                            "description": "Pricing currency",
                            "type": "string",
                            "example": "USD"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "RevenueStatistics": {
        "properties": {
          "currency": {
            "description": "Statistics currency",
            "type": "string",
            "example": "USD"
          },
          "timeSeries": {
            "type": "array",
            "items": {
              "properties": {
                "timeInterval": {
                  "description": "Orders and revenue are grouped by time intervals. Interval length is set automatically and depends on the `orderDate` parameter.",
                  "type": "string",
                  "pattern": "/^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?(\\/)P(?=\\w*\\d)(?:\\d+Y|Y)?(?:\\d+M|M)?(?:\\d+W|W)?(?:\\d+D|D)?(?:T(?:\\d+H|H)?(?:\\d+M|M)?(?:\\d+(?:\\­.\\d{1,2})?S|S)?)?$/",
                  "example": "2014-09-20T00:00:00+0000/P2M18DT10H0M0S"
                },
                "revenue": {
                  "description": "Revenue",
                  "type": "number",
                  "example": 2.45
                },
                "orders": {
                  "description": "Number of orders",
                  "type": "integer",
                  "example": 5
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "GeneralPerformanceStats": {
        "properties": {
          "currency": {
            "description": "Statistics currency",
            "type": "string",
            "example": "USD"
          },
          "order": {
            "description": "Order statistics",
            "type": "object",
            "nullable": false,
            "allOf": [
              {
                "properties": {
                  "orders": {
                    "description": "Number of orders",
                    "type": "integer",
                    "example": 5
                  },
                  "ordersTrend": {
                    "description": "Order trend",
                    "type": "number",
                    "example": 1.23
                  },
                  "avgOrderRevenue": {
                    "description": "Average order value",
                    "type": "number",
                    "example": 1.23
                  },
                  "avgOrderRevenueTrend": {
                    "description": "Average order value trend",
                    "type": "number",
                    "example": 1.23
                  }
                },
                "type": "object"
              }
            ]
          },
          "revenue": {
            "description": "Revenue statistics",
            "type": "object",
            "nullable": false,
            "allOf": [
              {
                "properties": {
                  "revenue": {
                    "description": "Revenue from orders",
                    "type": "number",
                    "example": 1.23
                  },
                  "revenueTrend": {
                    "description": "Revenue trend",
                    "type": "number",
                    "example": 1.23
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "PredefinedField": {
        "properties": {
          "predefinedFieldId": {
            "type": "string",
            "readOnly": true,
            "example": "6neM"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/predefined-fields/6neM"
          },
          "name": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "pattern": "^[A-Za-z0-9_]{1,32}$",
            "example": "my_predefined_field_123"
          },
          "value": {
            "type": "string",
            "maxLength": 350,
            "minLength": 1,
            "example": "my value"
          },
          "campaign": {
            "type": "object",
            "$ref": "#/components/schemas/CampaignReference"
          }
        },
        "type": "object"
      },
      "PredefinedFieldDetails": {
        "description": "The predefined field details.",
        "type": "object",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/PredefinedField"
          }
        ]
      },
      "Suppression": {
        "required": [
          "suppressionId"
        ],
        "properties": {
          "suppressionId": {
            "description": "The suppression ID",
            "type": "string",
            "readOnly": true,
            "example": "pypF"
          },
          "name": {
            "description": "The suppression name",
            "type": "string",
            "example": "suppression-name"
          },
          "createdOn": {
            "description": "Created on DateTime in the ISO8601 format",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-07-26T06:33:13+0000"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/suppressions/pypF"
          }
        },
        "type": "object"
      },
      "BaseSuppression": {
        "properties": {
          "name": {
            "description": "The name of the suppression list",
            "type": "string",
            "example": "suppression-name"
          },
          "masks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "@example.com"
            }
          }
        },
        "type": "object"
      },
      "SuppressionDetails": {
        "type": "object",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Suppression"
          },
          {
            "$ref": "#/components/schemas/BaseSuppression"
          }
        ]
      },
      "SubscriptionConfirmationBody": {
        "properties": {
          "subscriptionConfirmationBodyId": {
            "description": "Subscription confirmation subject ID",
            "type": "string",
            "example": "asS1"
          },
          "name": {
            "description": "Name",
            "type": "string",
            "example": "Database signup"
          },
          "contentPlain": {
            "description": "Plain text content equivalent of confirmation message",
            "type": "string",
            "example": "\nHello {{CONTACT \\\"subscriber_first_name\\\"}},        \\r\\n               \\r\\n{{INTERNAL \\\"body\\\"}}\\r\\n\nYour request to sign up to our\\r\\ndatabase has been received and\\r\\nrequires your confirmation.\\r\\n\\r\\n\nEASY 1-CLICK CONFIRMATION:\\r\\n{{LINK \\\"confirm\\\"}}\\r\\n\\r\\nYou will be added to the database\\r\\n\ninstantly upon your confirmation.\\r\\n\\r\\n\\r\\nYou will be able to unsubscribe\\r\\nor change your details at any time.\\r\\n\\r\\n\nIf you have received this email in\\r\\nerror and did not intend to join\\r\\nour database, no further action is\\r\\n\nrequired on your part.\\r\\n\\r\\nYou won't receive further\\r\\ninformation and you won't be\\r\\n\nsubscribed to any list until you\\r\\nconfirm your request above.\\r\\n\\r\\n{{INTERNAL \\\"signature\\\"}}\n"
          },
          "contentHtml": {
            "description": "HTML content of confirmation message",
            "type": "string",
            "example": "[HTML_CODE]"
          }
        },
        "type": "object"
      },
      "SubscriptionConfirmationSubject": {
        "properties": {
          "subscriptionConfirmationSubjectId": {
            "description": "Subscription confirmation subject ID",
            "type": "string",
            "example": "AS3A"
          },
          "subject": {
            "description": "Subject",
            "type": "string",
            "example": "Action Requested - please confirm your subscription."
          },
          "isPrivate": {
            "description": "Is private",
            "example": "false",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          }
        },
        "type": "object"
      },
      "ShopDetails": {
        "properties": {
          "shopId": {
            "description": "The shop ID",
            "type": "string",
            "readOnly": true,
            "example": "pf3"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/shops/pf3"
          },
          "name": {
            "description": "The shop name",
            "type": "string",
            "maxLength": 124,
            "minLength": 4,
            "example": "Monster market"
          },
          "locale": {
            "description": "The language locale (ISO 639-1)",
            "type": "string",
            "example": "PL"
          },
          "currency": {
            "description": "The currency code (ISO 4217)",
            "type": "string",
            "example": "PLN"
          },
          "productCount": {
            "description": "Amount of products in the shop",
            "type": "integer",
            "example": "10"
          },
          "productRevenue": {
            "description": "Total revenue from purchased products",
            "type": "number",
            "example": "1.23"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateAndUpdate"
          }
        ]
      },
      "PopupGeneralPerformanceStats": {
        "required": [
          "popupId"
        ],
        "properties": {
          "popupId": {
            "description": "The form or popup ID",
            "type": "string",
            "example": "7189c47e-e45f-4c45-a882-08649c48ff96"
          },
          "views": {
            "description": "The total number of times your popup was viewed by website visitors",
            "type": "integer",
            "format": "int64",
            "example": 9
          },
          "clicks": {
            "description": "The number of clicks",
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "ctr": {
            "description": "The number of clicks divided by the number of views, shown as a percentage",
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "leads": {
            "description": "The number of leads",
            "type": "integer",
            "format": "int64",
            "example": 2
          }
        },
        "type": "object"
      },
      "PopupDetails": {
        "properties": {
          "popupId": {
            "description": "The form or popup ID",
            "type": "string",
            "readOnly": true,
            "example": "ce84fabc-1349-4992-a2d7-0c44c5534128"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/popups/ce84fabc-1349-4992-a2d7-0c44c5534128"
          },
          "name": {
            "description": "The form or popup name",
            "type": "string",
            "example": "My popup name"
          },
          "status": {
            "description": "The form or popup status",
            "type": "string",
            "enum": [
              "published",
              "unpublished"
            ],
            "readOnly": true
          },
          "type": {
            "description": "The form or popup type",
            "type": "string",
            "enum": [
              "popup",
              "inline"
            ],
            "readOnly": true
          },
          "thumbnailUrl": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://us-wbe-img2.gr-cdn.com/user/X/Y.webp"
          },
          "createdAt": {
            "description": "The date (in GMT) the form or popup was created. Shown in format `ISO 8601` without timezone offset e.g. `2024-01-01T10:35:00`.",
            "type": "string",
            "format": "date-time",
            "example": "2024-01-01T10:35:00"
          },
          "updatedAt": {
            "description": "The date (in GMT) the form or popup was updated. Shown in format `ISO 8601` without timezone offset e.g. `2024-01-10T10:00:00`.",
            "type": "string",
            "format": "date-time",
            "example": "2024-01-10T10:00:00"
          }
        },
        "type": "object"
      },
      "PopupListItem": {
        "properties": {
          "popupId": {
            "description": "The form or popup ID",
            "type": "string",
            "readOnly": true,
            "example": "ce84fabc-1349-4992-a2d7-0c44c5534128"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/popups/6b0d7d59-71d9-4708-80a6-aa0f13805111"
          },
          "name": {
            "description": "The form or popup name",
            "type": "string",
            "example": "My popup name"
          },
          "status": {
            "description": "The form or popup status",
            "type": "string",
            "enum": [
              "published",
              "unpublished"
            ],
            "readOnly": true
          },
          "type": {
            "description": "The form or popup type",
            "type": "string",
            "enum": [
              "popup",
              "inline"
            ],
            "readOnly": true
          },
          "createdAt": {
            "description": "The date (in GMT) the form or popup was created. Shown in format `ISO 8601` without timezone offset e.g. `2024-01-01T10:35:00`.",
            "type": "string",
            "format": "date-time",
            "example": "2024-01-10T10:00:00"
          },
          "updatedAt": {
            "description": "The date (in GMT) the form or popup was updated. Shown in format `ISO 8601` without timezone offset e.g. `2024-01-10T10:00:00`.",
            "type": "string",
            "format": "date-time",
            "example": "2024-01-10T10:00:00"
          },
          "statistics": {
            "description": "The landing page statistics",
            "$ref": "#/components/schemas/PopupListItemStatistics"
          }
        },
        "type": "object"
      },
      "PopupListItemStatistics": {
        "properties": {
          "views": {
            "description": "The total number of times your popup was viewed by website visitors",
            "type": "integer",
            "format": "int64",
            "example": 9
          },
          "uniqueVisitors": {
            "description": "The total number of visitors",
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "leads": {
            "description": "The number of leads",
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "ctr": {
            "description": "The number of clicks divided by the number of views, shown as a percentage",
            "type": "integer",
            "format": "int64",
            "example": 52
          }
        },
        "type": "object"
      },
      "SplittestNewsletter": {
        "properties": {
          "newsletterId": {
            "description": "The newsletter ID",
            "type": "string",
            "example": "Z6e"
          },
          "href": {
            "description": "The direct newsletter URL",
            "type": "string",
            "format": "uri",
            "example": "https://api.getresponse.com/v3/newsletters/B2fvv"
          },
          "name": {
            "description": "The newsletter name",
            "type": "string",
            "example": "Newsletter name"
          },
          "subject": {
            "description": "The newsletter subject",
            "type": "string",
            "example": "Example subject"
          },
          "fromField": {
            "description": "The \\\"From\\\" address for the newsletter",
            "type": "object",
            "$ref": "#/components/schemas/FromFieldReference"
          },
          "status": {
            "description": "The status of the newsletter",
            "type": "string",
            "enum": [
              "sampled",
              "chosen",
              "rejected"
            ]
          },
          "sendOn": {
            "description": "The date when the newsletter was sent",
            "type": "string",
            "format": "date-time",
            "example": "2015-06-25T20:05:10+0000"
          },
          "samplingTargets": {
            "description": "The newsletter sample targets",
            "type": "string",
            "format": "int32",
            "example": "2"
          },
          "samplingDelivered": {
            "description": "The newsletter sample delivery",
            "type": "string",
            "format": "int32",
            "example": "2"
          },
          "scoreOpens": {
            "description": "The newsletter open rate",
            "type": "string",
            "format": "int32",
            "example": "2"
          },
          "scoreClicks": {
            "description": "The newsletter click rate",
            "type": "string",
            "format": "int32",
            "example": "2"
          }
        },
        "type": "object"
      },
      "Splittest": {
        "properties": {
          "splittestId": {
            "description": "A/B test ID",
            "type": "string",
            "example": "A3r"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "example": "https://api.getresponse.com/v3/splittests/A3r"
          },
          "name": {
            "description": "A/B test name",
            "type": "string",
            "example": "A/B test"
          },
          "campaign": {
            "description": "A/B test campaign",
            "type": "object",
            "$ref": "#/components/schemas/CampaignReference"
          },
          "status": {
            "description": "A/B test status",
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "winningCriteria": {
            "description": "A/B test winning criteria",
            "type": "string",
            "enum": [
              "open",
              "click"
            ],
            "nullable": true
          },
          "winningTarget": {
            "description": "A/B test wining target",
            "type": "string",
            "format": "int32",
            "example": "10"
          },
          "stage": {
            "description": "A/B test stage",
            "type": "string",
            "enum": [
              "queued",
              "schedule_sampling",
              "evaluate_sampling",
              "choose_winning",
              "schedule_winning",
              "send_winning",
              "canceled_queued",
              "canceled_sampling",
              "canceled_winning",
              "incomplete",
              "finished"
            ]
          },
          "type": {
            "description": "A/B test type",
            "type": "string",
            "enum": [
              "content",
              "subject",
              "day",
              "hour",
              "from_field"
            ]
          },
          "samplingPercentage": {
            "description": "A/B test sample percentage",
            "type": "string",
            "format": "int32",
            "example": "18",
            "nullable": true
          },
          "samplingTime": {
            "description": "A/B test sampling time in seconds",
            "type": "string",
            "format": "int32",
            "example": "86400",
            "nullable": true
          },
          "chooseWinning": {
            "description": "The method of choosing the winning A/B test",
            "type": "string",
            "enum": [
              "automatic",
              "manual"
            ],
            "nullable": true
          },
          "winningScoreOpens": {
            "description": "The open rate of the winning A/B test",
            "type": "string",
            "format": "int32",
            "example": "5"
          },
          "winningScoreClicks": {
            "description": "The click rate of the winning A/B test",
            "type": "string",
            "format": "int32",
            "example": "3"
          },
          "winningDelivered": {
            "description": "The delivery rate of the winning A/B test",
            "type": "string",
            "format": "int32",
            "example": "12"
          },
          "winningScheduleOn": {
            "description": "The date for wchich the winning A/B test was scheduled",
            "type": "string",
            "format": "date-time",
            "example": "2015-06-25T20:05:10+0000",
            "nullable": true
          },
          "nextStepOn": {
            "description": "The date of the next step in the A/B test",
            "type": "string",
            "format": "date-time",
            "example": "2015-07-25T20:05:10+0000",
            "nullable": true
          },
          "evaluationSkippedOn": {
            "description": "The date when the A/B test was skipped",
            "type": "string",
            "format": "date-time",
            "example": "2015-07-25T20:05:10+0000",
            "nullable": true
          },
          "canceledOn": {
            "description": "The date when the A/B test was canceled",
            "type": "string",
            "format": "date-time",
            "example": "2015-07-25T20:05:10+0000",
            "nullable": true
          },
          "createdOn": {
            "description": "The date when the A/B test was created",
            "type": "string",
            "format": "date-time",
            "example": "2015-07-25T20:05:10+0000",
            "nullable": true
          },
          "newsletters": {
            "description": "The newsletters that are associated with the A/B test",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SplittestNewsletter"
            }
          },
          "sendSettings": {
            "description": "The send settings for the A/B test",
            "properties": {
              "selectedCampaigns": {
                "$ref": "#/components/schemas/MessageSendSettingSelectedCampaigns"
              },
              "selectedSegments": {
                "$ref": "#/components/schemas/MessageSendSettingSelectedSegments"
              },
              "selectedSupressions": {
                "$ref": "#/components/schemas/MessageSendSettingSelectedSuppressions"
              },
              "excludedCampaigns": {
                "$ref": "#/components/schemas/MessageSendSettingExcludedCampaigns"
              },
              "excludedSegments": {
                "$ref": "#/components/schemas/MessageSendSettingExcludedSegments"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "MessageActivityReportActivityTypesEnum": {
        "type": "string",
        "enum": [
          "click",
          "open",
          "send"
        ]
      },
      "NewFile": {
        "required": [
          "name",
          "extension",
          "content",
          "folder"
        ],
        "properties": {
          "content": {
            "description": "The base64 encoded file content",
            "type": "string",
            "format": "byte",
            "example": "dGVzdCBjb250ZW50"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFile"
          }
        ]
      },
      "BaseFile": {
        "properties": {
          "name": {
            "description": "The file name",
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "example": "image"
          },
          "extension": {
            "description": "The file extension",
            "type": "string",
            "example": "jpg"
          },
          "folder": {
            "description": "The folder where the file is stored",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/FolderShort"
              }
            ]
          }
        },
        "type": "object"
      },
      "FileGroup": {
        "description": "The file group",
        "type": "string",
        "enum": [
          "audio",
          "video",
          "photo",
          "document"
        ],
        "example": "photo"
      },
      "FolderShort": {
        "required": [
          "folderId"
        ],
        "properties": {
          "folderId": {
            "description": "The folder ID",
            "type": "string",
            "example": "4a9f"
          }
        },
        "type": "object"
      },
      "File": {
        "required": [
          "fileId"
        ],
        "properties": {
          "fileId": {
            "description": "The file ID",
            "type": "string",
            "readOnly": true,
            "example": "6rZ6"
          },
          "fileSize": {
            "description": "The file size",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 579644
          },
          "group": {
            "readOnly": true,
            "$ref": "#/components/schemas/FileGroup"
          },
          "thumbnail": {
            "description": "The direct URL to the file thumbnail",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://us-rs.gr-cdn.com/512x,sBIbGHAUIQfw7kTUjaD0fTzxfXPggsY_1WCWIKl3RAxE=/https://multimedia.getresponse.com/getresponse-ZJtEw/photos/05c53ab1-6119-4076-a96c-bbefa082ea1a.jpg",
            "nullable": true
          },
          "url": {
            "description": "The direct URL to resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://multimedia.getresponse.com/getresponse-ZJtEw/photos/05c53ab1-6119-4076-a96c-bbefa082ea1a.jpg"
          },
          "properties": {
            "description": "The file properties (available only for the `photos` group)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileProperty"
            },
            "maxItems": 2,
            "minItems": 0,
            "readOnly": true
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-10-12T15:15:49+0000"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/file-library/files/6pS"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseFile"
          }
        ]
      },
      "FileProperty": {
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "width",
              "height"
            ],
            "readOnly": true,
            "example": "width"
          },
          "value": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "integer",
                "example": 1980
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "Quota": {
        "properties": {
          "limit": {
            "description": "The total size of available storage space",
            "type": "integer",
            "format": "int64",
            "example": 1048576
          },
          "usage": {
            "description": "The currently used storage space",
            "type": "integer",
            "format": "int64",
            "example": 1024
          }
        },
        "type": "object"
      },
      "Folder": {
        "required": [
          "folderId"
        ],
        "properties": {
          "folderId": {
            "description": "The folder ID",
            "type": "string",
            "readOnly": true,
            "example": "t1G"
          },
          "name": {
            "description": "The folder name",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "example": "sample folder"
          },
          "size": {
            "description": "The size of all files in the directory",
            "type": "integer",
            "format": "int64",
            "example": 9564899
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2019-10-14T17:17:13+0000"
          }
        },
        "type": "object"
      },
      "NewFolder": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The folder name",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "example": "sample folder"
          }
        },
        "type": "object"
      },
      "AbtestsSubjectDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbtestsSubjectListItem"
          },
          {
            "properties": {
              "winnerSendingStart": {
                "description": "Date the winning message was sent on",
                "type": "string",
                "format": "date-time",
                "example": "2015-07-25T20:05:10+0000",
                "nullable": true
              },
              "statistics": {
                "description": "The statistics of A/B test",
                "properties": {
                  "total": {
                    "type": "object",
                    "$ref": "#/components/schemas/AbtestsSubjectStatistics"
                  },
                  "winner": {
                    "type": "object",
                    "$ref": "#/components/schemas/AbtestsSubjectStatistics"
                  }
                },
                "type": "object",
                "readOnly": true
              },
              "variants": {
                "type": "array",
                "items": {
                  "properties": {
                    "variantId": {
                      "description": "The message variant ID. A variant identifier from https://apireference.getresponse.com/#operation/getAbtestsSubjectById.",
                      "type": "string",
                      "readOnly": true,
                      "example": "VpKJdr"
                    },
                    "subject": {
                      "description": "Variant's subject",
                      "type": "string",
                      "maximum": 150,
                      "minimum": 1,
                      "example": "variant"
                    },
                    "isWinner": {
                      "description": "Winning variant",
                      "type": "boolean",
                      "readOnly": true,
                      "example": true
                    },
                    "statistics": {
                      "description": "Variant's statistics",
                      "type": "object",
                      "readOnly": true,
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/AbtestsSubjectStatistics"
                        }
                      ]
                    }
                  },
                  "type": "object"
                }
              },
              "sendSettings": {
                "description": "The send settings for the A/B test",
                "properties": {
                  "selectedCampaigns": {
                    "$ref": "#/components/schemas/MessageSendSettingSelectedCampaigns"
                  },
                  "selectedSegments": {
                    "$ref": "#/components/schemas/MessageSendSettingSelectedSegments"
                  },
                  "selectedSupressions": {
                    "$ref": "#/components/schemas/MessageSendSettingSelectedSuppressions"
                  },
                  "excludedCampaigns": {
                    "$ref": "#/components/schemas/MessageSendSettingExcludedCampaigns"
                  },
                  "excludedSegments": {
                    "$ref": "#/components/schemas/MessageSendSettingExcludedSegments"
                  }
                },
                "type": "object"
              },
              "editor": {
                "description": "The message editor used for the A/B test",
                "type": "string",
                "enum": [
                  "html2",
                  "custom",
                  "text",
                  "editor_v3",
                  "getresponse",
                  "legacy"
                ],
                "nullable": true
              },
              "content": {
                "$ref": "#/components/schemas/MessageContent"
              }
            },
            "type": "object"
          }
        ]
      },
      "AbtestsSubjectStatistics": {
        "properties": {
          "delivered": {
            "description": "The total number of delivered messages (winner and variants combined)",
            "type": "integer",
            "example": 10
          },
          "openRate": {
            "description": "The sum total of opens for the variants and the winner",
            "type": "integer",
            "example": 8
          },
          "clickRate": {
            "description": "The message click rate",
            "type": "integer",
            "example": 8
          }
        },
        "type": "object"
      },
      "AbtestsSubjectListItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AbtestsSubject"
          },
          {
            "properties": {
              "status": {
                "description": "Newsletter status",
                "type": "string",
                "enum": [
                  "active",
                  "inactive",
                  "deleted"
                ],
                "readOnly": true
              },
              "stage": {
                "description": "A/B test stage",
                "type": "string",
                "enum": [
                  "preparing",
                  "testing",
                  "finished",
                  "sending_winner",
                  "cancelled",
                  "draft",
                  "completed"
                ],
                "readOnly": true
              },
              "deliverySettings": {
                "description": "The A/B test delivery settings",
                "properties": {
                  "sendOn": {
                    "description": "Date the newsletter was sent on",
                    "properties": {
                      "date": {
                        "description": "Date the newsletter was sent on",
                        "type": "string",
                        "format": "date-time",
                        "example": "2015-07-25T20:05:10+0000",
                        "nullable": true
                      },
                      "timeZone": {
                        "description": "Time zone in which the newsletter was sent",
                        "properties": {
                          "timeZoneId": {
                            "description": "ID of the time zone the newsletter was sent in",
                            "type": "integer"
                          },
                          "timeZoneName": {
                            "description": "Name of the time zone the newsletter was sent in",
                            "type": "integer",
                            "nullable": true
                          },
                          "timeZoneOffset": {
                            "description": "Time zone, or UTC, offset for when the newsletter was sent",
                            "type": "integer",
                            "nullable": true
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "winnerMode": {
                    "description": "A/B test winner selection mode",
                    "type": "string",
                    "enum": [
                      "automatic",
                      "manual"
                    ]
                  },
                  "winningCriteria": {
                    "description": "A/B test winning criteria",
                    "type": "string",
                    "enum": [
                      "open",
                      "click"
                    ]
                  },
                  "samplingPercentage": {
                    "description": "Size of the test (sampling) group, expressed as a percentage",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 50,
                    "minimum": 1
                  },
                  "samplingTime": {
                    "description": "A/B testing phase duration. The time after which the remaining recipients will be sent the winning message",
                    "type": "string",
                    "format": "ISO-8601 duration",
                    "example": "86400",
                    "nullable": true
                  }
                },
                "type": "object"
              },
              "flags": {
                "type": "array",
                "items": {
                  "description": "Tracking options enabled for the newsletter",
                  "type": "string",
                  "enum": [
                    "clicktrack",
                    "subscription_reminder",
                    "openrate",
                    "google_analytics",
                    "manual_list",
                    "custom_footer",
                    "ecommerce_tracking"
                  ],
                  "readOnly": true
                }
              },
              "createdOn": {
                "description": "Date the A/B test was created on",
                "type": "string",
                "format": "date-time",
                "example": "2015-07-25T20:05:10+0000",
                "nullable": true
              },
              "updatedOn": {
                "description": "Date A/B test was updated on",
                "type": "string",
                "format": "date-time",
                "example": "2015-07-25T20:05:10+0000",
                "nullable": true
              },
              "href": {
                "description": "Direct hyperlink to a resource",
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "example": "https://api.getresponse.com/v3/ab-tests/subject/A3r"
              }
            },
            "type": "object"
          }
        ]
      },
      "AbtestsSubject": {
        "properties": {
          "abTestId": {
            "description": "A/B test ID",
            "type": "string",
            "readOnly": true,
            "example": "A3r"
          },
          "name": {
            "description": "A/B test name",
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "example": "A/B test"
          },
          "campaign": {
            "description": "List linked to A/B test",
            "properties": {
              "campaignId": {
                "description": "Campaign ID",
                "type": "string",
                "example": "C"
              },
              "href": {
                "description": "Direct hyperlink to a resource",
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "example": "https://api.getresponse.com/v3/campaigns/C"
              },
              "name": {
                "description": "The campaign name",
                "type": "string",
                "readOnly": true,
                "example": "Promo campaign",
                "nullable": true
              }
            },
            "type": "object"
          },
          "fromField": {
            "description": "Newsletter's From\" address\"",
            "properties": {
              "fromFieldId": {
                "description": "The 'From' address ID",
                "type": "string",
                "example": "V"
              },
              "href": {
                "description": "Direct hyperlink to a resource",
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "example": "https://api.getresponse.com/v3/from-fields/V"
              }
            },
            "type": "object"
          },
          "replyTo": {
            "description": "Newsletter's reply-to address",
            "properties": {
              "fromFieldId": {
                "description": "The 'From' address ID",
                "type": "string",
                "example": "V"
              },
              "href": {
                "description": "Direct hyperlink to a resource",
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "example": "https://api.getresponse.com/v3/from-fields/V"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "NewAbtestsSubject": {
        "required": [
          "name",
          "href"
        ],
        "type": "object",
        "allOf": [
          {
            "required": [
              "name",
              "campaign",
              "fromField"
            ],
            "properties": {
              "abTestId": {
                "description": "A/B test ID",
                "type": "string",
                "readOnly": true,
                "example": "A3r"
              },
              "name": {
                "description": "A/B test name",
                "type": "string",
                "maxLength": 100,
                "minLength": 1,
                "example": "A/B test"
              },
              "campaign": {
                "description": "List linked to A/B test",
                "type": "object",
                "$ref": "#/components/schemas/CampaignReference"
              },
              "fromField": {
                "description": "Newsletter's From\" address\"",
                "type": "object",
                "$ref": "#/components/schemas/FromFieldReference"
              },
              "replyTo": {
                "description": "Newsletter's reply-to address",
                "type": "object",
                "$ref": "#/components/schemas/FromFieldReference"
              }
            },
            "type": "object"
          },
          {
            "required": [
              "deliverySettings",
              "variants",
              "sendSettings",
              "content"
            ],
            "properties": {
              "deliverySettings": {
                "description": "The A/B test delivery settings",
                "required": [
                  "samplingTime",
                  "winningCriteria",
                  "winnerMode",
                  "sendOn"
                ],
                "properties": {
                  "sendOn": {
                    "description": "Date the newsletter was sent on",
                    "required": [
                      "sendingType"
                    ],
                    "properties": {
                      "sendingType": {
                        "description": "Newsletter send type. Please note that date and timezone are not allowed with the 'now' option",
                        "type": "string",
                        "enum": [
                          "now",
                          "scheduled"
                        ],
                        "example": "scheduled"
                      },
                      "date": {
                        "description": "Date the newsletter was sent on",
                        "type": "string",
                        "format": "Y-m-d H:i:s",
                        "example": "2015-07-25T20:05:10",
                        "nullable": true
                      },
                      "timeZone": {
                        "description": "Time zone in which the newsletter was sent",
                        "required": [
                          "date",
                          "timeZoneId"
                        ],
                        "properties": {
                          "timeZoneId": {
                            "description": "ID of the time zone the newsletter was sent in",
                            "type": "integer",
                            "example": 285
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "winnerMode": {
                    "description": "A/B test winner selection mode",
                    "type": "string",
                    "enum": [
                      "automatic",
                      "manual"
                    ]
                  },
                  "winningCriteria": {
                    "description": "A/B test winning criteria",
                    "type": "string",
                    "enum": [
                      "open",
                      "click"
                    ]
                  },
                  "samplingPercentage": {
                    "description": "Size of the test (sampling) group, expressed as a percentage",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 50,
                    "minimum": 1
                  },
                  "samplingTime": {
                    "description": "A/B testing phase duration. The time after which the remaining recipients will be sent the winning message",
                    "type": "string",
                    "format": "ISO-8601 duration",
                    "example": "P0Y0M0DT5H30M0S",
                    "nullable": true
                  }
                },
                "type": "object"
              },
              "flags": {
                "type": "array",
                "items": {
                  "description": "Tracking options enabled for the newsletter",
                  "type": "string",
                  "enum": [
                    "clicktrack",
                    "google_analytics",
                    "ecommerce_tracking"
                  ]
                }
              },
              "variants": {
                "description": "Message variants. Please note, the number of subject variants should be between 2 and 5",
                "required": [
                  "subject"
                ],
                "type": "array",
                "items": {
                  "properties": {
                    "subject": {
                      "description": "Variant's subject",
                      "type": "string",
                      "maximum": 150,
                      "minimum": 1,
                      "example": "variant"
                    }
                  },
                  "type": "object"
                }
              },
              "sendSettings": {
                "description": "The send settings for the A/B test",
                "properties": {
                  "selectedCampaigns": {
                    "$ref": "#/components/schemas/MessageSendSettingSelectedCampaigns"
                  },
                  "selectedSegments": {
                    "$ref": "#/components/schemas/MessageSendSettingSelectedSegments"
                  },
                  "selectedSupressions": {
                    "$ref": "#/components/schemas/MessageSendSettingSelectedSuppressions"
                  },
                  "excludedCampaigns": {
                    "$ref": "#/components/schemas/MessageSendSettingExcludedCampaigns"
                  },
                  "excludedSegments": {
                    "$ref": "#/components/schemas/MessageSendSettingExcludedSegments"
                  }
                },
                "type": "object"
              },
              "content": {
                "$ref": "#/components/schemas/MessageContent"
              }
            },
            "type": "object"
          }
        ]
      },
      "ChooseWinnerAbtestsSubject": {
        "required": [
          "variantId"
        ],
        "properties": {
          "variantId": {
            "description": "The message variant ID. A variant identifier from https://apireference.getresponse.com/#operation/getAbtestsSubjectById.",
            "type": "string",
            "example": "VpKJdr"
          }
        },
        "type": "object"
      },
      "ClickTrackResource": {
        "properties": {
          "clickTrackId": {
            "type": "string",
            "example": "C12t"
          },
          "name": {
            "description": "The name (label) of a click track",
            "type": "string",
            "example": "Click here"
          },
          "url": {
            "description": "The link URL of a click track",
            "type": "string",
            "format": "uri",
            "example": "https://example.com/shop"
          },
          "clicks": {
            "description": "The number of clicks counted for a click track",
            "type": "integer",
            "format": "int64",
            "example": 25951
          },
          "message": {
            "type": "object",
            "$ref": "#/components/schemas/ClickTrackMessage"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "example": "https://api.getresponse.com/v3/click-tracks/C12t"
          }
        },
        "type": "object"
      },
      "ClickTrackMessage": {
        "description": "The source message reference for a click track",
        "properties": {
          "resourceId": {
            "description": "The ID identifying message resource",
            "type": "string",
            "example": "r35N"
          },
          "type": {
            "description": "The message type",
            "type": "string",
            "enum": [
              "broadcast",
              "automation",
              "autoresponder",
              "rss",
              "splittest",
              "sms"
            ],
            "example": "broadcast"
          },
          "createdOn": {
            "description": "The message creation date",
            "type": "string",
            "format": "date-time",
            "example": "2019-12-01T08:21:28+0000"
          },
          "resourceType": {
            "description": "Type of the resource that represents the message in the API",
            "type": "string",
            "enum": [
              "newsletters",
              "autoresponders",
              "rss-newsletters",
              "splittests",
              "sms"
            ],
            "example": "newsletters"
          },
          "href": {
            "description": "Direct URL to the resource that represents the message",
            "type": "string",
            "format": "uri",
            "example": "https://api.getresponse.com/v3/newsletters/r35N"
          }
        },
        "type": "object"
      },
      "MessageStatisticsListElement": {
        "properties": {
          "timeInterval": {
            "description": "The statistics time frame in the ISO 8601 datetime format with duration interval",
            "type": "string",
            "pattern": "/^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?(\\/)P(?=\\w*\\d)(?:\\d+Y|Y)?(?:\\d+M|M)?(?:\\d+W|W)?(?:\\d+D|D)?(?:T(?:\\d+H|H)?(?:\\d+M|M)?(?:\\d+(?:\\­.\\d{1,2})?S|S)?)?$/",
            "example": "2014-09-20T00:00:00+0000/P2M18DT10H0M0S"
          },
          "sent": {
            "type": "integer",
            "format": "int32"
          },
          "totalOpened": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueOpened": {
            "type": "integer",
            "format": "int32"
          },
          "totalClicked": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueClicked": {
            "type": "integer",
            "format": "int32"
          },
          "goals": {
            "type": "integer",
            "format": "int32"
          },
          "uniqueGoals": {
            "type": "integer",
            "format": "int32"
          },
          "forwarded": {
            "type": "integer",
            "format": "int32"
          },
          "unsubscribed": {
            "type": "integer",
            "format": "int32"
          },
          "bounced": {
            "type": "integer",
            "format": "int32"
          },
          "complaints": {
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SendNewsletterDraft": {
        "required": [
          "messageId",
          "sendSettings"
        ],
        "properties": {
          "messageId": {
            "description": "The message identifier (equals to newsletterId)",
            "type": "string",
            "example": "N"
          },
          "sendSettings": {
            "description": "How the message will be delivered to the subscriber",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewsletterSendSettingsDetails"
              }
            ]
          }
        },
        "type": "object"
      },
      "NewsletterAttachment": {
        "properties": {
          "fileName": {
            "description": "The file name",
            "type": "string",
            "example": "some_file.jpg"
          },
          "content": {
            "description": "The base64 encoded file content",
            "type": "string",
            "format": "byte",
            "example": "sdfadsfetsdjfdskafdsaf=="
          },
          "mimeType": {
            "description": "The file mime type",
            "type": "string",
            "example": "image/jpeg"
          }
        },
        "type": "object"
      },
      "ExternalLexpad": {
        "description": "External Lexpad settings for the message, read more: [External Lexpad](https://apidocs.getresponse.com/v3/dynamic-content/external-lexpad)",
        "required": [
          "dataSourceUrl"
        ],
        "properties": {
          "dataSourceUrl": {
            "description": "URL to the endpoint that will provide data for External Lexpad",
            "type": "string",
            "format": "uri",
            "maxLength": 2048,
            "minLength": 1,
            "example": "https://example.com/external_lexpad"
          },
          "dataSourceToken": {
            "description": "Token that will be sent in `X-Auth-Token` header to authenticate the requests made to the endpoint",
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "cf4dfca78434bf927a7655c0c4d95a2a45c33b71",
            "nullable": true
          }
        },
        "type": "object"
      },
      "TimeZone": {
        "required": [
          "timeZoneId"
        ],
        "properties": {
          "timeZoneId": {
            "description": "Time zone ID: [Link to resource](https://apireference.getresponse.com/#operation/getTimezones)",
            "type": "integer",
            "example": 282
          }
        },
        "type": "object"
      },
      "NewsletterSendSettingsDetails": {
        "properties": {
          "selectedCampaigns": {
            "description": "The list of selected campaigns",
            "items": {
              "type": "string",
              "example": "V"
            }
          },
          "selectedSegments": {
            "description": "The list of selected segments",
            "items": {
              "type": "string",
              "example": "S"
            }
          },
          "selectedSuppressions": {
            "description": "The list of selected suppressions (suppressions exclude contacts)",
            "items": {
              "type": "string",
              "example": "Se"
            }
          },
          "excludedCampaigns": {
            "description": "The list of excluded campaigns",
            "items": {
              "type": "string",
              "example": "O"
            }
          },
          "excludedSegments": {
            "description": "The list of excluded segments",
            "items": {
              "type": "string",
              "example": "R"
            }
          },
          "selectedContacts": {
            "description": "The list of selected contacts",
            "items": {
              "type": "string",
              "example": "Qs"
            }
          },
          "timeTravel": {
            "description": "Use the time travel functionality. This means that the system will match the scheduled sending hour for the message to the time zone of each recipient. As a result, sending may take up to 24 hours.",
            "example": "true",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "perfectTiming": {
            "description": "Use the perfect timing functionality",
            "example": "false",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "externalLexpad": {
            "description": "External Lexpad settings for the message, read more: [External Lexpad](https://apidocs.getresponse.com/v3/dynamic-content/external-lexpad)",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalLexpad"
              }
            ]
          },
          "sendOn": {
            "description": "The scheduled send date and time for the newsletter. **Please note:** To send your message immediately, omit the `sendOn` section",
            "required": [
              "date",
              "timeZone"
            ],
            "properties": {
              "date": {
                "description": "The scheduled send date and time for the newsletter in the ISO 8601 format",
                "type": "string",
                "format": "date-time",
                "example": "2024-07-14T07:00:00",
                "nullable": false
              },
              "timeZone": {
                "description": "The time zone in which the newsletter is to be sent",
                "nullable": false,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TimeZone"
                  }
                ]
              }
            },
            "type": "object",
            "writeOnly": true,
            "nullable": false
          }
        },
        "type": "object"
      },
      "Newsletter": {
        "required": [
          "newsletterId",
          "href"
        ],
        "properties": {
          "newsletterId": {
            "description": "The newsletter ID",
            "type": "string",
            "readOnly": true,
            "example": "N"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/newsletters/N"
          },
          "name": {
            "description": "The newsletter name",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "New message"
          },
          "type": {
            "description": "The newsletter type",
            "type": "string",
            "default": "broadcast",
            "enum": [
              "broadcast",
              "draft"
            ]
          },
          "status": {
            "description": "The newsletter status",
            "readOnly": true,
            "example": "enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ]
          },
          "editor": {
            "description": "This describes how the content of the message was created",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageEditorEnum"
              }
            ]
          },
          "subject": {
            "description": "The message subject",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "Annual report"
          },
          "fromField": {
            "description": "The 'From' email address used for the message",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "replyTo": {
            "description": "The email that will be used as the reply-to address",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "campaign": {
            "description": "The newsletter must be assigned to a campaign",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignReference"
              }
            ]
          },
          "sendOn": {
            "description": "The scheduled send date and time for the newsletter in the ISO 8601 format.",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "attachments": {
            "description": "The newsletter attachments. The size of all attachments combined can't exceed 400KB",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewsletterAttachment"
            }
          },
          "sendSettings": {
            "description": "How the message will be delivered to the subscriber. You can specify multiple parameters. Then the system uses AND logic.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewsletterSendSettingsDetails"
              }
            ]
          },
          "sendMetrics": {
            "description": "The sending metrics",
            "type": "object",
            "readOnly": true,
            "allOf": [
              {
                "properties": {
                  "status": {
                    "type": "string",
                    "default": "finished",
                    "enum": [
                      "scheduled",
                      "in_progress",
                      "finished"
                    ]
                  },
                  "sent": {
                    "description": "Messages already sent",
                    "type": "string",
                    "default": "0"
                  },
                  "total": {
                    "description": "The total amount of messages to send",
                    "type": "string",
                    "default": "0"
                  }
                },
                "type": "object"
              }
            ]
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "NewNewsletter": {
        "required": [
          "subject",
          "fromField",
          "campaign",
          "content",
          "sendSettings"
        ],
        "properties": {
          "content": {
            "$ref": "#/components/schemas/MessageContent"
          },
          "flags": {
            "$ref": "#/components/schemas/MessageFlagsArray"
          },
          "name": {
            "description": "The newsletter name",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "New message"
          },
          "type": {
            "description": "The newsletter type",
            "type": "string",
            "default": "broadcast",
            "enum": [
              "broadcast",
              "draft"
            ]
          },
          "editor": {
            "description": "This describes how the content of the message was created",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageEditorEnum"
              }
            ]
          },
          "subject": {
            "description": "The message subject",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "Annual report"
          },
          "fromField": {
            "description": "The 'From' email address used for the message",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "replyTo": {
            "description": "The email that will be used as the reply-to address",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "campaign": {
            "description": "The newsletter must be assigned to a campaign",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignReference"
              }
            ]
          },
          "attachments": {
            "description": "The newsletter attachments. The size of all attachments combined can't exceed 400KB",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewsletterAttachment"
            }
          },
          "sendSettings": {
            "description": "How the message will be delivered to the subscriber. You can specify multiple parameters. Then the system uses AND logic.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewsletterSendSettingsDetails"
              }
            ]
          }
        },
        "type": "object"
      },
      "NewsletterDetails": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/MessageContent"
          },
          "clickTracks": {
            "description": "The list of tracked links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClickTrack"
            }
          },
          "flags": {
            "$ref": "#/components/schemas/MessageFlagsArray"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Newsletter"
          }
        ]
      },
      "NewsletterListElement": {
        "required": [
          "newsletterId",
          "href"
        ],
        "properties": {
          "newsletterId": {
            "description": "The newsletter ID",
            "type": "string",
            "readOnly": true,
            "example": "N"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/newsletters/N"
          },
          "name": {
            "description": "The newsletter name",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "New message"
          },
          "type": {
            "description": "The newsletter type",
            "type": "string",
            "default": "broadcast",
            "enum": [
              "broadcast",
              "draft"
            ]
          },
          "status": {
            "description": "The newsletter status",
            "readOnly": true,
            "example": "enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ]
          },
          "editor": {
            "description": "This describes how the content of the message was created",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageEditorEnum"
              }
            ]
          },
          "subject": {
            "description": "The message subject",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "Annual report"
          },
          "campaign": {
            "description": "The newsletter must be assigned to a campaign",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignReference"
              }
            ]
          },
          "sendOn": {
            "description": "The scheduled send date and time for the newsletter in the ISO 8601 format.",
            "type": "string",
            "format": "date-time"
          },
          "sendSettings": {
            "description": "How the message will be delivered to the subscriber. You can specify multiple parameters. Then the system uses AND logic.",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewsletterSendSettingsListing"
              }
            ]
          },
          "sendMetrics": {
            "description": "The sending metrics",
            "type": "object",
            "readOnly": true,
            "allOf": [
              {
                "properties": {
                  "status": {
                    "type": "string",
                    "default": "finished",
                    "enum": [
                      "scheduled",
                      "in_progress",
                      "finished"
                    ]
                  },
                  "sent": {
                    "description": "Messages already sent",
                    "type": "string",
                    "default": "0"
                  },
                  "total": {
                    "description": "The total amount of messages to send",
                    "type": "string",
                    "default": "0"
                  }
                },
                "type": "object"
              }
            ]
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "flags": {
            "$ref": "#/components/schemas/MessageFlagsString"
          }
        },
        "type": "object"
      },
      "NewsletterSendSettingsListing": {
        "properties": {
          "timeTravel": {
            "description": "Use the time travel functionality. This means that the system will match the scheduled sending hour for the message to the time zone of each recipient. As a result, sending may take up to 24 hours.",
            "example": "true",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "perfectTiming": {
            "description": "Use the perfect timing functionality",
            "example": "false",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          }
        },
        "type": "object"
      },
      "ClickTrack": {
        "properties": {
          "clickTrackId": {
            "type": "string",
            "example": "C"
          },
          "url": {
            "description": "The tracked link",
            "type": "string",
            "format": "uri",
            "example": "https://example.com"
          },
          "name": {
            "description": "The tracked link name",
            "type": "string",
            "example": "press here"
          },
          "amount": {
            "description": "The number of clicks on a link in a message",
            "type": "string",
            "example": "15"
          }
        },
        "type": "object"
      },
      "NewsletterActivity": {
        "properties": {
          "activity": {
            "description": "The type of activity",
            "type": "string",
            "enum": [
              "send",
              "open",
              "click"
            ]
          },
          "createdOn": {
            "description": "The date when activity occurred",
            "type": "string",
            "format": "date-time",
            "example": "2019-10-21T11:08:45+0000"
          },
          "contact": {
            "description": "The contact ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/NewsletterActivityContactReference"
              }
            ]
          }
        },
        "type": "object"
      },
      "NewsletterActivityContactReference": {
        "properties": {
          "contactId": {
            "description": "The contact ID",
            "type": "string",
            "example": "pV3r"
          },
          "email": {
            "description": "The contact email",
            "type": "string",
            "example": "contact@domain.com"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "example": "https://api.getresponse.com/v3/contacts/pV3r"
          }
        },
        "type": "object"
      },
      "BaseTag": {
        "properties": {
          "name": {
            "description": "The tag name",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "pattern": "^[_a-zA-Z0-9]{2,64}$",
            "example": "My_Tag"
          },
          "color": {
            "description": "The tag color (deprecated)",
            "type": "string",
            "readOnly": true,
            "deprecated": true
          }
        },
        "type": "object"
      },
      "TagDetails": {
        "properties": {
          "tagId": {
            "description": "The tag ID.",
            "type": "string",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-07-20T06:24:14+0000"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTag"
          }
        ]
      },
      "Tag": {
        "properties": {
          "tagId": {
            "description": "The tag ID",
            "type": "string",
            "readOnly": true,
            "example": "vBd5"
          },
          "href": {
            "description": "The direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/tags/vBd5"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-11-20T08:00:00+0000"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTag"
          }
        ]
      },
      "NewTag": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTag"
          }
        ]
      },
      "UpdateTag": {
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTag"
          }
        ]
      },
      "Blocklist": {
        "properties": {
          "masks": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "jack@somedomain.com"
            }
          }
        },
        "type": "object"
      },
      "UpdateBlocklist": {
        "required": [
          "masks"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Blocklist"
          }
        ]
      },
      "CustomFieldReference": {
        "required": [
          "customField"
        ],
        "properties": {
          "customFieldId": {
            "type": "string",
            "readOnly": true,
            "example": "pas"
          },
          "name": {
            "description": "\nThe name of the custom field. It must meet the following requirements:\n * be unique\n * use only lowercase letters, underscores and digits: [a-z0-9_]{1,128}\n * not be equal to one of the merge words used in messages, i.e. `name`, `email`, `twitter`, `facebook`, `buzz`, `myspace`, `linkedin`, `digg`, `googleplus`, `pinterest`, `responder`, `campaign`, `change`.",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "example": "color"
          },
          "values": {
            "description": "The list of assigned default values, starting from zero depending on the custom field format. (Please see description).",
            "type": "array",
            "items": {
              "type": "string",
              "example": "red"
            }
          }
        },
        "type": "object"
      },
      "UpdateCustomField": {
        "required": [
          "hidden",
          "values"
        ],
        "properties": {
          "hidden": {
            "description": "Whether the custom field is visible to contacts",
            "example": "false",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "values": {
            "description": "The list of assigned values (zero or more - depending on the custom field type. Please see description)",
            "type": "array",
            "items": {
              "type": "string",
              "example": "+48600100200"
            }
          }
        },
        "type": "object"
      },
      "CustomFieldTypeEnum": {
        "type": "string",
        "enum": [
          "string",
          "number",
          "date",
          "datetime",
          "country",
          "currency",
          "phone",
          "gender",
          "ip",
          "url"
        ]
      },
      "CustomFieldFormatEnum": {
        "type": "string",
        "enum": [
          "text",
          "textarea",
          "radio",
          "checkbox",
          "single_select",
          "multi_select"
        ]
      },
      "CustomField": {
        "properties": {
          "customFieldId": {
            "description": "Custom field ID",
            "type": "string",
            "readOnly": true,
            "example": "pas"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/custom-fields/pas"
          },
          "name": {
            "description": "The name of the custom field. It must meet the following requirements:\n * be unique\n * use only lowercase letters, underscores and digits\n * not be equal to one of the merge words used in messages, i.e. `name, email, twitter, facebook, buzz, myspace, linkedin, digg, googleplus, pinterest, responder, campaign, change`.",
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "example": "office_phone_number"
          },
          "type": {
            "description": "The custom field `type` accepts the following values:\n * `string` - input for a string value\n * `number` - input for a numeric value\n * `date` - input for a date\n * `datetime` - input for date and time\n * `country` - input for a country\n * `currency` - input for a currency, allows all ISO 4217 currency codes\n * `phone` - input for a phone number\n * `gender` - input for gender, allows `Male`, `Female` or `Prefer not to say`\n * `ip` - input for an IP address\n * `url` - input for a URL.",
            "example": "phone",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomFieldTypeEnum"
              }
            ]
          },
          "valueType": {
            "description": "Type of returning value, it returns `type` options extended by a `string` option if the `format` was not defined",
            "type": "string",
            "enum": [
              "string",
              "number",
              "date",
              "datetime",
              "country",
              "currency",
              "phone",
              "gender",
              "ip",
              "url"
            ],
            "readOnly": true,
            "example": "phone"
          },
          "format": {
            "description": "The custom field `format` accepts following values:\n * `text` - text input (doesn't require values in the `values` field, you can pass empty array)\n * `textarea` - textarea input (doesn't require values in the `values` field, you can pass empty array)\n * `radio` - radio input (requires at least 2 values in the `values` field)\n * `checkbox` - checkbox input (doesn't require values in the `values` field, you can pass empty array)\n * `single_select` - single select input (requires at least 2 values in the `values` field)\n * `multi_select` - multi select input (requires at least 2 values in the `values` field).",
            "example": "text",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomFieldFormatEnum"
              }
            ]
          },
          "fieldType": {
            "description": "Returns the same as `format`",
            "type": "string",
            "readOnly": true,
            "example": "text",
            "deprecated": true
          },
          "hidden": {
            "description": "Whether the custom field is visible to contacts",
            "example": "false",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "values": {
            "description": "The list of assigned default values, starting from zero depending on the custom field format. (Please see description).",
            "type": "array",
            "items": {
              "type": "string",
              "example": "+48600100200"
            }
          }
        },
        "type": "object"
      },
      "CustomFieldResponse": {
        "properties": {
          "customFieldId": {
            "description": "Custom field ID",
            "type": "string",
            "readOnly": true,
            "example": "pas"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/custom-fields/pas"
          },
          "name": {
            "description": "The name of the custom field",
            "type": "string",
            "example": "office_phone_number"
          },
          "type": {
            "example": "phone",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomFieldTypeEnum"
              }
            ]
          },
          "valueType": {
            "description": "Type of returning value, it returns `type` options extended by a `string` option if the `format` was not defined",
            "type": "string",
            "readOnly": true,
            "example": "radio"
          },
          "format": {
            "example": "text",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomFieldFormatEnum"
              }
            ]
          },
          "fieldType": {
            "description": "Returns the same as `format`",
            "type": "string",
            "readOnly": true,
            "example": "text",
            "deprecated": true
          },
          "hidden": {
            "description": "Whether the custom field is visible to contacts",
            "example": "false",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "values": {
            "description": "The list of assigned default values, starting from zero depending on the custom field format. (Please see description).",
            "type": "array",
            "items": {
              "type": "string",
              "example": "+48600100200"
            }
          }
        },
        "type": "object"
      },
      "NewCustomField": {
        "required": [
          "name",
          "type",
          "format",
          "hidden",
          "values"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomField"
          }
        ]
      },
      "Lps": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/LpsListItem"
          },
          {
            "properties": {
              "statistics": {
                "description": "The landing page statistics",
                "$ref": "#/components/schemas/LpsListItemStatistics"
              }
            },
            "type": "object"
          }
        ]
      },
      "LpsListItem": {
        "properties": {
          "lpsId": {
            "description": "The landing page ID",
            "type": "string",
            "readOnly": true,
            "example": "ce84fabc-1349-4992-a2d7-0c44c5534128"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/lps/6b0d7d59-71d9-4708-80a6-aa0f13805111"
          },
          "name": {
            "description": "The landing page name",
            "type": "string",
            "example": "Predesigned #017"
          },
          "status": {
            "description": "The landing page status",
            "type": "string",
            "enum": [
              "published",
              "unpublished"
            ],
            "readOnly": true
          },
          "domainUrl": {
            "description": "The landing page domain",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "predesigned-017-52612.grweb.site"
          },
          "thumbnailUrl": {
            "description": "The URL of a landing page thumbnail",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://us-wbe-img2.gr-cdn.com/user/e5c2094a-2354-459f-9b9f-6d0369ccae2c/6b0d7d59-71d9-4708-80a6-aa0f13805111.png?width=208"
          },
          "isChatsEnabled": {
            "description": "Chats is enabled on the landing page",
            "example": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "createdAt": {
            "description": "The date (in GMT) the landing page was created",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-14T14:42:57"
          },
          "updatedAt": {
            "description": "The date (in GMT) the landing page was updated",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-14T14:42:57"
          }
        },
        "type": "object"
      },
      "LpsListItemStatistics": {
        "properties": {
          "visits": {
            "description": "The number of browsing sessions initiated on your landing page",
            "type": "integer",
            "format": "int64",
            "example": 9
          },
          "leads": {
            "description": "Number of leads",
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "subscriptionRate": {
            "description": "The number of leads divided by the number of visitors, shown as a percentage",
            "type": "integer",
            "format": "int64",
            "example": 52
          }
        },
        "type": "object"
      },
      "LpsDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/LpsListItem"
          },
          {
            "$ref": "#/components/schemas/LpsDetailsStatistics"
          },
          {
            "properties": {
              "pages": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LpsPage"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "LpsDetailsStatistics": {
        "properties": {
          "pageViews": {
            "description": "The total number of times your landing page was viewed or refreshed",
            "type": "integer",
            "format": "int64",
            "example": 9
          },
          "visits": {
            "description": "The number of browsing sessions initiated on your landing page",
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "uniqueVisitors": {
            "description": "The number of people who visited your landing page",
            "type": "integer",
            "format": "int64",
            "example": 5
          }
        },
        "type": "object"
      },
      "LpsPage": {
        "properties": {
          "uuid": {
            "description": "The ID of a page associated with the landing page (i.e., 404 page and thank you page)",
            "type": "string",
            "readOnly": true,
            "example": "6ee7597f-9bde-4b92-9411-2fb228c9fa34"
          },
          "name": {
            "description": "The name of a page associated with the landing page (i.e., 404 page and thank you page)",
            "type": "string",
            "example": "Home"
          },
          "status": {
            "description": "The status of a page associated with the landing page (i.e., 404 page or thank you page)",
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "url": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "/terms-of-service"
          },
          "redirectUrl": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": ""
          },
          "createdAt": {
            "description": "The date (in GMT) a page associated with the landing page (i.e., 404 page or thank you page) was created",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-14T14:42:57"
          }
        },
        "type": "object"
      },
      "LpsStats": {
        "required": [
          "lpsId"
        ],
        "properties": {
          "lpsId": {
            "description": "The landing page ID",
            "type": "string",
            "example": "6ee7597f-9bde-4b92-9411-2fb228c9fa34"
          },
          "name": {
            "type": "string",
            "example": "Some example landing page"
          },
          "pageViews": {
            "description": "The total number of times your landing page was viewed or refreshed",
            "type": "integer",
            "format": "int64",
            "example": 9
          },
          "visits": {
            "description": "The number of browsing sessions initiated on your landing page",
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "uniqueVisitors": {
            "description": "The number of people who visited your landing page",
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "thumbnailUrl": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://us-wbe-img2.gr-cdn.com/user/X/Y.webp"
          }
        },
        "type": "object"
      },
      "ImageDetails": {
        "properties": {
          "imageId": {
            "description": "Image ID",
            "type": "string",
            "example": "123456"
          },
          "originalImageUrl": {
            "description": "URL from which image was downloaded",
            "type": "string",
            "format": "uri",
            "example": "http://somesite.example.com/my_image.jpg",
            "nullable": true
          },
          "size": {
            "description": "Size in bytes",
            "type": "string",
            "example": "1234567"
          },
          "name": {
            "description": "Original name",
            "type": "string",
            "example": "original_image"
          },
          "thumbnailUrl": {
            "description": "Thumbnail URL",
            "type": "string",
            "format": "uri",
            "example": "https://us-re.gr-cdn.com/114x/https://multimedia.getresponse.com/getresponse-hUXzv/photos/123456.jpg"
          },
          "url": {
            "description": "Asset URL",
            "type": "string",
            "format": "uri",
            "example": "https://multimedia.getresponse.com/getresponse-hUXzv/photos/123456.jpg"
          },
          "extension": {
            "description": "File extension",
            "type": "string",
            "enum": [
              "jpg",
              "gif",
              "png",
              "jpeg",
              "bmp"
            ],
            "example": "jpg"
          }
        },
        "type": "object"
      },
      "CreateMultimedia": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary"
          }
        },
        "type": "object"
      },
      "Tracking": {
        "properties": {
          "grid": {
            "type": "string",
            "readOnly": true,
            "example": "2fEBK5kj4ReCxUvd"
          },
          "snippet": {
            "type": "string",
            "readOnly": true,
            "example": "\u003Cscript type=\"text/javascript\" src=\"script_url_will_be_here\" async\u003E\u003C/script\u003E"
          },
          "snippetV2": {
            "type": "string",
            "readOnly": true,
            "example": "\u003Cscript type=\"text/javascript\"\u003Efunction () {}\u003C/script\u003E"
          }
        },
        "type": "object"
      },
      "FacebookPixel": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "integration-pixel"
          },
          "pixelId": {
            "type": "string",
            "readOnly": true,
            "example": "123"
          }
        },
        "type": "object"
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "enabled",
          "disabled"
        ]
      },
      "StringBooleanEnum": {
        "type": "string",
        "enum": [
          "true",
          "false"
        ]
      },
      "SortOrderEnum": {
        "type": "string",
        "enum": [
          "ASC",
          "DESC"
        ]
      },
      "DateOrDateTime": {
        "oneOf": [
          {
            "type": "string",
            "format": "date",
            "example": "2018-04-15"
          },
          {
            "type": "string",
            "format": "date-time",
            "example": "2018-01-15T13:30:42+0000"
          }
        ]
      },
      "ErrorResponse": {
        "required": [
          "httpStatus",
          "code",
          "codeDescription",
          "message",
          "moreInfo",
          "context",
          "uuid"
        ],
        "properties": {
          "httpStatus": {
            "description": "HTTP response code",
            "type": "integer",
            "format": "int32"
          },
          "code": {
            "description": "API error code",
            "type": "integer",
            "format": "int32"
          },
          "codeDescription": {
            "description": "API error code description",
            "type": "string"
          },
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "moreInfo": {
            "description": "URL to error description in the API Docs",
            "type": "string"
          },
          "context": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uuid": {
            "description": "UUID of the error response",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SendingLimitsListItem": {
        "properties": {
          "timeFrame": {
            "description": "Time frame, measured in seconds",
            "type": "integer",
            "example": 2592000
          },
          "limit": {
            "description": "The number of email sends available within a given time frame",
            "type": "integer",
            "example": 2500
          },
          "used": {
            "description": "The number of email sends used within the given time frame",
            "type": "integer",
            "example": 0
          }
        },
        "type": "object"
      },
      "UpdateAccount": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Account"
          }
        ]
      },
      "Account": {
        "properties": {
          "accountId": {
            "description": "Account ID",
            "type": "string",
            "readOnly": true,
            "example": "VfEy1"
          },
          "email": {
            "description": "Email",
            "type": "string",
            "format": "email",
            "readOnly": true,
            "example": "john.smith@test.com"
          },
          "countryCode": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountDetailsCountryCode"
              }
            ]
          },
          "industryTag": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryTagId"
              }
            ]
          },
          "timeZone": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TimezoneName"
              },
              {
                "$ref": "#/components/schemas/TimezoneOffset"
              }
            ]
          },
          "href": {
            "description": "Direct URL to resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/accounts"
          },
          "firstName": {
            "description": "First name",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "John"
          },
          "lastName": {
            "description": "Last name",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "Smith"
          },
          "companyName": {
            "description": "Company name",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "MyBigCompany"
          },
          "phone": {
            "description": "Phone number",
            "type": "string",
            "maxLength": 32,
            "minLength": 2,
            "example": "+00155555555"
          },
          "state": {
            "description": "State",
            "type": "string",
            "maxLength": 40,
            "minLength": 2,
            "example": "Oklahoma"
          },
          "city": {
            "description": "City",
            "type": "string",
            "example": "Alderson"
          },
          "street": {
            "description": "Street",
            "type": "string",
            "maxLength": 64,
            "minLength": 2,
            "example": "Sunset blv."
          },
          "zipCode": {
            "description": "ZIP Code",
            "type": "string",
            "maxLength": 9,
            "minLength": 2,
            "example": "81-611"
          },
          "numberOfEmployees": {
            "description": "Numbers of employees",
            "type": "string",
            "enum": [
              "50",
              "250",
              "500",
              "more"
            ],
            "example": "500"
          },
          "timeFormat": {
            "description": "Account time notation",
            "type": "string",
            "enum": [
              "12h",
              "24h"
            ],
            "example": "24h"
          }
        },
        "type": "object"
      },
      "IndustryTagId": {
        "properties": {
          "industryTagId": {
            "description": "Industry tag ID",
            "type": "string",
            "format": "integer",
            "example": "1"
          }
        },
        "type": "object"
      },
      "IndustryTagProperties": {
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "example": "Marketing agencies"
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "example": "Marketing agencies big and small, with fluent and wise agents..."
          }
        },
        "type": "object"
      },
      "IndustryTag": {
        "required": [
          "industryTagId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IndustryTagId"
          },
          {
            "$ref": "#/components/schemas/IndustryTagProperties"
          }
        ]
      },
      "TimezoneName": {
        "properties": {
          "name": {
            "description": "Time zone name as defined by https://en.wikipedia.org/wiki/List_of_tz_database_time_zones",
            "type": "string",
            "example": "Europe/Warsaw"
          }
        },
        "type": "object"
      },
      "TimezoneOffset": {
        "properties": {
          "offset": {
            "type": "string",
            "pattern": "/^(?:Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])$/",
            "example": "+01:00"
          }
        },
        "type": "object"
      },
      "TimezoneId": {
        "properties": {
          "timezoneId": {
            "type": "integer",
            "format": "int32",
            "example": 1
          }
        },
        "type": "object"
      },
      "TimezoneCountry": {
        "properties": {
          "country": {
            "type": "string",
            "example": "Poland"
          }
        },
        "type": "object"
      },
      "Timezone": {
        "required": [
          "timezoneId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/TimezoneId"
          },
          {
            "$ref": "#/components/schemas/TimezoneName"
          },
          {
            "$ref": "#/components/schemas/TimezoneOffset"
          },
          {
            "$ref": "#/components/schemas/TimezoneCountry"
          }
        ]
      },
      "AccountsLoginHistoryListElement": {
        "properties": {
          "loginTime": {
            "description": "Login time",
            "type": "string",
            "format": "date-time",
            "example": "2004-02-12T15:19:21+0000"
          },
          "logoutTime": {
            "description": "Logout time",
            "type": "string",
            "format": "date-time",
            "example": "2004-02-12T15:19:21+0000",
            "nullable": true
          },
          "isSuccessful": {
            "description": "Login was successful",
            "example": "true",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "ip": {
            "description": "IP address",
            "type": "string",
            "format": "ipv4",
            "example": "192.0.0.1"
          }
        },
        "type": "object"
      },
      "CallbackActions": {
        "properties": {
          "open": {
            "description": "Is `open` callback enabled",
            "type": "boolean"
          },
          "click": {
            "description": "Is `click` callback enabled",
            "type": "boolean"
          },
          "goal": {
            "description": "Is `goal` callback enabled",
            "type": "boolean"
          },
          "subscribe": {
            "description": "Is `subscribe` callback enabled",
            "type": "boolean"
          },
          "unsubscribe": {
            "description": "Is `unsubscribe` callback enabled",
            "type": "boolean"
          },
          "survey": {
            "description": "Is `survey` callback enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Callback": {
        "properties": {
          "url": {
            "description": "URL to use to post notifications",
            "format": "uri"
          },
          "actions": {
            "$ref": "#/components/schemas/CallbackActions"
          }
        },
        "type": "object"
      },
      "AccountDetailsCountryCode": {
        "properties": {
          "countryCodeId": {
            "description": "Country code ID",
            "type": "string",
            "example": "175"
          },
          "countryCode": {
            "description": "Country code",
            "type": "string",
            "example": "PL"
          }
        },
        "type": "object"
      },
      "UpdateAccountBadge": {
        "required": [
          "status"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountBadgeDetails"
          }
        ]
      },
      "AccountBadgeDetails": {
        "properties": {
          "status": {
            "description": "Current badge status",
            "example": "enabled",
            "$ref": "#/components/schemas/StatusEnum"
          }
        },
        "type": "object"
      },
      "AccountBilling": {
        "properties": {
          "listSize": {
            "description": "Billing plan maximum list size",
            "type": "string",
            "example": "2500"
          },
          "paymentPlan": {
            "description": "Payment plan",
            "type": "string",
            "enum": [
              "Free Trial",
              "Monthly",
              "12 Months",
              "24 Months"
            ],
            "example": "Monthly"
          },
          "subscriptionPrice": {
            "description": "Subscription price",
            "type": "integer",
            "example": 25
          },
          "renewalDate": {
            "description": "Subscription reneval date",
            "type": "string",
            "format": "date",
            "example": "2017-01-01"
          },
          "currencyCode": {
            "description": "Currency code compliant with ISO-4217",
            "type": "string",
            "example": "USD"
          },
          "accountBalance": {
            "description": "Account balance",
            "type": "string",
            "example": "-15.00"
          },
          "price": {
            "description": "Price",
            "type": "integer",
            "example": 25
          },
          "paymentMethod": {
            "description": "Payment method",
            "type": "string",
            "enum": [
              "outside_system",
              "inside_system",
              "credit_card",
              "platnosci_pl",
              "direct_debit",
              "paypal",
              "yandex",
              "alipay",
              "alipay_mobile",
              "boleto",
              "ideal",
              "qiwi",
              "sofort",
              "webmoney"
            ],
            "example": "credit_card"
          },
          "creditCard": {
            "type": "object",
            "nullable": true,
            "allOf": [
              {
                "properties": {
                  "number": {
                    "description": "Masked credit card number",
                    "type": "string",
                    "example": "XXXXXXXXX0123"
                  }
                },
                "type": "object"
              },
              {
                "properties": {
                  "expirationDate": {
                    "description": "Expiration date",
                    "type": "string",
                    "format": "date",
                    "example": "2014-01-01"
                  }
                },
                "type": "object"
              }
            ]
          },
          "addons": {
            "description": "Addons",
            "type": "array",
            "items": {
              "properties": {
                "name": {
                  "description": "Addon name",
                  "type": "string",
                  "example": "Landing Page Creator"
                },
                "price": {
                  "description": "Addon price",
                  "type": "integer",
                  "example": 15
                },
                "active": {
                  "description": "Addon active status",
                  "example": "true",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StringBooleanEnum"
                    }
                  ]
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "SubscriptionsByDatesStatisticsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CampaignSubscriptionStatisticsList"
        }
      },
      "CampaignSubscriptionStatisticsList": {
        "description": "Dates in the YYYY-MM-DD format are used as keys.",
        "type": "object",
        "example": {
          "2014-12-15": {
            "V": {
              "import": 10,
              "email": 11,
              "www": 10,
              "panel": 14,
              "leads": 3,
              "sale": 3,
              "api": 1,
              "forward": 15,
              "survey": 6,
              "mobile": 12,
              "copy": 7,
              "landing_page": 4,
              "webinar": 4,
              "premium_newsletter": 1,
              "course": 1,
              "summary": 105
            },
            "p": {
              "import": 9,
              "email": 7,
              "www": 9,
              "panel": 5,
              "leads": 3,
              "sale": 3,
              "api": 8,
              "forward": 10,
              "survey": 8,
              "mobile": 10,
              "copy": 10,
              "landing_page": 7,
              "webinar": 4,
              "premium_newsletter": 1,
              "course": 1,
              "summary": 99
            }
          }
        },
        "additionalProperties": {
          "description": "Dates in YYYY-MM-DD format are used as keys",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/CampaignSubscriptionStatisticsItemByCampaign"
            }
          ]
        }
      },
      "CampaignRemovalsStatisticsItem": {
        "type": "object",
        "anyOf": [
          {
            "properties": {
              "api": {
                "type": "integer",
                "example": 1
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "automation": {
                "type": "integer",
                "example": 1
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "blacklisted": {
                "type": "integer",
                "example": 1
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "bounce": {
                "type": "integer",
                "example": 1
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "cleaner": {
                "type": "integer",
                "example": 1
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "compliant": {
                "type": "integer",
                "example": 1
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "support": {
                "type": "integer",
                "example": 1
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "unsubscribe": {
                "type": "integer",
                "example": 1
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "user": {
                "type": "integer",
                "example": 1
              }
            },
            "type": "object"
          }
        ]
      },
      "CampaignSubscriptionStatisticsItemByCampaign": {
        "description": "The properties of the result are indexed with the campaign ID.",
        "type": "object",
        "example": {
          "V": {
            "import": 10,
            "email": 11,
            "www": 10,
            "panel": 14,
            "leads": 3,
            "sale": 3,
            "api": 1,
            "forward": 15,
            "survey": 6,
            "mobile": 12,
            "copy": 7,
            "landing_page": 4,
            "webinar": 3,
            "premium_newsletter": 1,
            "course": 1,
            "summary": 101
          },
          "p": {
            "import": 9,
            "email": 7,
            "www": 9,
            "panel": 5,
            "leads": 3,
            "sale": 3,
            "api": 8,
            "forward": 10,
            "survey": 8,
            "mobile": 10,
            "copy": 10,
            "landing_page": 7,
            "webinar": 4,
            "premium_newsletter": 1,
            "course": 1,
            "summary": 95
          }
        },
        "additionalProperties": {
          "description": "The properties of the result are indexed with the campaign ID",
          "$ref": "#/components/schemas/CampaignSubscriptionStatisticsItem"
        }
      },
      "CampaignSubscriptionStatisticsItem": {
        "properties": {
          "import": {
            "type": "integer",
            "example": 0
          },
          "email": {
            "type": "integer",
            "example": 0
          },
          "www": {
            "type": "integer",
            "example": 0
          },
          "panel": {
            "type": "integer",
            "example": 0
          },
          "leads": {
            "type": "integer",
            "example": 0
          },
          "sale": {
            "type": "integer",
            "example": 0
          },
          "api": {
            "type": "integer",
            "example": 0
          },
          "forward": {
            "type": "integer",
            "example": 0,
            "deprecated": true
          },
          "survey": {
            "type": "integer",
            "example": 0
          },
          "mobile": {
            "type": "integer",
            "example": 0
          },
          "copy": {
            "type": "integer",
            "example": 0
          },
          "landing_page": {
            "type": "integer",
            "example": 0
          },
          "webinar": {
            "type": "integer",
            "example": 0
          },
          "premium_newsletter": {
            "type": "integer",
            "example": 0
          },
          "course": {
            "type": "integer",
            "example": 0
          },
          "summary": {
            "type": "integer",
            "example": 0
          }
        },
        "type": "object"
      },
      "CampaignSummaryList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CampaignSummaryItem"
        }
      },
      "CampaignLocationsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CampaignLocationItem"
        }
      },
      "RemovalsByDatesStatisticsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CampaignRemovalsStatisticsList"
        }
      },
      "CampaignRemovalsStatisticsList": {
        "type": "object",
        "example": {
          "2014-12-05": {
            "user": 5
          },
          "2015-01-22": {
            "user": 12,
            "bounce": 2
          }
        },
        "additionalProperties": {
          "description": "Dates in YYYY-MM-DD format are used as keys",
          "$ref": "#/components/schemas/CampaignRemovalsStatisticsItem"
        }
      },
      "CampaignLocationItem": {
        "type": "object",
        "example": {
          "others": {
            "amount": "6",
            "continentCode": "",
            "countryCode": ""
          },
          "PL": {
            "amount": "45",
            "continentCode": "EU",
            "countryCode": "PL"
          }
        },
        "additionalProperties": {
          "description": "The results are indexed with the location name (PL, EN, etc.)",
          "properties": {
            "amount": {
              "description": "The amount of subscribers from a given location",
              "type": "string",
              "format": "number",
              "example": "0"
            },
            "continentalCode": {
              "description": "The region code",
              "type": "string",
              "example": "EU"
            },
            "countryCode": {
              "description": "The country code",
              "type": "string",
              "example": "PL"
            }
          },
          "type": "object"
        }
      },
      "CampaignOriginsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CampaignSubscriptionStatisticsItemByCampaign"
        }
      },
      "CampaignListSizesStatisticsElement": {
        "properties": {
          "totalSubscribers": {
            "description": "The total amount of subscribers for a given datetime and grouping",
            "type": "integer",
            "format": "int64"
          },
          "addedSubscribers": {
            "description": "The amount of subscribers added since the previous statistics frame",
            "type": "integer",
            "format": "int64"
          },
          "removedSubscribers": {
            "description": "The amount of subscribers removed since the previous statistics frame",
            "type": "integer",
            "format": "int64"
          },
          "createdOn": {
            "description": "The statistics frame timestamp. The value depends on the groupBy parameter. For the hour, use datetime in the format YYYY-mm-dd HH:mm:ss; for the day, use date in the format YYYY-mm-dd; for the month, use a string in the format YYYY-mm; and for the total, use the string total.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CampaignListSizesStatisticsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CampaignListSizesStatisticsElement"
        }
      },
      "BalanceByDatesStatisticsList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/CampaignBalanceStatisticsList"
        }
      },
      "CampaignBalanceStatisticsList": {
        "type": "object",
        "example": {
          "2014-12-05": {
            "removals": {
              "user": 5
            },
            "subscriptions": {
              "import": 0,
              "email": 0,
              "www": 0,
              "panel": 0,
              "leads": 0,
              "sale": 0,
              "api": 7,
              "forward": 0,
              "survey": 0,
              "mobile": 0,
              "copy": 0,
              "landing_page": 0,
              "webinar": 4,
              "premium_newsletter": 1,
              "course": 1,
              "summary": 13
            }
          },
          "2015-01-21": {
            "removals": {
              "user": 10
            }
          }
        },
        "additionalProperties": {
          "description": "Dates in YYYY-MM-DD format are used as keys",
          "anyOf": [
            {
              "properties": {
                "removals": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CampaignRemovalsStatisticsItem"
                    }
                  ]
                }
              },
              "type": "object"
            },
            {
              "properties": {
                "subscriptions": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/CampaignSubscriptionStatisticsItem"
                    }
                  ]
                }
              },
              "type": "object"
            }
          ]
        }
      },
      "CampaignSummaryItem": {
        "description": "The properties of the result are indexed with the location name (PL, EN, etc.).",
        "type": "object",
        "example": {
          "o5lx": {
            "totalSubscribers": "4",
            "totalNewsletters": "129",
            "totalTriggers": "0",
            "totalLandingPages": "1",
            "totalWebforms": "3"
          },
          "CC9F": {
            "totalSubscribers": "0",
            "totalNewsletters": "0",
            "totalTriggers": "0",
            "totalLandingPages": "5",
            "totalWebforms": "0"
          },
          "V6OeR": {
            "totalSubscribers": "0",
            "totalNewsletters": "0",
            "totalTriggers": "0",
            "totalLandingPages": "0",
            "totalWebforms": "0"
          }
        },
        "additionalProperties": {
          "properties": {
            "totalSubscribers": {
              "description": "The total number of subscribers",
              "type": "string",
              "format": "number",
              "example": "0"
            },
            "totalNewsletters": {
              "description": "The total number of newsletters",
              "type": "string",
              "format": "number",
              "example": "0"
            },
            "totalTriggers": {
              "description": "The total number of triggers",
              "type": "string",
              "format": "number",
              "example": "0"
            },
            "totalLandingPages": {
              "description": "The total number of landing pages",
              "type": "string",
              "format": "number",
              "example": "0"
            },
            "totalWebforms": {
              "description": "The total number of webforms",
              "type": "string",
              "format": "number",
              "example": "0"
            }
          },
          "type": "object"
        }
      },
      "CampaignListElement": {
        "properties": {
          "description": {
            "description": "It's the same as the campaign name, kept for compatibility reasons",
            "type": "string",
            "readOnly": true,
            "example": "my_campaign"
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCampaign"
          }
        ]
      },
      "CampaignReference": {
        "required": [
          "campaignId"
        ],
        "properties": {
          "campaignId": {
            "description": "Campaign ID",
            "type": "string",
            "example": "C"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/campaigns/C"
          },
          "name": {
            "description": "The campaign name",
            "type": "string",
            "readOnly": true,
            "example": "Promo campaign",
            "nullable": true
          }
        },
        "type": "object"
      },
      "CampaignStatisticsIdQuery": {
        "type": "string",
        "example": "3Va2e"
      },
      "LegacyForm": {
        "properties": {
          "webformId": {
            "description": "The webform (Legacy Form) ID",
            "type": "string",
            "example": "NPKx"
          },
          "name": {
            "type": "string",
            "example": "Webform 2010/7/5"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "example": "https://api.getresponse.com/v3/webforms/NPKx"
          },
          "scriptUrl": {
            "description": "The URL of the script that displays the Legacy Form",
            "type": "string",
            "format": "uri",
            "example": "https://app.getresponse.com/view_webform.js?u=VfEy1&wid=11774901"
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum"
          },
          "modifiedOn": {
            "description": "The modification date",
            "type": "string",
            "format": "date-time"
          },
          "statistics": {
            "$ref": "#/components/schemas/LegacyFormStatistics"
          },
          "campaign": {
            "$ref": "#/components/schemas/CampaignReference"
          }
        },
        "type": "object"
      },
      "LegacyFormStatistics": {
        "properties": {
          "opened": {
            "description": "The number of Legacy Form views",
            "type": "integer",
            "format": "int64",
            "example": 1234
          },
          "subscribed": {
            "description": "The number of contacts that subscribed using this Legacy Form",
            "type": "integer",
            "format": "int64",
            "example": 100
          }
        },
        "type": "object"
      },
      "GDPRField": {
        "properties": {
          "gdprFieldId": {
            "type": "string",
            "readOnly": true,
            "example": "MtY"
          },
          "name": {
            "description": "The name of the GDPR field",
            "type": "string",
            "example": "Consent #1"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "example": "2018-08-01T09:18:00+0000"
          },
          "href": {
            "description": "The direct hyperlink to the resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/gdpr-fields/MtY"
          }
        },
        "type": "object"
      },
      "GDPRFieldLatestVersion": {
        "properties": {
          "gdprFieldVersionId": {
            "type": "string",
            "readOnly": true,
            "example": "yRI"
          },
          "content": {
            "description": "The content of the GDPR field",
            "type": "string",
            "readOnly": true,
            "example": "1st version of Consent #1"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "example": "2018-08-02T11:12:00+0000"
          }
        },
        "type": "object"
      },
      "GDPRFieldDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GDPRField"
          },
          {
            "properties": {
              "latestVersion": {
                "$ref": "#/components/schemas/GDPRFieldLatestVersion"
              }
            },
            "type": "object"
          }
        ]
      },
      "UpdateWorkflow": {
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "description": "An 'incomplete' status means that the workflow is a 'draft' in the web panel",
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "incomplete"
            ],
            "example": "active"
          }
        },
        "type": "object"
      },
      "Workflow": {
        "required": [
          "workflowId",
          "name",
          "status",
          "subscriberStatistics"
        ],
        "properties": {
          "workflowId": {
            "description": "The workflow ID",
            "type": "string",
            "readOnly": true,
            "example": "pxs"
          },
          "name": {
            "type": "string",
            "example": "My draft"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "incomplete"
            ],
            "example": "active"
          },
          "dateStart": {
            "type": "string",
            "format": "date-time",
            "example": "2014-02-12T15:19:21+0000"
          },
          "dateStop": {
            "type": "string",
            "format": "date-time",
            "example": "2014-04-12T15:19:21+0000"
          },
          "subscriberStatistics": {
            "$ref": "#/components/schemas/WorkflowSubscriberStatistics"
          }
        },
        "type": "object"
      },
      "WorkflowSubscriberStatistics": {
        "required": [
          "completedCount",
          "inProgressCount"
        ],
        "properties": {
          "completedCount": {
            "description": "The number of subscribers that completed the workflow",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 4
          },
          "inProgressCount": {
            "description": "The number of subscribers that are in progress in the workflow",
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 3
          }
        },
        "type": "object"
      },
      "SmsDetails": {
        "properties": {
          "sendSettings": {
            "description": "How the message will be delivered to the subscriber",
            "type": "object",
            "nullable": true,
            "allOf": [
              {
                "properties": {
                  "contacts": {
                    "description": "The details of recipients who are in your contact list (recipientsType = \\\"contacts\\\"). If the recipient is not in your GetResponse contacts, the property is null.",
                    "nullable": true,
                    "allOf": [
                      {
                        "properties": {
                          "selectedCampaigns": {
                            "$ref": "#/components/schemas/MessageSendSettingSelectedCampaigns"
                          },
                          "selectedSegments": {
                            "$ref": "#/components/schemas/MessageSendSettingSelectedSegments"
                          },
                          "excludedCampaigns": {
                            "$ref": "#/components/schemas/MessageSendSettingExcludedCampaigns"
                          },
                          "excludedSegments": {
                            "$ref": "#/components/schemas/MessageSendSettingExcludedSegments"
                          },
                          "selectedContacts": {
                            "description": "The list of contact IDs.",
                            "items": {
                              "type": "string",
                              "example": "V2"
                            }
                          }
                        },
                        "type": "object"
                      }
                    ]
                  },
                  "importedNumbers": {
                    "description": "The details of recipients whose numbers are imported (recipientsType = \\\"importedNumbers\\\"). If the recipient is in your GetResponse contacts, the property is null.",
                    "nullable": true,
                    "allOf": [
                      {
                        "properties": {
                          "count": {
                            "description": "Number of phone numbers entered manually",
                            "type": "integer",
                            "example": 10
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "clickTracks": {
            "description": "Details of links attached to SMS message. Maximum 20 links will be returned.",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "properties": {
                    "clickTrackId": {
                      "description": "The click track ID",
                      "type": "string",
                      "example": "a2"
                    },
                    "href": {
                      "description": "Direct hyperlink to a resource",
                      "type": "string",
                      "example": "https://api.getresponse.com/v3/click-tracks/a2"
                    },
                    "url": {
                      "description": "The link URL",
                      "type": "string",
                      "example": "https://example.com"
                    },
                    "label": {
                      "description": "The link label",
                      "type": "string",
                      "example": "example-link"
                    },
                    "amount": {
                      "description": "Number of clicks on a link",
                      "type": "integer",
                      "example": 2
                    },
                    "uniqueAmount": {
                      "description": "Number of unique clicks on link",
                      "type": "integer",
                      "example": 1
                    }
                  },
                  "type": "object"
                }
              ]
            }
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SmsListItem"
          }
        ]
      },
      "SmsAutomationListItem": {
        "required": [
          "smsId"
        ],
        "properties": {
          "smsId": {
            "description": "The automated SMS message ID",
            "type": "string",
            "readOnly": true,
            "example": "N"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/sms-automation/N"
          },
          "name": {
            "description": "The automated SMS message name",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "New message"
          },
          "campaign": {
            "description": "The campaign the SMS message is in",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignReference"
              }
            ]
          },
          "modifiedOn": {
            "description": "The date the automated SMS message was last modified on, shown in `ISO 8601` date and time format. e.g. `2022-04-10T10:02:57+0000`",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "The status of of the automated SMS message",
            "type": "string",
            "enum": [
              "ready",
              "in_use"
            ]
          },
          "statistics": {
            "description": "Automate SMS message statistics",
            "allOf": [
              {
                "properties": {
                  "sent": {
                    "description": "The number od sent automated SMS messages",
                    "type": "integer",
                    "example": 12
                  },
                  "delivered": {
                    "description": "The number of delivered automated SMS messages",
                    "type": "integer",
                    "example": 10
                  },
                  "clicks": {
                    "description": "The number of automated SMS link clicks",
                    "type": "integer",
                    "example": 8
                  }
                },
                "type": "object"
              }
            ]
          },
          "senderName": {
            "description": "The name of the sender of the automated SMS message",
            "type": "string",
            "readOnly": true
          },
          "hasLinks": {
            "description": "Information is the automated SMS message contains links",
            "type": "boolean",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "SmsListItem": {
        "required": [
          "newsletterId",
          "href"
        ],
        "properties": {
          "smsId": {
            "description": "The SMS message ID",
            "type": "string",
            "readOnly": true,
            "example": "N"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/sms/N"
          },
          "name": {
            "description": "The SMS message name",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "New message"
          },
          "campaign": {
            "description": "The SMS message campaign",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignReference"
              }
            ]
          },
          "modifiedOn": {
            "description": "The date the SMS message was last modified on, shown in `ISO 8601` date and time format. e.g. `2022-04-10T10:02:57+0000`",
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "description": "The SMS message type",
            "type": "string",
            "enum": [
              "sms",
              "draft"
            ],
            "readOnly": true
          },
          "sendOn": {
            "description": "SMS message send date details",
            "type": "object",
            "nullable": true,
            "allOf": [
              {
                "properties": {
                  "date": {
                    "description": "Send date. Shown in format `ISO 8601` without timezone offset e.g. `2022-04-10T10:02:57`.",
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-03-26T10:35:00"
                  },
                  "timeZone": {
                    "description": "Time zone details",
                    "type": "object",
                    "allOf": [
                      {
                        "properties": {
                          "timeZoneId": {
                            "description": "Time zone ID",
                            "type": "integer",
                            "example": "123"
                          },
                          "timeZoneName": {
                            "description": "Time zone name",
                            "type": "string",
                            "example": "America/New_York"
                          },
                          "timeZoneOffset": {
                            "description": "Time zone offset",
                            "type": "string",
                            "example": "-05:00"
                          }
                        },
                        "type": "object"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "recipientsType": {
            "description": "Type of SMS message recipients",
            "type": "string",
            "enum": [
              "contacts",
              "importedNumbers"
            ],
            "readOnly": true,
            "example": "contacts"
          },
          "senderName": {
            "description": "The SMS message sender name",
            "type": "string",
            "readOnly": true
          },
          "content": {
            "description": "The SMS message content",
            "type": "string",
            "example": "This is my SMS content"
          },
          "sendMetrics": {
            "description": "Information about sending process",
            "type": "object",
            "allOf": [
              {
                "properties": {
                  "progress": {
                    "description": "Sending progress",
                    "type": "string"
                  },
                  "status": {
                    "description": "Sending status",
                    "type": "string",
                    "enum": [
                      "scheduled",
                      "sending",
                      "sent"
                    ]
                  }
                },
                "type": "object"
              }
            ]
          },
          "statistics": {
            "description": "Message statistics",
            "allOf": [
              {
                "properties": {
                  "sent": {
                    "description": "Number of sent messages",
                    "type": "integer",
                    "example": 12
                  },
                  "delivered": {
                    "description": "Number of delivered messages",
                    "type": "integer",
                    "example": 10
                  },
                  "clicks": {
                    "description": "Number of clicked messages",
                    "type": "integer",
                    "example": 8
                  }
                },
                "type": "object"
              }
            ]
          }
        },
        "type": "object"
      },
      "UpdateAutoresponder": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Autoresponder"
          }
        ]
      },
      "AutoresponderTriggerSettings": {
        "required": [
          "type",
          "dayOfCycle",
          "selectedCampaigns"
        ],
        "properties": {
          "type": {
            "description": "The trigger type",
            "type": "string",
            "items": {
              "type": "string",
              "enum": [
                "onday"
              ]
            },
            "default": "onday"
          },
          "dayOfCycle": {
            "description": "For onday type the day of the autoresponder cycle in the 0-9999 format",
            "type": "integer",
            "format": "int32",
            "maximum": 9999,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false
          },
          "autoresponder": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "newsletter": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "clickTrackId": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "goal": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "custom": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "newCustomValue": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "action": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "selectedCampaigns": {
            "$ref": "#/components/schemas/MessageSendSettingSelectedCampaigns"
          },
          "selectedSegments": {
            "$ref": "#/components/schemas/MessageSendSettingSelectedSegments"
          }
        },
        "type": "object"
      },
      "AutoresponderSendSettings": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "When to send the message",
            "type": "string",
            "enum": [
              "signup",
              "immediately",
              "delay",
              "custom"
            ]
          },
          "delayInHours": {
            "description": "How many hours to delay the message after a trigger occured, in the 0-23 format",
            "type": "integer",
            "format": "int32",
            "maximum": 23,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false
          },
          "sendAtHour": {
            "description": "The specific hour on which the message will be sent, in the 0-23 format",
            "type": "integer",
            "format": "int32",
            "maximum": 23,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false
          },
          "recurrence": {
            "description": "Should the message be sent every time the trigger occurs (example: each click)",
            "example": "false",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "timeTravel": {
            "description": "Should the message be sent in the user's or the subscriber's time zone",
            "example": "true",
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "excludedDaysOfWeek": {
            "description": "The days of the week to exclude from message sending (the message will be sent on the next non-excluded day after the trigger)",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
              ]
            }
          },
          "externalLexpad": {
            "description": "External Lexpad settings for the message, read more: [External Lexpad](https://apidocs.getresponse.com/v3/dynamic-content/external-lexpad)",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalLexpad"
              }
            ]
          }
        },
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "signup": "#/components/schemas/AutoresponderSendSignupSettings",
            "immediately": "#/components/schemas/AutoresponderSendImmediatelySettings",
            "delay": "#/components/schemas/AutoresponderSendDelaySettings",
            "custom": "#/components/schemas/AutoresponderSendCustomSettings"
          }
        }
      },
      "AutoresponderSendSignupSettings": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoresponderSendSettings"
          }
        ]
      },
      "AutoresponderSendImmediatelySettings": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoresponderSendSettings"
          }
        ]
      },
      "AutoresponderSendDelaySettings": {
        "required": [
          "delayInHours"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoresponderSendSettings"
          }
        ]
      },
      "AutoresponderSendCustomSettings": {
        "required": [
          "sendAtHour"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AutoresponderSendSettings"
          }
        ]
      },
      "Autoresponder": {
        "required": [
          "autoresponderId",
          "href"
        ],
        "properties": {
          "autoresponderId": {
            "description": "The autoresponder ID",
            "type": "string",
            "readOnly": true,
            "example": "Q"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/autoresponders/Q"
          },
          "name": {
            "description": "The autoresponder name",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "Message 2"
          },
          "subject": {
            "description": "The autoresponder message subject",
            "type": "string",
            "maxLength": 128,
            "minLength": 2,
            "example": "test12"
          },
          "campaignId": {
            "description": "The campaign ID. The system will assign the autoresponder to a default campaign if you don't provide a specific campaign ID.",
            "type": "string",
            "example": "V"
          },
          "status": {
            "description": "The autoresponder status",
            "example": "enabled",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ]
          },
          "editor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageEditorEnum"
              }
            ]
          },
          "fromField": {
            "description": "The from email address used for the message",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "replyTo": {
            "description": "The email that will be used as a reply-to address",
            "allOf": [
              {
                "$ref": "#/components/schemas/FromFieldReference"
              }
            ]
          },
          "content": {
            "$ref": "#/components/schemas/MessageContent"
          },
          "flags": {
            "$ref": "#/components/schemas/MessageFlagsArray"
          },
          "sendSettings": {
            "description": "How the message will be delivered to the subscriber",
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoresponderSendSettings"
              }
            ]
          },
          "triggerSettings": {
            "description": "The conditions that will trigger the autoresponder ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoresponderTriggerSettings"
              }
            ]
          },
          "statistics": {
            "description": "The autoresponder statistics summary",
            "type": "object",
            "readOnly": true,
            "allOf": [
              {
                "properties": {
                  "delivered": {
                    "type": "number",
                    "format": "float",
                    "example": "0"
                  },
                  "openRate": {
                    "type": "number",
                    "format": "float",
                    "example": "0"
                  },
                  "clickRate": {
                    "type": "number",
                    "format": "float",
                    "example": "0"
                  }
                },
                "type": "object"
              }
            ]
          },
          "createdOn": {
            "description": "The creation date",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "NewAutoresponder": {
        "required": [
          "status",
          "subject",
          "content",
          "sendSettings",
          "triggerSettings"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Autoresponder"
          }
        ]
      },
      "AutoresponderList": {
        "type": "array",
        "items": {
          "properties": {
            "campaign": {
              "description": "The autoresponder campaign (list)",
              "allOf": [
                {
                  "$ref": "#/components/schemas/CampaignReference"
                }
              ]
            }
          },
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/Autoresponder"
            }
          ]
        }
      },
      "AutoresponderDetails": {
        "properties": {
          "clickTracks": {
            "description": "The list of tracked links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClickTrack"
            }
          },
          "campaign": {
            "description": "The autoresponder campaign (list)",
            "allOf": [
              {
                "$ref": "#/components/schemas/CampaignReference"
              }
            ]
          }
        },
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Autoresponder"
          }
        ]
      },
      "Website": {
        "properties": {
          "websiteId": {
            "description": "The website ID",
            "type": "string",
            "readOnly": true,
            "example": "ce84fabc-1349-4992-a2d7-0c44c5534128"
          },
          "href": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/websites/6b0d7d59-71d9-4708-80a6-aa0f13805111"
          },
          "name": {
            "description": "The website name",
            "type": "string",
            "example": "Predesigned #017"
          },
          "status": {
            "description": "The website status",
            "type": "string",
            "enum": [
              "published",
              "unpublished"
            ],
            "readOnly": true
          },
          "domainUrl": {
            "description": "The website domain",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "predesigned-017-52612.grweb.site"
          },
          "thumbnailUrl": {
            "description": "The URL of a website thumbnail",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://us-wbe-img2.gr-cdn.com/user/e5c2094a-2354-459f-9b9f-6d0369ccae2c/6b0d7d59-71d9-4708-80a6-aa0f13805111.png?width=208"
          },
          "isChatsEnabled": {
            "description": "Chats is enabled on the website",
            "example": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StringBooleanEnum"
              }
            ]
          },
          "createdAt": {
            "description": "The date (in GMT) the website was created",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-14T14:42:57"
          },
          "updatedAt": {
            "description": "The date (in GMT) the website was updated",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-14T14:42:57"
          },
          "statistics": {
            "description": "The website statistics",
            "$ref": "#/components/schemas/WebsiteStatistics"
          }
        },
        "type": "object"
      },
      "WebsiteStatistics": {
        "properties": {
          "pageViews": {
            "description": "Number of page views",
            "type": "integer",
            "format": "int64",
            "example": 9
          },
          "visits": {
            "description": "Number of site visits",
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "uniqueVisitors": {
            "description": "Number of unique visitors",
            "type": "integer",
            "format": "int64",
            "example": 5
          }
        },
        "type": "object"
      },
      "WebsiteStats": {
        "required": [
          "websiteId"
        ],
        "properties": {
          "websiteId": {
            "description": "The website ID",
            "type": "string",
            "example": "PvLI8C"
          },
          "name": {
            "type": "string",
            "example": "Variant A"
          },
          "pageViews": {
            "description": "The number of page views",
            "type": "integer",
            "example": 1
          },
          "visits": {
            "description": "The number of visits",
            "type": "integer",
            "example": 1
          },
          "uniqueVisitors": {
            "description": "The number of unique visitors",
            "type": "integer",
            "example": 1
          },
          "thumbnailUrl": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://api.getresponse.com/v3/wbe/N"
          }
        },
        "type": "object"
      },
      "WebsiteDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Website"
          },
          {
            "properties": {
              "pages": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WebsitePage"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "WebsitePage": {
        "properties": {
          "uuid": {
            "description": "The website page ID",
            "type": "string",
            "readOnly": true,
            "example": "6ee7597f-9bde-4b92-9411-2fb228c9fa34"
          },
          "name": {
            "description": "The website page name",
            "type": "string",
            "example": "Home"
          },
          "status": {
            "description": "The website page status",
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ]
          },
          "url": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "/terms-of-service"
          },
          "redirectUrl": {
            "description": "Direct hyperlink to a resource",
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": ""
          },
          "createdAt": {
            "description": "The date (in GMT) the website page was created",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-14T14:42:57"
          }
        },
        "type": "object"
      }
    },
    "responses": {
      "WebinarDetails": {
        "description": "The webinar details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Webinar"
            }
          }
        }
      },
      "WebinarList": {
        "description": "The list of webinars",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Webinar"
              }
            }
          }
        }
      },
      "UpsertContactTags": {
        "description": " The list of contact tags.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContactTag"
              }
            }
          }
        }
      },
      "ContactActivityList": {
        "description": "The list of contact activities.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContactActivity"
              }
            }
          }
        }
      },
      "ContactCustomFieldList": {
        "description": "The list of custom fields",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContactCustomFieldList"
            }
          }
        }
      },
      "ContactList": {
        "description": "The list of contacts.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContactListElement"
              }
            }
          }
        }
      },
      "ContactDetails": {
        "description": "The contact details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContactDetails"
            }
          }
        }
      },
      "BaseSearchContactsList": {
        "description": "The saved search contact.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BaseSearchContactsDetails"
              }
            }
          }
        }
      },
      "SearchContactsDetails": {
        "description": "Search contact details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SearchContactsDetails"
            }
          }
        }
      },
      "SearchedContactsList": {
        "description": "The contact list.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SearchedContactDetails"
              }
            }
          }
        }
      },
      "TransactionalEmailsTemplateDetails": {
        "description": "Transactional emails template details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TransactionalEmailsTemplateDetails"
            }
          }
        }
      },
      "TransactionalEmailsTemplateList": {
        "description": "Transactional email templates listing",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TransactionalEmailsTemplateListElement"
              }
            }
          }
        }
      },
      "TransactionalEmailDetails": {
        "description": "Transactional email details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TransactionalEmailDetails"
            }
          }
        }
      },
      "TransactionalEmailStatistics": {
        "description": "The overall statistics of transactional emails",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TransactionalEmailStatistics"
              }
            }
          }
        }
      },
      "TransactionalEmailList": {
        "description": "The list of transactional emails",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TransactionalEmailListElement"
              }
            }
          }
        }
      },
      "TransactionalEmail": {
        "description": "Transactional email.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TransactionalEmail"
            }
          }
        }
      },
      "FromFieldList": {
        "description": "The list of 'From' email addresses ('from fields').",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FromField"
              }
            }
          }
        }
      },
      "FromFieldDetails": {
        "description": "The 'From' address details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FromField"
            }
          }
        }
      },
      "RssNewsletterDetails": {
        "description": "The RSS newsletter details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RssNewsletterDetails"
            }
          }
        }
      },
      "RssNewsletterList": {
        "description": "The list of RSS newsletters.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RssNewsletterListItem"
              }
            }
          }
        }
      },
      "TaxDetails": {
        "description": "The tax details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Tax"
            }
          }
        }
      },
      "TaxList": {
        "description": "The list of taxes",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tax"
              }
            }
          }
        }
      },
      "CustomEventDetails": {
        "description": "The custom event details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomEventDetails"
            }
          }
        }
      },
      "CustomEventsList": {
        "description": "The list of custom events",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomEventDetails"
              }
            }
          }
        }
      },
      "FormVariantList": {
        "description": "The list of form variants.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FormVariantDetails"
              }
            }
          }
        }
      },
      "FormDetails": {
        "description": "The form details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FormDetails"
            }
          }
        }
      },
      "FormList": {
        "description": "The list of forms.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Form"
              }
            }
          }
        }
      },
      "LandingPageList": {
        "description": "The list of landing pages.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BaseLandingPage"
              }
            }
          }
        }
      },
      "LandingPageDetails": {
        "description": "The landing pages details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LandingPage"
              }
            }
          }
        }
      },
      "ImportList": {
        "description": "The list of imports.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Import"
              }
            }
          }
        }
      },
      "ImportDetails": {
        "description": "The import details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Import"
            }
          }
        }
      },
      "SmsStats": {
        "description": "SMS statistics",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SmsStats"
            }
          }
        }
      },
      "RevenueStats": {
        "description": "Revenue statistics",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RevenueStatistics"
            }
          }
        }
      },
      "GeneralPerformanceStats": {
        "description": "General performance statistics",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeneralPerformanceStats"
            }
          }
        }
      },
      "PredefinedFieldsList": {
        "description": "The list of predefined fields.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PredefinedField"
              }
            }
          }
        }
      },
      "PredefinedFieldDetails": {
        "description": "The predefined field details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PredefinedField"
            }
          }
        }
      },
      "CategoryDetails": {
        "description": "The category details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      },
      "CategoryList": {
        "description": "The list of categories",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        }
      },
      "SuppressionsList": {
        "description": "The suppressions list.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Suppression"
              }
            }
          }
        }
      },
      "SuppressionDetails": {
        "description": "The suppression details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuppressionDetails"
            }
          }
        }
      },
      "OrderList": {
        "description": "The list of orders",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        }
      },
      "OrderDetails": {
        "description": "The order details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OrderResponse"
            }
          }
        }
      },
      "SubscriptionConfirmationBodyList": {
        "description": "List of subscription confirmation bodies",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubscriptionConfirmationBody"
              }
            }
          }
        }
      },
      "SubscriptionConfirmationSubjectList": {
        "description": "List of subscription confirmation subjects",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubscriptionConfirmationSubject"
              }
            }
          }
        }
      },
      "ProductList": {
        "description": "The list of products",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        }
      },
      "SimpleProductCategoryList": {
        "description": "The list of product categories",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BaseCategory"
              }
            }
          }
        }
      },
      "ProductDetails": {
        "description": "The product details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "ShopList": {
        "description": "The list of shops",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "properties": {
                  "shopId": {
                    "description": "The shop ID",
                    "type": "string",
                    "readOnly": true,
                    "example": "pf3"
                  },
                  "href": {
                    "description": "Direct hyperlink to a resource",
                    "type": "string",
                    "format": "uri",
                    "readOnly": true,
                    "example": "https://api.getresponse.com/v3/shops/pf3"
                  },
                  "name": {
                    "description": "The shop name",
                    "type": "string",
                    "maxLength": 124,
                    "minLength": 4,
                    "example": "Monster market"
                  },
                  "locale": {
                    "description": "The language locale (ISO 639-1)",
                    "type": "string",
                    "example": "PL"
                  },
                  "currency": {
                    "description": "The currency code (ISO 4217)",
                    "type": "string",
                    "example": "PLN"
                  }
                },
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateAndUpdate"
                  }
                ]
              }
            }
          }
        }
      },
      "ShopDetails": {
        "description": "The shop details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ShopDetails"
            }
          }
        }
      },
      "PopupGeneralPerformance": {
        "description": "Form or popup statistics",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PopupGeneralPerformanceStats"
            }
          }
        }
      },
      "PopupDetails": {
        "description": "Form or popup details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PopupDetails"
            }
          }
        }
      },
      "PopupsList": {
        "description": "The list of forms and popups",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PopupListItem"
              }
            }
          }
        }
      },
      "SplittestList": {
        "description": "The list of A/B tests.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Splittest"
              }
            }
          }
        }
      },
      "Splittest": {
        "description": "A/B test details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Splittest"
            }
          }
        }
      },
      "CartDetails": {
        "description": "The cart details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Cart"
            }
          }
        }
      },
      "CartList": {
        "description": "The list of carts",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Cart"
              }
            }
          }
        }
      },
      "Quota": {
        "description": "Storage space information",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Quota"
            }
          }
        }
      },
      "FileList": {
        "description": "The list of files",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/File"
              }
            }
          }
        }
      },
      "File": {
        "description": "The file details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/File"
            }
          }
        }
      },
      "Folder": {
        "description": "The folder details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          }
        }
      },
      "FoldersList": {
        "description": "The list of folders",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          }
        }
      },
      "AbtestsSubjectGetDetails": {
        "description": "A/B test details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AbtestsSubjectDetails"
            }
          }
        }
      },
      "AbtestsSubjectGetList": {
        "description": "The list of A/B tests",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbtestsSubjectListItem"
              }
            }
          }
        }
      },
      "ClickTrack": {
        "description": "The click track details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ClickTrackResource"
            }
          }
        }
      },
      "ClickTrackList": {
        "description": "The list of click tracks",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ClickTrackResource"
              }
            }
          }
        }
      },
      "MessageStatisticsListElement": {
        "description": "The message statistics.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MessageStatisticsListElement"
            }
          }
        }
      },
      "NewsletterDetails": {
        "description": "The newsletter details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewsletterDetails"
            }
          }
        }
      },
      "NewsletterList": {
        "description": "The list of newsletters.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NewsletterListElement"
              }
            }
          }
        }
      },
      "NewsletterActivities": {
        "description": "The list of newsletters activities",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NewsletterActivity"
              }
            }
          }
        }
      },
      "TagDetails": {
        "description": "The tag details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TagDetails"
            }
          }
        }
      },
      "TagList": {
        "description": "The list of tags",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        }
      },
      "AddressList": {
        "description": "The list of addresses.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Address"
              }
            }
          }
        }
      },
      "AddressDetails": {
        "description": "The address details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Address"
            }
          }
        }
      },
      "AccountBlocklist": {
        "description": "Blocklist masks for the whole account.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Blocklist"
            }
          }
        }
      },
      "CampaignBlocklist": {
        "description": "Blocklist masks for the campaign.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Blocklist"
            }
          }
        }
      },
      "CustomFieldList": {
        "description": "The list of custom fields",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomField"
              }
            }
          }
        }
      },
      "CustomFieldDetails": {
        "description": "The custom field details.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomFieldResponse"
            }
          }
        }
      },
      "LpsList": {
        "description": "The list of tags",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Lps"
              }
            }
          }
        }
      },
      "LpsDetails": {
        "description": "The landing page details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LpsDetails"
            }
          }
        }
      },
      "LpsStats": {
        "description": "Landing page statistics",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LpsStats"
            }
          }
        }
      },
      "ImageList": {
        "description": "Image list",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ImageDetails"
              }
            }
          }
        }
      },
      "ImageDetails": {
        "description": "Image details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ImageDetails"
            }
          }
        }
      },
      "Tracking": {
        "description": "The Tracking Snippets",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Tracking"
              }
            }
          }
        }
      },
      "FacebookPixelList": {
        "description": "\"Facebook Pixel\" details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FacebookPixel"
              }
            }
          }
        }
      },
      "ProductVariantDetails": {
        "description": "The product variant details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProductVariant"
            }
          }
        }
      },
      "ProductVariantList": {
        "description": "The list of product variants",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ProductVariant"
              }
            }
          }
        }
      },
      "SendingLimitsList": {
        "description": "Send limits",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SendingLimitsListItem"
              }
            }
          }
        }
      },
      "IndustryList": {
        "description": "Industry tags list",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IndustryTag"
              }
            }
          }
        }
      },
      "AccountTimezoneList": {
        "description": "List of time zones",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Timezone"
              }
            }
          }
        }
      },
      "AccountLoginHistoryList": {
        "description": "Login history information",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccountsLoginHistoryListElement"
              }
            }
          }
        }
      },
      "Callback": {
        "description": "Callback configuration",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Callback"
            }
          }
        }
      },
      "AccountDetails": {
        "description": "Your account information",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "AccountBadgeDetails": {
        "description": "Account badge status",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AccountBadgeDetails"
            }
          }
        }
      },
      "AccountBillingDetails": {
        "description": "Billing information.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AccountBilling"
            }
          }
        }
      },
      "SubscriptionsByDatesStatisticsList": {
        "description": "Subscription statistics by date",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SubscriptionsByDatesStatisticsList"
            }
          }
        }
      },
      "CampaignSummaryList": {
        "description": "The summary list.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CampaignSummaryList"
            }
          }
        }
      },
      "CampaignLocationsList": {
        "description": "The list of locations.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CampaignLocationsList"
            }
          }
        }
      },
      "RemovalsByDatesStatisticsList": {
        "description": "Subscription statistics by date",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RemovalsByDatesStatisticsList"
            }
          }
        }
      },
      "CampaignOriginsList": {
        "description": "The list of origins.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CampaignOriginsList"
            }
          }
        }
      },
      "CampaignListSizesStatisticsList": {
        "description": "The campaign data.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CampaignListSizesStatisticsList"
            }
          }
        }
      },
      "BalanceByDatesStatisticsList": {
        "description": "The subscription statistics, shown by date.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BalanceByDatesStatisticsList"
            }
          }
        }
      },
      "Campaign": {
        "description": "The campaign data.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Campaign"
            }
          }
        }
      },
      "CampaignList": {
        "description": "The list of campaigns.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CampaignListElement"
              }
            }
          }
        }
      },
      "MetaFieldDetails": {
        "description": "The meta field details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MetaField"
            }
          }
        }
      },
      "MetaFieldList": {
        "description": "The list of meta fields",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetaField"
              }
            }
          }
        }
      },
      "LegacyForm": {
        "description": "The Legacy Form.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LegacyForm"
            }
          }
        }
      },
      "LegacyFormList": {
        "description": "The list of Legacy Forms.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LegacyForm"
              }
            }
          }
        }
      },
      "GDPRFieldList": {
        "description": "The list of GDPR fields",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GDPRField"
              }
            }
          }
        }
      },
      "GDPRFieldDetails": {
        "description": "The details of the GDPR field",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GDPRFieldDetails"
            }
          }
        }
      },
      "Workflow": {
        "description": "The workflow",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Workflow"
            }
          }
        }
      },
      "WorkflowList": {
        "description": "The list of workflows",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Workflow"
              }
            }
          }
        }
      },
      "SmsDetails": {
        "description": "The SMS message details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SmsDetails"
            }
          }
        }
      },
      "SmsAutomationList": {
        "description": "The list of the automated SMS messages",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SmsAutomationListItem"
            }
          }
        }
      },
      "SmsList": {
        "description": "The SMS message listing",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SmsListItem"
            }
          }
        }
      },
      "MessageStatisticsList": {
        "description": "The list of autoresponders statistic split by time interval.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MessageStatisticsListElement"
              }
            }
          }
        }
      },
      "SingleMessageStatisticsList": {
        "description": "The list of autoresponder statistics split by time interval.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MessageStatisticsListElement"
              }
            }
          }
        }
      },
      "AutoresponderList": {
        "description": "The list of autoresponders.",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AutoresponderList"
            }
          }
        }
      },
      "AutoresponderDetails": {
        "description": "The autoresponder details'",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AutoresponderDetails"
            }
          }
        }
      },
      "WebsitesList": {
        "description": "The list of tags",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          },
          "CurrentPage": {
            "$ref": "#/components/headers/CurrentPage"
          },
          "TotalPages": {
            "$ref": "#/components/headers/TotalPages"
          },
          "TotalCount": {
            "$ref": "#/components/headers/TotalCount"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Website"
              }
            }
          }
        }
      },
      "WebsiteStats": {
        "description": "Website statistics",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WebsiteStats"
            }
          }
        }
      },
      "WebsiteDetails": {
        "description": "The website details",
        "headers": {
          "X-RateLimit-Limit": {
            "$ref": "#/components/headers/RateLimitLimit"
          },
          "X-RateLimit-Remaining": {
            "$ref": "#/components/headers/RateLimitRemaining"
          },
          "X-RateLimit-Reset": {
            "$ref": "#/components/headers/RateLimitReset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WebsiteDetails"
            }
          }
        }
      }
    },
    "parameters": {
      "webinarId": {
        "name": "webinarId",
        "in": "path",
        "description": "The webinar ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "yK6d"
      },
      "contactId": {
        "name": "contactId",
        "in": "path",
        "description": "The contact ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "pV3r"
      },
      "searchContactId": {
        "name": "searchContactId",
        "in": "path",
        "description": "The saved search contact identifier",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "pV3r"
      },
      "transactionalTemplateId": {
        "name": "transactionalTemplateId",
        "in": "path",
        "description": "Transactional emails template identifier",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "abc"
      },
      "transactionalEmailId": {
        "name": "transactionalEmailId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "tRe4i"
      },
      "fromFieldId": {
        "name": "fromFieldId",
        "in": "path",
        "description": "The 'From' address ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "TTzW"
      },
      "rssNewsletterId": {
        "name": "rssNewsletterId",
        "in": "path",
        "description": "The RSS newsletter ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "dGer"
      },
      "taxId": {
        "name": "taxId",
        "in": "path",
        "description": "The tax ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "Sk"
      },
      "customEventId": {
        "name": "customEventId",
        "in": "path",
        "description": "The custom event ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "hp2"
      },
      "formId": {
        "name": "formId",
        "in": "path",
        "description": "The form ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "pL4e"
      },
      "landingPageId": {
        "name": "landingPageId",
        "in": "path",
        "description": "The landing page ID.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "avYn"
      },
      "importId": {
        "name": "importId",
        "in": "path",
        "description": "The import ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "o6gE"
      },
      "predefinedFieldId": {
        "name": "predefinedFieldId",
        "in": "path",
        "description": "The predefined field identifier",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "6neM"
      },
      "categoryId": {
        "name": "categoryId",
        "in": "path",
        "description": "The category ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "C3s"
      },
      "suppressionId": {
        "name": "suppressionId",
        "in": "path",
        "description": "The suppression ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "pypF"
      },
      "orderId": {
        "name": "orderId",
        "in": "path",
        "description": "The order ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "fOh"
      },
      "languageCode": {
        "name": "languageCode",
        "in": "path",
        "description": "ISO 639-1 Language Code Standard",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "en"
      },
      "productId": {
        "name": "productId",
        "in": "path",
        "description": "The product ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "9I"
      },
      "shopId": {
        "name": "shopId",
        "in": "path",
        "description": "The shop ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "pf3"
      },
      "popupId": {
        "name": "popupId",
        "in": "path",
        "description": "The form or popup ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "ce84fabc-1349-4992-a2d7-0c44c5534128"
      },
      "splittestId": {
        "name": "splittestId",
        "in": "path",
        "description": "The send settings for the A/B test",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "9I"
      },
      "cartId": {
        "name": "cartId",
        "in": "path",
        "description": "The cart ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "V"
      },
      "fileId": {
        "name": "fileId",
        "in": "path",
        "description": "The file ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "6Yh"
      },
      "folderId": {
        "name": "folderId",
        "in": "path",
        "description": "The folder ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "Pa5"
      },
      "abTestId": {
        "name": "abTestId",
        "in": "path",
        "description": "A/B test ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "xyz"
      },
      "clickTrackId": {
        "name": "clickTrackId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "C12t"
      },
      "newsletterId": {
        "name": "newsletterId",
        "in": "path",
        "description": "The newsletter ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "N"
      },
      "tagId": {
        "name": "tagId",
        "in": "path",
        "description": "The tag ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "vBd5"
      },
      "addressId": {
        "name": "addressId",
        "in": "path",
        "description": "The address ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "k9"
      },
      "customFieldId": {
        "name": "customFieldId",
        "in": "path",
        "description": "The custom field ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "pas"
      },
      "lpsId": {
        "name": "lpsId",
        "in": "path",
        "description": "The landing page ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "ce84fabc-1349-4992-a2d7-0c44c5534128"
      },
      "variantId": {
        "name": "variantId",
        "in": "path",
        "description": "The variant ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "VTB"
      },
      "campaignId": {
        "name": "campaignId",
        "in": "path",
        "description": "The campaign ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "3Va2e"
      },
      "CampaignStatisticsIdQuery": {
        "name": "query[campaignId]",
        "in": "query",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CampaignStatisticsIdQuery"
        }
      },
      "CampaignStatisticsGroupByQuery": {
        "name": "query[groupBy]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "hour",
            "day",
            "month",
            "total"
          ],
          "example": "month"
        }
      },
      "CampaignStatisticsDateFromQuery": {
        "name": "query[createdOn][from]",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/DateOrDateTime"
        }
      },
      "CampaignStatisticsDateToQuery": {
        "name": "query[createdOn][to]",
        "in": "query",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/DateOrDateTime"
        }
      },
      "metaFieldId": {
        "name": "metaFieldId",
        "in": "path",
        "description": "The metafield ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "hgF"
      },
      "webformId": {
        "name": "webformId",
        "in": "path",
        "description": "The webform (Legacy Form) ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "3Va2e"
      },
      "gdprFieldId": {
        "name": "gdprFieldId",
        "in": "path",
        "description": "The GDPR field ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "MtY"
      },
      "workflowId": {
        "name": "workflowId",
        "in": "path",
        "description": "The workflow ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "3Va2e"
      },
      "smsId": {
        "name": "smsId",
        "in": "path",
        "description": "The SMS message ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "N"
      },
      "autoresponderId": {
        "name": "autoresponderId",
        "in": "path",
        "description": "The autoresponder ID.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "Q"
      },
      "websiteId": {
        "name": "websiteId",
        "in": "path",
        "description": "The website ID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "ce84fabc-1349-4992-a2d7-0c44c5534128"
      },
      "PerPage": {
        "name": "perPage",
        "in": "query",
        "description": "Requested number of results per page",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 100,
          "maximum": 1000,
          "minimum": 1
        }
      },
      "Page": {
        "name": "page",
        "in": "query",
        "description": "Page number",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "default": 1,
          "minimum": 1
        }
      },
      "Fields": {
        "name": "fields",
        "in": "query",
        "description": "List of fields that should be returned. Id is always returned. Fields should be separated by comma",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "NewShop": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewShop"
            }
          }
        }
      },
      "NewCategory": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewCategory"
            }
          }
        }
      },
      "UpdateCategory": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCategory"
            }
          }
        }
      },
      "UpdateShop": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateShop"
            }
          }
        }
      },
      "NewMetaField": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewMetaField"
            }
          }
        }
      },
      "NewProduct": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewProduct"
            }
          }
        }
      },
      "UpdateProduct": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateProduct"
            }
          }
        }
      },
      "UpsertProductCategory": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpsertProductCategory"
            }
          }
        }
      },
      "UpsertMetaField": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpsertMetaField"
            }
          }
        }
      },
      "UpdateMetaField": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateMetaField"
            }
          }
        }
      },
      "NewProductVariant": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewProductVariant"
            }
          }
        }
      },
      "UpdateProductVariant": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateProductVariant"
            }
          }
        }
      },
      "NewTax": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewTax"
            }
          }
        }
      },
      "UpdateTax": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateTax"
            }
          }
        }
      },
      "NewAddress": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewAddress"
            }
          }
        }
      },
      "UpdateAddress": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateAddress"
            }
          }
        }
      },
      "NewOrder": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewOrder"
            }
          }
        }
      },
      "UpdateOrder": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateOrder"
            }
          }
        }
      },
      "NewCart": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewCart"
            }
          }
        }
      },
      "UpdateCart": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCart"
            }
          }
        }
      },
      "NewSearchContacts": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewSearchContacts"
            }
          }
        }
      },
      "UpdateSearchContacts": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateSearchContacts"
            }
          }
        }
      },
      "SearchContactsConditionsDetails": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SearchContactsConditionsDetails"
            }
          }
        }
      },
      "CreateTransactionalEmail": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateTransactionalEmail"
            }
          }
        }
      },
      "CreateTransactionalEmailTemplate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreateTransactionalEmailTemplate"
            }
          }
        }
      },
      "updateTransactionalEmailsTemplate": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "subject": {
                  "description": "The template subject",
                  "type": "string",
                  "example": "Order Confirmation - Example Shop"
                },
                "content": {
                  "$ref": "#/components/schemas/TransactionalEmailTemplateContent"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "NewFromField": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewFromField"
            }
          }
        }
      },
      "NewCampaign": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewCampaign"
            }
          }
        }
      },
      "UpdateCampaign": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCampaign"
            }
          }
        }
      },
      "NewRssNewsletter": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewRssNewsletter"
            }
          }
        }
      },
      "UpdateRssNewsletter": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateRssNewsletter"
            }
          }
        }
      },
      "NewContact": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewContact"
            }
          }
        }
      },
      "UpsertContactCustomFields": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpsertContactCustomFields"
            }
          }
        }
      },
      "UpsertContactTags": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpsertContactTags"
            }
          }
        }
      },
      "UpdateContact": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateContact"
            }
          }
        }
      },
      "NewSuppression": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewSuppression"
            }
          }
        }
      },
      "UpdateSuppression": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateSuppression"
            }
          }
        }
      },
      "NewPredefinedField": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewPredefinedField"
            }
          }
        }
      },
      "UpdatePredefinedField": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdatePredefinedField"
            }
          }
        }
      },
      "UpdateCallbacks": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCallbacks"
            }
          }
        }
      },
      "TriggerCustomEvent": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TriggerCustomEvent"
            }
          }
        }
      },
      "NewCustomEvent": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewCustomEvent"
            }
          }
        }
      },
      "UpdateCustomEvent": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCustomEvent"
            }
          }
        }
      },
      "NewImport": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewImport"
            }
          }
        }
      },
      "NewFile": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewFile"
            }
          }
        }
      },
      "NewFolder": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewFolder"
            }
          }
        }
      },
      "NewAbtestsSubject": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewAbtestsSubject"
            }
          }
        }
      },
      "ChooseWinnerAbtestsSubject": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ChooseWinnerAbtestsSubject"
            }
          }
        }
      },
      "SendNewsletterDraft": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SendNewsletterDraft"
            }
          }
        }
      },
      "NewNewsletter": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewNewsletter"
            }
          }
        }
      },
      "NewTag": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewTag"
            }
          }
        }
      },
      "UpdateTag": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateTag"
            }
          }
        }
      },
      "UpdateAccountBlocklist": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateBlocklist"
            }
          }
        }
      },
      "UpdateCampaignBlocklist": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateBlocklist"
            }
          }
        }
      },
      "UpdateCustomField": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCustomField"
            }
          }
        }
      },
      "NewCustomField": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewCustomField"
            }
          }
        }
      },
      "CreateMultimedia": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "$ref": "#/components/schemas/CreateMultimedia"
            }
          }
        }
      },
      "UpdateAccount": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateAccount"
            }
          }
        }
      },
      "UpdateAccountBadge": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateAccountBadge"
            }
          }
        }
      },
      "UpdateWorkflow": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateWorkflow"
            }
          }
        }
      },
      "UpdateAutoresponder": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateAutoresponder"
            }
          }
        }
      },
      "NewAutoresponder": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewAutoresponder"
            }
          }
        }
      }
    },
    "headers": {
      "CurrentPage": {
        "description": "The current page number",
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "TotalPages": {
        "description": "The total number of pages",
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "TotalCount": {
        "description": "The total number of resources found for the specified conditions",
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "RateLimitLimit": {
        "description": "The total number of requests available per time frame",
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "RateLimitRemaining": {
        "description": "The number of requests left in the current time frame",
        "schema": {
          "type": "integer",
          "format": "int32"
        }
      },
      "RateLimitReset": {
        "description": "Seconds left in the current time frame, e.g. \"432 seconds\"",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "description": "Header value must be prefixed with api-key",
        "name": "X-Auth-Token",
        "in": "header"
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://app.getresponse.com/oauth2_authorize.html",
            "scopes": {
              "all": "all data access"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://app.getresponse.com/oauth2_authorize.html",
            "tokenUrl": "https://api.getresponse.com/v3/token",
            "scopes": {
              "all": "all data access"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://api.getresponse.com/v3/token",
            "scopes": {
              "all": "all data access"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Webinars"
    },
    {
      "name": "Contacts"
    },
    {
      "name": "Search Contacts"
    },
    {
      "name": "Transactional Email Templates"
    },
    {
      "name": "Transactional Emails"
    },
    {
      "name": "From Fields"
    },
    {
      "name": "RSS Newsletters"
    },
    {
      "name": "Taxes"
    },
    {
      "name": "Custom Events"
    },
    {
      "name": "Forms"
    },
    {
      "name": "Legacy Landing Pages"
    },
    {
      "name": "Imports"
    },
    {
      "name": "Predefined Fields"
    },
    {
      "name": "Categories"
    },
    {
      "name": "Suppressions"
    },
    {
      "name": "Orders"
    },
    {
      "name": "Subscription Confirmations"
    },
    {
      "name": "Products"
    },
    {
      "name": "Shops"
    },
    {
      "name": "Forms and Popups"
    },
    {
      "name": "A/B tests"
    },
    {
      "name": "Carts"
    },
    {
      "name": "File Library"
    },
    {
      "name": "A/B tests - subject"
    },
    {
      "name": "Click Tracks",
      "description": "Click tracking refers to the data collected about each link click, such as how many people clicked it, how many clicks resulted in desired actions such as sales, forwards or subscriptions."
    },
    {
      "name": "Newsletters"
    },
    {
      "name": "Tags"
    },
    {
      "name": "Addresses"
    },
    {
      "name": "Custom Fields"
    },
    {
      "name": "New Landing Pages"
    },
    {
      "name": "Multimedia"
    },
    {
      "name": "Tracking"
    },
    {
      "name": "Product Variants"
    },
    {
      "name": "Accounts"
    },
    {
      "name": "Campaigns (Lists)",
      "description": "Our API v3 uses the terminology from the previous version of GetResponse.\n\n**Campaigns and lists are the same resource under a different name.** For now, please refer to lists as campaigns.\n\nOur API v4 will use the updated terminology."
    },
    {
      "name": "Meta Fields"
    },
    {
      "name": "Legacy Forms"
    },
    {
      "name": "Workflows"
    },
    {
      "name": "SMS Automation Messages"
    },
    {
      "name": "SMS Messages"
    },
    {
      "name": "Autoresponders"
    },
    {
      "name": "Websites"
    }
  ],
  "externalDocs": {
    "description": "Find out more about API",
    "url": "https://apidocs.getresponse.com"
  },
  "x-tagGroups": [
    {
      "name": "User",
      "tags": [
        "Accounts",
        "Multimedia",
        "File Library"
      ]
    },
    {
      "name": "Contacts",
      "tags": [
        "Campaigns (Lists)",
        "Contacts",
        "Custom Fields",
        "Search Contacts",
        "Subscription Confirmations",
        "Predefined Fields",
        "Suppressions",
        "Imports"
      ]
    },
    {
      "name": "Email Marketing",
      "tags": [
        "Newsletters",
        "Autoresponders",
        "RSS Newsletters",
        "Legacy Landing Pages",
        "From Fields",
        "A/B tests",
        "A/B tests - subject",
        "Click Tracks"
      ]
    },
    {
      "name": "Tags",
      "tags": [
        "Tags"
      ]
    },
    {
      "name": "GDPR Fields",
      "tags": [
        "GDPR Fields"
      ]
    },
    {
      "name": "Forms and surveys",
      "tags": [
        "Legacy Forms",
        "Forms"
      ]
    },
    {
      "name": "Automation",
      "tags": [
        "Workflows",
        "Custom Events",
        "Tracking"
      ]
    },
    {
      "name": "Ecommerce",
      "tags": [
        "Addresses",
        "Carts",
        "Categories",
        "Meta Fields",
        "Orders",
        "Products",
        "Product Variants",
        "Shops",
        "Taxes"
      ]
    },
    {
      "name": "Transactional Emails",
      "tags": [
        "Transactional Emails",
        "Transactional Emails Templates"
      ]
    },
    {
      "name": "SMS",
      "tags": [
        "SMS Messages",
        "SMS Automation Messages"
      ]
    },
    {
      "name": "Statistics",
      "tags": [
        "Ecommerce",
        "Sms",
        "Website",
        "Landing Page",
        "Form and Popup"
      ]
    },
    {
      "name": "Webinars",
      "tags": [
        "Webinars"
      ]
    },
    {
      "name": "Websites",
      "tags": [
        "Websites",
        "Landing Pages"
      ]
    },
    {
      "name": "Forms and Popups",
      "tags": [
        "Forms and Popups"
      ]
    }
  ]
}