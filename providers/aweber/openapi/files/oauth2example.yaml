tags:
  OAuth2 Example: |
    The following examples show how to obtain an access token for an AWeber account using Python. For PHP, C#.NET, Ruby, and Node.js versions please see our 
    <a href="https://github.com/aweber/public-api-examples/blob/master/php/get-access-token" target="_blank">PHP</a>, 
    <a href="https://github.com/aweber/public-api-examples/blob/master/csharp/AWeber.Examples.GetAccessToken" target="_blank">C#.NET</a>,
    <a href="https://github.com/aweber/public-api-examples/blob/master/ruby/get_access_token.rb" target="_blank">Ruby</a>, and 
    <a href="https://github.com/aweber/public-api-examples/blob/master/node/get-access-token.js" target="_blank">Node.js</a> code samples on GitHub.
    
    ## Get An Access Token
    Below is a python example using the `requests_oauthlib` OAuth library to
    obtain an accounts access tokens.
    
    You will need:
    - The `Client ID`, `Client Secret`, and `Redirect URI` from your integration,
    available on the <a href="https://labs.aweber.com/apps" target="_blank">My Apps Page</a>.
    - The list of scopes to allow for the customer's account.
    - The `username` and `password` for an AWeber account that you want to connect.
    
    ```python
    from requests_oauthlib import OAuth2Session
    
    AUTHORIZATION_BASE_URL = 'https://auth.aweber.com/oauth2/authorize'
    TOKEN_URL = 'https://auth.aweber.com/oauth2/token'
    
    client_id = '*****'
    client_secret = '*****'
    redirect_uri = 'YOUR_REDIRECT_URI'
    
    # Sample scopes. Put the ones that you need here.
    scope = ['account.read', 'list.read', 'subscriber.read']
    
    # Create a new OAuth2Session with your information.
    aweber = OAuth2Session(client_id, redirect_uri=redirect_uri, scope=scope)
    
    # requests_oauthlib generates a state token for us, 
    # but you can optionally specify your own.
    authorization_url, state = aweber.authorization_url(AUTHORIZATION_BASE_URL)
    
    # Open link in browser to authorize.
    print('Go here to authorize:', authorization_url)
    
    # Get the auth code from the callback.
    redirect_response = input('Enter the full redirect URL: ')
    
    # Use the auth code to get access tokens.
    token = aweber.fetch_token(TOKEN_URL, client_secret=client_secret,
                               authorization_response=redirect_response)
    
    print('Access Token:  ', token['access_token'])
    print('Refresh Token: ', token['refresh_token'])
    print('Token Type:    ', token['token_type'])
    print('Expires In:    ', token['expires_in'])
    print('Expires At:    ', token['expires_at'])
    
    resp = aweber.get('https://api.aweber.com/1.0/accounts')
    resp.raise_for_status()
    print(resp.json())
    
    ```
    
    Now you should have your access token and account id from the output. The
    last call in the example is to retrieve the /accounts resource in order to
    retrieve the account id. The `account id` and `access token` are needed for every api call.
    
    ## Distributing the application's source code?
    If you are making the source code of your integration public, you may not have
    a means to distribute the client secret securely. If you cannot guarantee the confidentiality
    of your client secret, then you are required to use **Proof Key for Code Exchange** as
    described in [Public or confidential](#public-or-confidential).
    
    Below is an example on how to authenticate using PKCE with the `requests_oauthlib`
    library.  You will need:
    - The `Client ID`, and `Redirect URI` from your integration, available on the
    <a href="https://labs.aweber.com/apps" target="_blank">My Apps Page</a>.
    - The list of scopes to allow for the customer's account.
    - The `username` and `password` for an AWeber account that you want to connect.
    
    ```python
    import base64
    import hashlib
    import os
    import urllib as parse
    
    from requests_oauthlib import OAuth2Session
    
    AUTHORIZATION_BASE_URL = 'https://auth.aweber.com/oauth2/authorize'
    TOKEN_URL = 'https://auth.aweber.com/oauth2/token'
    
    client_id = input('Your client ID:    ')
    redirect_uri = input('Your redirect URI: ')
    
    # Sample scopes. Put the ones that you need here.
    scope = ['account.read', 'list.read', 'subscriber.read']
    
    # Create a new OAuth2Session with your information.
    aweber = OAuth2Session(client_id, redirect_uri=redirect_uri, scope=scope)
    
    # Generate a valid code verifier and derived code challenge.
    verifier_bytes = os.urandom(32)
    code_verifier = base64.urlsafe_b64encode(verifier_bytes).rstrip(b'=')
    challenge_bytes = hashlib.sha256(code_verifier).digest()
    code_challenge = base64.urlsafe_b64encode(challenge_bytes).rstrip(b'=')
    
    # requests_oauthlib generates a state token for us, 
    # but you can optionally specify your own.
    authorization_url, state = aweber.authorization_url(
        AUTHORIZATION_BASE_URL, code_challenge=code_challenge,
        code_challenge_method='S256')
    
    # Open link in browser to authorize.
    print('Go here to authorize:', authorization_url)
    
    # Get the auth code from the callback.
    redirect_response = input('Enter the full redirect URL: ')
    
    # Use the auth code to get access tokens.
    token = aweber.fetch_token(
        TOKEN_URL, authorization_response=redirect_response, client_secret=None,
        body=parse.urlencode({'code_verifier': code_verifier}))
    
    print('Access Token:  ', token['access_token'])
    print('Refresh Token: ', token['refresh_token'])
    print('Token Type:    ', token['token_type'])
    print('Expires In:    ', token['expires_in'])
    print('Expires At:    ', token['expires_at'])
    
    resp = aweber.get('https://api.aweber.com/1.0/accounts')
    resp.raise_for_status()
    print(resp.json())
    ```
