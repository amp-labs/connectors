package {{ .Package }}

import (
	"context"
	"net/http"

	"github.com/amp-labs/connectors/common/scanning/credscanning"
	"github.com/amp-labs/connectors/{{ .Package }}"
	"github.com/amp-labs/connectors/providers"
	"github.com/amp-labs/connectors/test/utils"
	"golang.org/x/oauth2"
)

func Get{{ .Provider }}Connector(ctx context.Context) *{{ .Package }}.Connector {
	filePath := credscanning.LoadPath(providers.{{ .Provider }})
	reader := utils.MustCreateProvCredJSON(filePath, true)

	// TODO provide required options
	conn, err := {{ .Package }}.NewConnector(
		{{ .Package }}.WithClient(ctx, http.DefaultClient, cfg, tok),
		{{ .Package }}.WithWorkspace(workspace),
		{{ .Package }}.WithModule({{ .Package }}.ModuleName),
	)
	if err != nil {
		utils.Fail("error creating connector", "error", err)
	}

	return conn
}

func getConfig(reader *credscanning.ProviderCredentials) *oauth2.Config {
	return &oauth2.Config{
		ClientID:     reader.Get(credscanning.Fields.ClientId),
		ClientSecret: reader.Get(credscanning.Fields.ClientSecret),
		RedirectURL:  "http://localhost:8080/callbacks/v1/oauth",
		Endpoint: oauth2.Endpoint{
			AuthURL:   "",
			TokenURL:  "",
			AuthStyle: oauth2.AuthStyleInParams,
		},
		Scopes: []string{},
	}
}
