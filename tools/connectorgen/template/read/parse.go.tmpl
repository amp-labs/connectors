package {{ .Package }}

import (
	"github.com/amp-labs/connectors/common"
	"github.com/amp-labs/connectors/common/jsonquery"
	"github.com/amp-labs/connectors/common/urlbuilder"
	"github.com/spyzhov/ajson"
)

func getTotalSize(node *ajson.Node) (int64, error) {
	// TODO replace `data`. Put a name of a field that holds response array
	return jsonquery.New(node).ArraySize("data")
}

func getRecords(node *ajson.Node) ([]map[string]any, error) {
	// TODO replace `data`. Put a name of a field that holds response array
	arr, err := jsonquery.New(node).Array("data", false)

	if err != nil {
		return nil, err
	}

	return jsonquery.Convertor.ArrayToMap(arr)
}

// TODO some connectors don't offer Next URL, so you can infer it using URL for current page.
func makeNextRecordsURL(reqLink *urlbuilder.URL) common.NextPageFunc {
	return func(node *ajson.Node) (string, error) {
		// TODO implement
		// * locate cursor to build URL
		// * or locate next page URL
		startingAfter, err := jsonquery.New(node, "pages", "next").Str("cursor", true)
		if err != nil {
			return "", err
		}

		if startingAfter == nil {
			// next page doesn't exist
			return "", nil
		}

		reqLink.WithQueryParam("cursor", *startingAfter)

		return reqLink.String(), nil
	}
}

func getMarshaledData(records []map[string]interface{}, fields []string) ([]common.ReadResultRow, error) {
	data := make([]common.ReadResultRow, len(records))

	for i, record := range records {
		data[i] = common.ReadResultRow{
			Fields: common.ExtractLowercaseFieldsFromRaw(fields, record),
			Raw:    record,
		}
	}

	return data, nil
}
