{
  "swagger": "2.0",
  "info": {
    "description": "Marketo Rest API",
    "version": "1.0",
    "title": "Marketo Rest API",
    "termsOfService": "https://www.marketo.com/company/legal/",
    "contact": {
      "name": "Marketo Developer Relations",
      "url": "http://developers.marketo.com",
      "email": "developerfeedback@marketo.com"
    },
    "license": {
      "name": "API License Agreement",
      "url": "http://developers.marketo.com/api-license/"
    }
  },
  "host": "388-INB-483.mktorest.com",
  "basePath": "/",
  "schemes": ["https"],
  "tags": [
    { "name": "Tokens", "description": "Token Controller" },
    { "name": "Channels", "description": "Channel Controller" },
    { "name": "Files", "description": "File Controller" },
    { "name": "Segments", "description": "Segment Controller" },
    {
      "name": "Landing Page Content",
      "description": "Landing Page Content Controller"
    },
    { "name": "Snippets", "description": "Snippet Controller" },
    { "name": "Smart Lists", "description": "Smart List Controller" },
    { "name": "Static Lists", "description": "Static List Controller" },
    { "name": "Landing Pages", "description": "Landing Page Controller" },
    {
      "name": "Landing Page Redirect Rules",
      "description": "Landing Page Redirect Rule Controller"
    },
    { "name": "Forms", "description": "Form Controller" },
    { "name": "Form Fields", "description": "Form Field Controller" },
    { "name": "Tags", "description": "Tag Controller" },
    { "name": "Programs", "description": "Program Controller" },
    { "name": "Email Templates", "description": "Email Template Controller" },
    { "name": "Folders", "description": "Folder Controller" },
    {
      "name": "Landing Page Templates",
      "description": "Landing Page Template Controller"
    },
    { "name": "Emails", "description": "Email Controller" },
    { "name": "Smart Campaigns", "description": "Smart Campaign Controller" },
    { "name": "File Contents", "description": "File Content Controller" }
  ],
  "paths": {
    "/rest/asset/v1/channel/byName.json": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get Channel by Name",
        "description": "Retrieves channels based on the provided name. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getChannelByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Name of channel to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfChannelResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/channels.json": {
      "get": {
        "tags": ["Channels"],
        "summary": "Get Channels",
        "description": "Retrieves all channels. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getAllChannelsUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfChannelResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/byName.json": {
      "get": {
        "tags": ["Emails"],
        "summary": "Get Email by Name",
        "description": "Returns an email records based on the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getEmailByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the email",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}.json": {
      "get": {
        "tags": ["Emails"],
        "summary": "Get Email By Id",
        "description": "Returns an email records by its id.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getEmailByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailResponse" }
          }
        }
      },
      "post": {
        "tags": ["Emails"],
        "summary": "Update Email Metadata",
        "description": "Updates the metadata of an email asset.  Required Permissions: Read-Write Assets",
        "operationId": "updateEmailUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateEmailRequest",
            "description": "updateEmailRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateEmailMetaDataRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/approveDraft.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Approve Email Draft",
        "description": "Approves the current draft of an email.  Required Permissions: Approve Assets",
        "operationId": "approveDraftUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/clone.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Clone Email",
        "description": "Clones the target email. Required Permissions: Read-Write Assets",
        "operationId": "cloneEmailUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "cloneEmailRequest",
            "description": "cloneEmailRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CloneEmailRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/content.json": {
      "get": {
        "tags": ["Emails"],
        "summary": "Get Email Content",
        "description": "Returns the content of the designated email.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getEmailContentByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailContentResponse" }
          }
        }
      },
      "post": {
        "tags": ["Emails"],
        "summary": "Update Email Content",
        "description": "Updates the content of an email.  Required Permissions: Read-Write Assets",
        "operationId": "updateEmailContentUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateEmailRequest",
            "description": "updateEmailRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmailComponentDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/content/rearrange.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Rearrange Email Modules",
        "description": "Rearranges the modules in an email.  Required Permissions: Read-Write Assets",
        "operationId": "rearrangeModulesUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "positions",
            "description": "JSON array of module positions.  Each position must be a JSON object with members 'index' and a 'moduleId'",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailModuleResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/content/{htmlId}.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Update Email Content Section",
        "description": "Updates the content in the given section.  Required Permissions: Read-Write Assets",
        "operationId": "updateEmailComponentContentUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "htmlId",
            "in": "path",
            "description": "htmlId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmailComponentContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/content/{moduleId}/add.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Add Email Module",
        "description": "Adds a new module to an email, with the given id.  Required Permissions: Read-Write Assets",
        "operationId": "addModuleUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "moduleId",
            "in": "path",
            "description": "moduleId",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the module",
            "required": true,
            "type": "string"
          },
          {
            "name": "index",
            "in": "query",
            "description": "Index of the module.  Determines the order of the module in the email.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailModuleResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/content/{moduleId}/delete.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Delete Module",
        "description": "Deletes the given module from the email.  Required Permissions: Read-Write Assets",
        "operationId": "deleteModuleUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "moduleId",
            "in": "path",
            "description": "moduleId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailModuleResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/content/{moduleId}/duplicate.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Duplicate Email Module",
        "description": "Creates a copy of the designated module in an email.  Required Permissions: Read-Write Assets",
        "operationId": "duplicateModuleUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "moduleId",
            "in": "path",
            "description": "moduleId",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the new module",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailModuleResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/content/{moduleId}/rename.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Rename Email Module",
        "description": "Renames a module.  Required Permissions: Read-Write Assets",
        "operationId": "renameUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "moduleId",
            "in": "path",
            "description": "moduleId",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "New module name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailModuleResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/delete.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Delete Email",
        "description": "Deletes the target email.  Required Permissions: Read-Write Assets",
        "operationId": "deleteEmailUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/discardDraft.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Discard Email Draft",
        "description": "Discards the current draft of an email.  Required Permissions: Read-Write Assets",
        "operationId": "discardDraftUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/dynamicContent/{contentId}.json": {
      "get": {
        "tags": ["Emails"],
        "summary": "Get Email Dynamic Content",
        "description": "Retrieves the dyanmic content record for the given section.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getEmailDynamicContentUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of email",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contentId",
            "in": "path",
            "description": "Id of email dynamic content section",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailDynamicContentResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Emails"],
        "summary": "Update Email Dynamic Content Section",
        "description": "Updates dynamic content in the given section.  Required Permissions: Read-Write Assets",
        "operationId": "updateEmailDynamicContentUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of email",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contentId",
            "in": "path",
            "description": "Id of email dynamic content section",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "Content properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmailDynamicContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/sendSample.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Send Sample Email",
        "description": "Sends a sample email to the given email address.  Leads may be impersonated to populate data for tokens and dynamic content. Required Permissions: Read-Write Assets",
        "operationId": "sendSampleEmailUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the email",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "sendSampleEmailRequest",
            "description": "sendSampleEmailRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/SendSampleEmailRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSendSampleResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/unapprove.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Unapprove Email",
        "description": "Unapproves the email and reverts it to a draft-only state.  Required Permissions: Approve Assets",
        "operationId": "unapproveDraftUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/variable/{name}.json": {
      "post": {
        "tags": ["Emails"],
        "summary": "Update Email Variable",
        "description": "Updates the value of a given variable in an email.  Required Permissions: Read-Write Assets",
        "operationId": "updateVariableUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateVariableRequest",
            "description": "updateVariableRequest",
            "required": false,
            "schema": { "$ref": "#/definitions/UpdateVariableRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailVariableResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/variables.json": {
      "get": {
        "tags": ["Emails"],
        "summary": "Get Email Variables",
        "description": "Returns a list of the available variables in an email.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getEmailVariablesUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailVariableResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/email/ccFields.json": {
      "get": {
        "tags": ["Emails"],
        "summary": "Get Email CC Fields",
        "description": "Returns the set of fields enabled for Email CC in the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getEmailCCFieldsUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailCCFieldsResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplate/byName.json": {
      "get": {
        "tags": ["Email Templates"],
        "summary": "Get Email Template by Name",
        "description": "Retrieves and email template record by the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getTemplateByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplate/{id}.json": {
      "get": {
        "tags": ["Email Templates"],
        "summary": "Get Email Template by Id",
        "description": "Returns an email template record by its id. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getTemplateByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Email Templates"],
        "summary": "Update Email Template Metadata",
        "description": "Updates the metadata for the designated email template.  Required Permissions: Read-Write Assets",
        "operationId": "updateEmailTemplateUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateEmailMetaDataRequest",
            "description": "updateEmailMetaDataRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmailTemplateMetaDataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplate/{id}/approveDraft.json": {
      "post": {
        "tags": ["Email Templates"],
        "summary": "Approve Email Template Draft",
        "description": "Approves the current draft of the email template.  Required Permissions: Approve Assets",
        "operationId": "approveDraftUsingPOST_1",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplate/{id}/clone.json": {
      "post": {
        "tags": ["Email Templates"],
        "summary": "Clone Email Template",
        "description": "Clones the designated email template.  Required Permissions: Read-Write Assets",
        "operationId": "cloneTemplateUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "cloneEmailTemplateRequest",
            "description": "cloneEmailTemplateRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CloneEmailTemplateRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplate/{id}/content": {
      "get": {
        "tags": ["Email Templates"],
        "summary": "Get Email Template Content by Id",
        "description": "Returns the content for a given email template.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getTemplateContentByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateContentResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplate/{id}/content.json": {
      "post": {
        "tags": ["Email Templates"],
        "summary": "Update Email Template Content",
        "description": "Updates the content of the given email template.  Required Permissions: Read-Write Assets",
        "operationId": "updateEmailTemplateContentUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateEmailTemplateContentRequest",
            "description": "updateEmailTemplateContentRequest",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateEmailTemplateContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplate/{id}/delete.json": {
      "post": {
        "tags": ["Email Templates"],
        "summary": "Delete Email Template",
        "description": "Deletes the designated email template.  Required Permissions: Read-Write Assets",
        "operationId": "deleteTemplateUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplate/{id}/discardDraft.json": {
      "post": {
        "tags": ["Email Templates"],
        "summary": "Discard Email Template Draft",
        "description": "Discards the current draft of the email template.  Required Permissions: Read-Write Assets",
        "operationId": "discardDraftUsingPOST_1",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplate/{id}/unapprove.json": {
      "post": {
        "tags": ["Email Templates"],
        "summary": "Unapprove Email Template Draft",
        "description": "Unapproves the current approved version of the Email Template.  Required Permissions: Approve Assets",
        "operationId": "unapproveDraftUsingPOST_1",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplates.json": {
      "get": {
        "tags": ["Email Templates"],
        "summary": "Get Email Templates",
        "description": "Returns a list of email template records accessible in the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getEmailTemplatesUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Email Templates"],
        "summary": "Create Email Template",
        "description": "Creates a new email template.  Required Permissions: Read-Write Assets",
        "operationId": "createEmailTemplateUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createEmailTemplateRequest",
            "description": "createEmailTemplateRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateEmailTemplateRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/emailTemplates/{id}/usedBy.json": {
      "get": {
        "tags": ["Email Templates"],
        "summary": "Get Email Template Used By",
        "description": "Returns a list of email records which depend on a given email template.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getEmailTemplateUsedByUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the email template",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfEmailTemplateUsedByResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/emails.json": {
      "get": {
        "tags": ["Emails"],
        "summary": "Get Emails",
        "description": "Returns a list of emails matching the given filter parameters.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getEmailUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of emails to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "earliestUpdatedAt",
            "in": "query",
            "description": "Exclude emails prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "type": "string"
          },
          {
            "name": "latestUpdatedAt",
            "in": "query",
            "description": "Exclude emails after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailResponse" }
          }
        }
      },
      "post": {
        "tags": ["Emails"],
        "summary": "Create Email",
        "description": "Creates a new email asset.  Required Permissions: Read-Write Assets",
        "operationId": "createEmailUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createEmailRequest",
            "description": "createEmailRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateEmailRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfEmailResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/email/{id}/fullContent.json": {
      "get": {
        "tags": ["Emails"],
        "summary": "Get Email Full Content",
        "description": "Returns the serialized HTML version of the email.  Required Permissions: Read-Only Assets, Read-Write Assets.  If leadId is passed in the request: Read-Only Lead, Read-Write Lead.",
        "operationId": "getEmailFullContentUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the email",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not.",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "leadId",
            "in": "query",
            "description": "The lead id to impersonate.  Email is rendered as though it was received by this lead.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Email content type to return.  Default is HTML.",
            "required": false,
            "type": "string",
            "enum": ["Text", "HTML"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfGetEmailFullContentResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Emails"],
        "summary": "Update Email Full Content",
        "description": "Replaces the HTML of an Email that has had its relationship broken from its template.  Required Permissions: Read-Write Assets",
        "operationId": "createEmailFullContentUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the email",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateEmailFullContentRequest",
            "description": "Content is multipart file parameter",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateEmailFullContentRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfUpdateEmailFullContentResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/file/byName.json": {
      "get": {
        "tags": ["Files"],
        "summary": "Get File by Name",
        "description": "Returns files records for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getFileByNameUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the file",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFileResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/file/{id}.json": {
      "get": {
        "tags": ["Files"],
        "summary": "Get File by Id",
        "description": "Returns the file record for the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getFileByIdUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for file in database",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFileResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/file/{id}/content.json": {
      "post": {
        "tags": ["File Contents"],
        "summary": "Update File Content",
        "description": "Replaces the current content of the file with the included payload.  Required Permissions: Read-Write Assets",
        "operationId": "updateContentUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for file in database",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateFileContentRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFileResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/files.json": {
      "get": {
        "tags": ["Files"],
        "summary": "Get Files",
        "description": "Returns the files from the given folder. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getFilesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging.  Default 0",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of files to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFileResponse" }
          }
        }
      },
      "post": {
        "tags": ["Files"],
        "summary": "Create File",
        "description": "Creates a new file from the included payload. Required Permissions: Read-Write Assets",
        "operationId": "createFileUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createFileRequest",
            "description": "createFileRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateFileRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFileResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/folder/byName.json": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get Folder by Name",
        "description": "Returns a folder record for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getFolderByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the folder.  Not applicable for Programs",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of folder.  'Folder' or 'Program'",
            "required": false,
            "type": "string"
          },
          {
            "name": "root",
            "in": "query",
            "description": "Parent folder reference",
            "required": false,
            "type": "string"
          },
          {
            "name": "workSpace",
            "in": "query",
            "description": "Name of the workspace",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFolderResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/folder/{id}.json": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get Folder by Id",
        "description": "Returns the folder record with the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getFolderByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the folder to retrieve",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of folder.  'Folder' or 'Program'",
            "required": true,
            "type": "string",
            "default": "Folder",
            "enum": ["Folder", "Program"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFolderResponse" }
          }
        }
      },
      "post": {
        "tags": ["Folders"],
        "summary": "Update Folder Metadata",
        "description": "Updates the metadata for a given folder.  Required Permissions: Read-Write Assets",
        "operationId": "updateFolderUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the folder to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateFolderRequest",
            "description": "updateFolderRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateFolderRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFolderResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/folder/{id}/content.json": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get Folder Contents",
        "description": "Returns records for the contents of a given folder.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getFolderContentUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the folder to retrieve",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of folder.  'Folder' or 'Program'.  Default is 'Folder'",
            "required": true,
            "type": "string",
            "enum": ["Folder", "Program"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfFolderContentResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/folder/{id}/delete.json": {
      "post": {
        "tags": ["Folders"],
        "summary": "Delete Folder",
        "description": "Deletes the designated folder.  Deletion will fail if the folder has content.  Required Permissions: Read-Write Assets",
        "operationId": "deleteFolderUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the folder to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "formData",
            "description": "type",
            "required": true,
            "type": "string",
            "default": "Folder",
            "enum": ["Program", "Folder"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/folder/{id}/tokens.json": {
      "get": {
        "tags": ["Tokens"],
        "summary": "Get Tokens by Folder Id",
        "description": "Retrieves the list of available My Tokens in the target folder.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getTokensByFolderIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "folderType",
            "in": "query",
            "description": "Type of folder.  'Folder' or 'Program'",
            "required": false,
            "type": "string",
            "default": "Folder",
            "enum": ["Folder", "Program"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfTokenResponse" }
          }
        }
      },
      "post": {
        "tags": ["Tokens"],
        "summary": "Create Token",
        "description": "Create or update a token in the parent folder.  Required Permissions: Read-Write Assets",
        "operationId": "addTokenTOFolderUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the folder to which the token will be associated with",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "createTokenRequest",
            "description": "createTokenRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateTokenRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfTokenResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/folder/{id}/tokens/delete.json": {
      "post": {
        "tags": ["Tokens"],
        "summary": "Delete Token by Name",
        "description": "Deletes a token with the given name from the parent folder.  Required Permissions: Read-Write Assets",
        "operationId": "deleteTokenByNameUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "deleteTokenRequest",
            "description": "deleteTokenRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/DeleteTokenRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/folders.json": {
      "get": {
        "tags": ["Folders"],
        "summary": "Get Folders",
        "description": "Retrieves child folders from within a given root folder.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getFolderUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "root",
            "in": "query",
            "description": "Parent folder reference",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxDepth",
            "in": "query",
            "description": "Maximum folder depth to traverse, Default 2",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of folders to return. Default 20, maximum 200",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging.  Default 0",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "workSpace",
            "in": "query",
            "description": "Name of the workspace",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFolderResponse" }
          }
        }
      },
      "post": {
        "tags": ["Folders"],
        "summary": "Create Folder",
        "description": "Creates a new folder.  Required Permissions: Read-Write Assets",
        "operationId": "createFolderUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createFolderRequest",
            "description": "createFolderRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateFolderRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFolderResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/byName.json": {
      "get": {
        "tags": ["Forms"],
        "summary": "Get Form by Name",
        "description": "Retrieves a form record by its name. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLpFormByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the form",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/fields.json": {
      "get": {
        "tags": ["Form Fields"],
        "summary": "Get Available Form Fields",
        "description": "Retrieves a list of all valid fields for use in forms. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getAllFieldsUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of fields to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfFieldsMetaDataResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/form/programMemberFields.json": {
      "get": {
        "tags": ["Form Fields"],
        "summary": "Get Available Form Program Member Fields",
        "description": "Retrieves a list of all valid Program Member fields for use in forms. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getAllProgramMemberFieldsUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of fields to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfFieldsMetaDataResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/form/{formId}/field/{fieldId}/visibility.json": {
      "post": {
        "tags": ["Form Fields"],
        "summary": "Add Form Field Visibility Rules",
        "description": "Adds a visibility rule to the target form field.  Required Permissions: Read-Write Assets",
        "operationId": "addFormFieldVisibilityRuleUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "formId",
            "in": "path",
            "description": "formId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "fieldId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "addFormFieldVisibilityRequest",
            "description": "addFormFieldVisibilityRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/AddFormFieldVisibilityRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfFormVisibilityRuleResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}.json": {
      "get": {
        "tags": ["Forms"],
        "summary": "Get Form By Id",
        "description": "Retrieves a form record by its id. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLpFormByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormResponse" }
          }
        }
      },
      "post": {
        "tags": ["Forms"],
        "summary": "Update Form Metadata",
        "description": "Updates the metadata of the target form.  Required Permissions: Read-Write Assets",
        "operationId": "updateFormsUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateFormMetaDataRequest",
            "description": "updateFormMetaDataRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateFormMetaDataRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/approveDraft.json": {
      "post": {
        "tags": ["Forms"],
        "summary": "Approve Form Draft",
        "description": "Approves the current draft of the form.  This will delete the current approved version of the form.  Required Permissions: Approve Assets",
        "operationId": "approveFromUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/clone.json": {
      "post": {
        "tags": ["Forms"],
        "summary": "Clone Form",
        "description": "Clones the target form.  Required Permissions: Read-Write Assets",
        "operationId": "cloneLpFormsUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "cloneFormRequest",
            "description": "cloneFormRequest",
            "required": false,
            "schema": { "$ref": "#/definitions/CloneFormRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/delete.json": {
      "post": {
        "tags": ["Forms"],
        "summary": "Delete Form",
        "description": "Deletes the target form.  Forms which are in use by landing pages may not be deleted until they are removed from all landing pages.  Required Permissions: Read-Write Assets",
        "operationId": "deleteFormByIdUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/discardDraft.json": {
      "post": {
        "tags": ["Forms"],
        "summary": "Discard Form Draft",
        "description": "Discards the current draft of the form.  Required Permissions: Read-Write Assets",
        "operationId": "discardFormByIdUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/field/{fieldId}.json": {
      "post": {
        "tags": ["Form Fields"],
        "summary": "Update Form Field",
        "description": "Updates the configuration for that target field. Required Permissions: Read-Write Assets",
        "operationId": "updateFormFieldUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "fieldId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateFormFieldRequest",
            "description": "updateFormFieldRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateFormFieldRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormFieldResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/field/{fieldId}/delete.json": {
      "post": {
        "tags": ["Form Fields"],
        "summary": "Delete Form Field",
        "description": "Deletes a field from a form. Required Permissions: Read-Write Assets",
        "operationId": "deleteFormFieldUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "fieldId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/fieldSet.json": {
      "post": {
        "tags": ["Form Fields"],
        "summary": "Add Fieldset to Form",
        "description": "Adds a field set to the target form.  Required Permissions: Read-Write Assets",
        "operationId": "addFieldSetUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "addFormFieldSetRequest",
            "description": "addFormFieldSetRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/AddFormFieldSetRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormFieldResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/fieldSet/{fieldSetId}/field/{fieldId}/delete.json": {
      "post": {
        "tags": ["Form Fields"],
        "summary": "Delete Field from Fieldset",
        "description": "Removes the target field from the fieldset. Required Permissions: Read-Write Assets",
        "operationId": "deleteFormFieldFromFieldSetUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fieldSetId",
            "in": "path",
            "description": "fieldSetId",
            "required": true,
            "type": "string"
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "fieldId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/fields.json": {
      "get": {
        "tags": ["Form Fields"],
        "summary": "Get Fields for Form",
        "description": "Retrieves the list of fields in the target form.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getFormFieldByFormVidUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormFieldResponse" }
          }
        }
      },
      "post": {
        "tags": ["Form Fields"],
        "summary": "Add Field to Form",
        "description": "Adds a field to a form. Required Permissions: Read-Write Assets",
        "operationId": "addFieldToAFormUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "addFormFieldSetRequest",
            "description": "addFormFieldSetRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/AddFormFieldRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormFieldResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/reArrange.json": {
      "post": {
        "tags": ["Form Fields"],
        "summary": "Update Field Positions",
        "description": "Reorders the list of fields in a form. Required Permissions: Read-Write Assets",
        "operationId": "updateFieldPositionsUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "reArrangeRequest",
            "description": "reArrangeRequest",
            "required": false,
            "schema": { "$ref": "#/definitions/ReArrangeRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/richText.json": {
      "post": {
        "tags": ["Form Fields"],
        "summary": "Add Rich Text Field",
        "description": "Adds a rich-text type field to the form.  Required Permissions: Read-Write Assets",
        "operationId": "addRichTextFieldUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "addRichTextRequest",
            "description": "addRichTextRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/AddRichTextRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormFieldResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/submitButton.json": {
      "post": {
        "tags": ["Forms"],
        "summary": "Update Submit Button",
        "description": "Updates the submit button configuration for the target form.  Required Permissions: Read-Write Assets",
        "operationId": "updateFormSubmitButtonUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "submitButtonRequest",
            "description": "submitButtonRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/SubmitButtonRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/thankYouPage.json": {
      "get": {
        "tags": ["Forms"],
        "summary": "Get Thank You Page by Form Id",
        "description": "Returns the thank you page configuration for a given form.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getThankYouPageByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfThankYouPageResponse" }
          }
        }
      },
      "post": {
        "tags": ["Forms"],
        "summary": "Update Thank You Page",
        "description": "Updates the thank you page configuration for a given form.  This update is destructive and the resulting draft will not have any memory of the previous configuration.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "updateThankYouPageByIdUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "thankYouPageRequest",
            "description": "thankYouPageRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateThankYouPageRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfThankYouPageResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/forms.json": {
      "get": {
        "tags": ["Forms"],
        "summary": "Get Forms",
        "description": "Retrieves a list of accessible form records from the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "browseForms2UsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormResponse" }
          }
        }
      },
      "post": {
        "tags": ["Forms"],
        "summary": "Create Form",
        "description": "Creates a new form.  Required Permissions: Read-Write Assets",
        "operationId": "createLpFormsUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createFormRequest",
            "description": "createFormRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateLpFormRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpFormResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/form/{id}/usedBy.json": {
      "get": {
        "tags": ["Forms"],
        "summary": "Get Form Used By",
        "description": "Returns a list of asset records which depend on a given form.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getFormUsedByUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the form",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of assets to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfFormUsedByResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/byName.json": {
      "get": {
        "tags": ["Landing Pages"],
        "summary": "Get Landing Page by Name",
        "description": "Returns the landing page record for the given name. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLandingPageByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the landing page",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLandingPageResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}.json": {
      "get": {
        "tags": ["Landing Pages"],
        "summary": "Get Landing Page by Id",
        "description": "Returns the landing record for the given id. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLandingPageByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLandingPageResponse" }
          }
        }
      },
      "post": {
        "tags": ["Landing Pages"],
        "summary": "Update Landing Page Metadata",
        "description": "Updates the metadata for the targe landing page.  Required Permissions: Read-Write Assets",
        "operationId": "updateLandingPageUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateLandingPageRequest",
            "description": "updateLandingPageRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateLandingPageRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLandingPageResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/approveDraft.json": {
      "post": {
        "tags": ["Landing Pages"],
        "summary": "Approve Landing Page Draft",
        "description": "Approves the current draft of the landing page.  Required Permissions: Approve Assets",
        "operationId": "approveLandingPageUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/clone.json": {
      "post": {
        "tags": ["Landing Pages"],
        "summary": "Clone Landing Page",
        "description": "Clones the target landing page. Required Permissions: Read-Write Assets",
        "operationId": "cloneLandingPageUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "cloneLandingPageRequest",
            "description": "cloneLandingPageRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CloneLandingPageRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLandingPageResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/content.json": {
      "get": {
        "tags": ["Landing Page Content"],
        "summary": "Get Landing Page Content",
        "description": "Retrieves the list of content sections in the target landing page.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLandingPageContentUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfLandingPageContentResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Landing Page Content"],
        "summary": "Add Landing Page Content Section",
        "description": "Adds a content section to the target landing page. Parameters must be sent as application/x-www-form-urlencoded (not JSON).  Required Permissions: Read-Write Assets",
        "operationId": "addLandingPageContentUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLandingPageContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/content/{contentId}.json": {
      "post": {
        "tags": ["Landing Page Content"],
        "summary": "Update Landing Page Content Section",
        "description": "Updates a content section the landing page. Parameters must be sent as application/x-www-form-urlencoded (not JSON).  Required Permissions: Read-Write Assets",
        "operationId": "updateLandingPageContentUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of landing page",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contentId",
            "in": "path",
            "description": "Id of landing page content section",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "Content properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLandingPageContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/content/{contentId}/delete.json": {
      "post": {
        "tags": ["Landing Page Content"],
        "summary": "Delete Landing Page Content Section",
        "description": "Removes the target content section from the parent landing page. Required Permissions: Read-Write Assets",
        "operationId": "removeLandingPageContentUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of landing page",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contentId",
            "in": "path",
            "description": "Id of landing page content section",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/delete.json": {
      "post": {
        "tags": ["Landing Pages"],
        "summary": "Delete Landing Page",
        "description": "Deletes the target landing page. Required Permissions: Read-Write Assets",
        "operationId": "deleteLandingPageByIdUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/discardDraft.json": {
      "post": {
        "tags": ["Landing Pages"],
        "summary": "Discard Landing Page Draft",
        "description": "Discards the current draft of the landing page. Required Permissions: Read-Write Assets",
        "operationId": "discardLandingPageByIdUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/dynamicContent/{contentId}.json": {
      "get": {
        "tags": ["Landing Page Content"],
        "summary": "Get Landing Page Dynamic Content",
        "description": "Retrieves the dynamic content from the target section. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLandingPageDynamicContentsUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of landing page",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contentId",
            "in": "path",
            "description": "Id of landing page dynamic content section",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfLandingPageDynamicContentResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Landing Page Content"],
        "summary": "Update Landing Page Dynamic Content Section",
        "description": "Updates the content of the target dynamic content section. Required Permissions: Read-Write Assets",
        "operationId": "updateLandingPageDynamicContentUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the landing page",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "contentId",
            "in": "path",
            "description": "Id of the landing page dynamic content",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "Dynamic content properties",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateLandingPageDynamicContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/unapprove.json": {
      "post": {
        "tags": ["Landing Pages"],
        "summary": "Unapprove Landing Page",
        "description": "Unapproves the landing page, reverting it to a draft-only state. Required Permissions: Approve Assets",
        "operationId": "unapproveLandingPageByIdUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLandingPageResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/variable/{variableId}.json": {
      "post": {
        "tags": ["Landing Pages"],
        "summary": "Update Landing Page Variable",
        "description": "Updates the value of the given variable.  Required Permissions: Read-Write Assets",
        "operationId": "updateLandingPageVariableUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "variableId",
            "in": "path",
            "description": "variableId",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "description": "New value of the variable",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfLandingPageVariableResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/variables.json": {
      "get": {
        "tags": ["Landing Pages"],
        "summary": "Get Landing Page Variables",
        "operationId": "getVariablesUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the landing page",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfLandingPageVariableResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageTemplate/byName.json": {
      "get": {
        "tags": ["Landing Page Templates"],
        "summary": "Get Landing Page Template by Name",
        "description": "Retrieves the landing page template record for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLandingPageTemplateByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the landing page template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpTemplateResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageTemplate/{id}.json": {
      "get": {
        "tags": ["Landing Page Templates"],
        "summary": "Get Landing Page Template by Id",
        "description": "Retrieves the record for the target landing page template.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLandingPageTemplateByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpTemplateResponse" }
          }
        }
      },
      "post": {
        "tags": ["Landing Page Templates"],
        "summary": "Update Landing Page Template Metadata",
        "description": "Updates the metadata for the target landing page template.  Required Permissions: Read-Write Assets",
        "operationId": "updateLpTemplateUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateLpTemplateRequest",
            "description": "updateLpTemplateRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateLpTemplateRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpTemplateResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageTemplate/{id}/approveDraft.json": {
      "post": {
        "tags": ["Landing Page Templates"],
        "summary": "Approve Landing Page Template Draft",
        "description": "Approves the current landing page template draft.  This will delete the current approved version of the template if there is one.  Required Permissions: Approve Assets",
        "operationId": "approveLandingPageTemplateUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpTemplateResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageTemplate/{id}/clone.json": {
      "post": {
        "tags": ["Landing Page Templates"],
        "summary": "Clone Landing Page Template",
        "description": "Clones the target landing page template.  Required Permissions: Read-Write Assets",
        "operationId": "cloneLpTemplateUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "cloneLpTemplateRequest",
            "description": "cloneLpTemplateRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CloneLpTemplateRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpTemplateResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageTemplate/{id}/content.json": {
      "get": {
        "tags": ["Landing Page Templates"],
        "summary": "Get Landing Page Template Content",
        "description": "Retrieves the content of the target landing page.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLandingPageTemplateContentUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfLpTemplateGetContentResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Landing Page Templates"],
        "summary": "Update Landing Page Template Content",
        "description": "Updates the content for the target landing page template.  This update is destructive for the draft version of the template.  Required Permissions: Read-Write Assets",
        "operationId": "updateLandingPageTemplateContentUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "content",
            "in": "formData",
            "description": "content",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageTemplate/{id}/delete.json": {
      "post": {
        "tags": ["Landing Page Templates"],
        "summary": "Delete Landing Page Template",
        "description": "Deletes the target landing page template.  Required Permissions: Read-Write Assets",
        "operationId": "deleteLpTemplateUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageTemplate/{id}/discardDraft.json": {
      "post": {
        "tags": ["Landing Page Templates"],
        "summary": "Discard Landing Page Template Draft",
        "description": "Discrads the current draft of the landing page template.  Required Permissions: Read-Write Assets",
        "operationId": "discardDraftUsingPOST_2",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageTemplate/{id}/unapprove.json": {
      "post": {
        "tags": ["Landing Page Templates"],
        "summary": "Unapprove Landing Page Template",
        "description": "Unapproves the landing page template and reverts it to a draft-only state.  Required Permissions: Approve Assets",
        "operationId": "unapproveLandingPageTemplateUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpTemplateResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageTemplates.json": {
      "get": {
        "tags": ["Landing Page Templates"],
        "summary": "Get Landing Page Templates",
        "description": "Retrieves the list of accessible landing page templates from the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getLandingPageTemplatesUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpTemplateResponse" }
          }
        }
      },
      "post": {
        "tags": ["Landing Page Templates"],
        "summary": "Create Landing Page Template",
        "description": "Creates a new landing page template.  Required Permissions: Read-Write Assets",
        "operationId": "createLpTemplateUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createLpTemplateRequest",
            "description": "createLpTemplateRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateLpTemplateRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLpTemplateResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPages.json": {
      "get": {
        "tags": ["Landing Pages"],
        "summary": "Get Landing Pages",
        "description": "Retrieves a list of accessible landing pages from the target instance. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "browseLandingPagesUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of landing pages to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLandingPageResponse" }
          }
        }
      },
      "post": {
        "tags": ["Landing Pages"],
        "summary": "Create Landing Page",
        "description": "Creates a new landing page.  Required Permissions: Read-Write Assets",
        "operationId": "createLandingPageUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createLandingPageRequest",
            "description": "createLandingPageRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateLandingPageRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLandingPageResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPage/{id}/fullContent.json": {
      "get": {
        "tags": ["Landing Pages"],
        "summary": "Get Landing Page Full Content",
        "description": "Returns the serialized HTML version of the landing page.  Required Permissions: Read-Only Assets, Read-Write Assets.  If leadId is passed in the request: Read-Only Lead, Read-Write Lead.",
        "operationId": "getLandingPageFullContentUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the landing page.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "leadId",
            "in": "query",
            "description": "The lead id to impersonate.  Landing page is rendered as though it was viewed by this lead.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "segmentation",
            "in": "query",
            "description": "JSON array of of segmentations.  Each segmentation must be a JSON object with members 'segmentationId', and 'segmentId'.<br>Example: [{\"segmentationId\":1030,\"segmentId\":1103}]",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfGetLandingPageFullContentResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/redirectRules.json": {
      "get": {
        "tags": ["Landing Page Redirect Rules"],
        "summary": "Get Landing Page Redirect Rules",
        "description": "Retrieves a list of landing page redirect rules from the target instance. Required Permissions: Read Only Redirect Rules, Read Write Redirect Rules",
        "operationId": "getLandingPageRedirectRulesUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of landing page redirect rules to return.  Max 200, default 20",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "redirectTolandingPageId",
            "in": "query",
            "description": "Landing page id of landing page to redirect to",
            "type": "string"
          },
          {
            "name": "redirectToPath",
            "in": "query",
            "description": "Path of landing page to redirect to",
            "type": "string"
          },
          {
            "name": "earliestUpdatedAt",
            "in": "query",
            "description": "Exclude landing page redirect rules prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "type": "string"
          },
          {
            "name": "latestUpdatedAt",
            "in": "query",
            "description": "Exclude landing page redirect rules after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfLandingPageRedirectRules"
            }
          }
        }
      },
      "post": {
        "tags": ["Landing Page Redirect Rules"],
        "summary": "Create Landing Page Redirect Rule",
        "description": "Create a new landing page redirect rule. Required Permissions: Read Write Redirect Rules",
        "operationId": "createLandingPageRedirectRuleUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createLandingPageRedirectRuleRequest",
            "description": "createLandingPageRedirectRuleRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLandingPageRedirectRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfLandingPageRedirectRules"
            }
          }
        }
      }
    },
    "/rest/asset/v1/redirectRule/{id}.json": {
      "get": {
        "tags": ["Landing Page Redirect Rules"],
        "summary": "Get Landing Page Redirect Rule by Id",
        "description": "Retrieves the landing page redirect rule record. Required Permissions: Read Only Redirect Rules, Read Write Redirect Rules",
        "operationId": "getLandingPageRedirectRuleByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of landing page redirect rule",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfLandingPageRedirectRules"
            }
          }
        }
      },
      "post": {
        "tags": ["Landing Page Redirect Rules"],
        "summary": "Update Landing Page Redirect Rule",
        "description": "Update an existing landing page redirect rule. Required Permissions: Read Write Redirect Rules",
        "operationId": "updateLandingPageRedirectRuleUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of landing page redirect rule",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateLandingPageRedirectRuleRequest",
            "description": "updateLandingPageRedirectRuleRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLandingPageRedirectRuleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfLandingPageRedirectRules"
            }
          }
        }
      }
    },
    "/rest/asset/v1/redirectRule/{id}/delete.json": {
      "post": {
        "tags": ["Landing Page Redirect Rules"],
        "summary": "Delete Landing Page Redirect Rule",
        "description": "Delete a landing page redirect rule. Required Permissions: Read Write Redirect Rules",
        "operationId": "deleteLandingPageRedirectRuleUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of landing page redirect rule",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/landingPageDomains.json": {
      "get": {
        "tags": ["Landing Page Redirect Rules"],
        "summary": "Get Landing Page Domains",
        "description": "Retrieves a list of landing page domain and domain aliases. Required Permissions: Read Only Redirect Rules, Read Write Redirect Rules",
        "operationId": "getLandingPageDomainsUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of landing page domains and domain aliases to return.  Max 200, default 20",
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfLandingPageDomains" }
          }
        }
      }
    },
    "/rest/asset/v1/program/byName.json": {
      "get": {
        "tags": ["Programs"],
        "summary": "Get Program by Name",
        "description": "Retrieves the program record for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getProgramByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the program",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeTags",
            "in": "query",
            "description": "Set true to populate program tags",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeCosts",
            "in": "query",
            "description": "Set true to populate program costs",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfProgramResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/program/byTag.json": {
      "get": {
        "tags": ["Programs"],
        "summary": "Get Programs by Tag",
        "description": "Retrieves a list of programs matching the tag type and tag values given.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getProgramListByTagUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "tagType",
            "in": "query",
            "description": "Type of program tag",
            "required": true,
            "type": "string"
          },
          {
            "name": "tagValue",
            "in": "query",
            "description": "Value of the tag",
            "required": true,
            "type": "string"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfProgramResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/program/{id}.json": {
      "get": {
        "tags": ["Programs"],
        "summary": "Get Program by Id",
        "description": "Retrieves the program record for the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getProgramByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfProgramResponse" }
          }
        }
      },
      "post": {
        "tags": ["Programs"],
        "summary": "Update Program Metadata",
        "description": "Updates the target program's metadata.  Required Permissions: Read-Write Assets",
        "operationId": "updateProgramUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateProgramRequest",
            "description": "updateProgramRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateProgramRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfProgramResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/program/{programId}/smartList.json": {
      "get": {
        "tags": ["Programs"],
        "summary": "Get Smart List by Program Id",
        "description": "Retrieves a Smart List record by its Email Program id. Required Permissions: Read-Asset or Read-Write Asset",
        "operationId": "getSmartListByProgramIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "programId",
            "in": "path",
            "description": "Id for the email program containing smart list to retrieve",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "includeRules",
            "in": "query",
            "description": "Set true to populate smart list rules.  Default false",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSmartListResponseWithRules"
            }
          }
        }
      }
    },
    "/rest/asset/v1/program/{id}/approve.json": {
      "post": {
        "tags": ["Programs"],
        "summary": "Approve Program",
        "description": "Approves the target program.  Only valid for unapproved email programs.  Required Permissions: Read-Write Assets",
        "operationId": "approveProgramUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/program/{id}/clone.json": {
      "post": {
        "tags": ["Programs"],
        "summary": "Clone Program",
        "description": "Clones the target program.  Required Permissions: Read-Write Assets",
        "operationId": "cloneProgramUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "cloneProgramRequest",
            "description": "cloneProgramRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CloneProgramRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfProgramResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/program/{id}/delete.json": {
      "post": {
        "tags": ["Programs"],
        "summary": "Delete Program",
        "description": "Deletes the target program.  The program may not contain any assets which are in use outside the program.  Required Permissions: Read-Write Assets",
        "operationId": "deleteProgramUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/program/{id}/unapprove.json": {
      "post": {
        "tags": ["Programs"],
        "summary": "Unapprove Program",
        "description": "Unapproves the target program.  Only valid for approved email programs.  Required Permissions: Read-Write Assets",
        "operationId": "unapproveProgramUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/programs.json": {
      "get": {
        "tags": ["Programs"],
        "summary": "Get Programs",
        "description": "Retrieves the list of accessible programs from the target instance. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "browseProgramsUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filterType",
            "in": "query",
            "description": "Optional filter.  Requires filterValues",
            "required": false,
            "type": "string",
            "enum": ["id", "programId", "folderId", "workspace"]
          },
          {
            "name": "earliestUpdatedAt",
            "in": "query",
            "description": "Exclude programs prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "required": false,
            "type": "string"
          },
          {
            "name": "latestUpdatedAt",
            "in": "query",
            "description": "Exclude programs after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfBrowseAllPrograms" }
          }
        }
      },
      "post": {
        "tags": ["Programs"],
        "summary": "Create Program",
        "description": "Creates a new program.  Required Permissions: Read-Write Assets",
        "operationId": "createProgramUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createProgramRequest",
            "description": "createProgramRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateProgramRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfProgramResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/segmentation.json": {
      "get": {
        "tags": ["Segments"],
        "summary": "Get Segmentations",
        "description": "Retrieves a list of accessible segmentations for the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getSegmentationUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSegmentationResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/segmentation/{id}/segments.json": {
      "get": {
        "tags": ["Segments"],
        "summary": "Get Segments For Segmentation",
        "description": "Retrieves a list of segments inside the target segmentation.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getSegmentsForSegmentationUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSegmentsResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/smartCampaign/{id}.json": {
      "get": {
        "tags": ["Smart Campaigns"],
        "summary": "Get Smart Campaign by Id",
        "description": "Returns the smart campaign for the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getSmartCampaignByIdUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the smart campaign",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Smart Campaigns"],
        "summary": "Update Smart Campaign",
        "description": "Update the smart campaign for the given id.  Required Permissions: Read-Write Assets",
        "operationId": "updateSmartCampaignUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the smart campaign",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateSmartCampaignRequest",
            "description": "updateSmartCampaignRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateSmartCampaignRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/smartCampaign/byName.json": {
      "get": {
        "tags": ["Smart Campaigns"],
        "summary": "Get Smart Campaign by Name",
        "description": "Returns the smart campaign for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getSmartCampaignByNameUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name for the smart campaign",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/smartCampaign/{id}/smartList.json": {
      "get": {
        "tags": ["Smart Campaigns"],
        "summary": "Get Smart List by Smart Campaign Id",
        "description": "Retrieves a Smart List record by its Smart Campaign id. Required Permissions: Read-Asset or Read-Write Asset",
        "operationId": "getSmartListBySmartCampaignIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id for the smart campaign containing smart list to retrieve",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "includeRules",
            "in": "query",
            "description": "Set true to populate smart list rules.  Default false",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSmartListResponseWithRules"
            }
          }
        }
      }
    },
    "/rest/asset/v1/smartCampaigns.json": {
      "get": {
        "tags": ["Smart Campaigns"],
        "summary": "Get Smart Campaigns",
        "description": "Retrieves all smart campaigns. Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getAllSmartCampaignsGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of smart campaigns to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": false,
            "type": "string"
          },
          {
            "name": "earliestUpdatedAt",
            "in": "query",
            "description": "Exclude smart campaigns prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "required": false,
            "type": "string"
          },
          {
            "name": "latestUpdatedAt",
            "in": "query",
            "description": "Exclude smart campaigns after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "required": false,
            "type": "string"
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Set true to return only active campaigns.  Default false",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Smart Campaigns"],
        "summary": "Create Smart Campaign",
        "description": "Creates a new smart campaign.  Required Permissions: Read-Write Assets",
        "operationId": "createSmartCampaignUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createSmartCampaignRequest",
            "description": "createSmartCampaignRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateSmartCampaignRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/smartCampaign/{id}/activate.json": {
      "post": {
        "tags": ["Smart Campaigns"],
        "summary": "Activate Smart Campaign",
        "description": "Activates a trigger smart campaign.  Required Permissions: Activate Campaign",
        "operationId": "activateSmartCampaignUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the smart campaign",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/smartCampaign/{id}/deactivate.json": {
      "post": {
        "tags": ["Smart Campaigns"],
        "summary": "Deactivate Smart Campaign",
        "description": "Deactivates a trigger smart campaign.  Required Permissions: Deactivate Campaign",
        "operationId": "deactivateSmartCampaignUsingPOST",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the smart campaign",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/smartCampaign/{id}/clone.json": {
      "post": {
        "tags": ["Smart Campaigns"],
        "summary": "Clone Smart Campaign",
        "description": "Clones a smart campaign.  Required Permissions: Read-Write Assets",
        "operationId": "cloneSmartCampaignUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the smart campaign",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "cloneSmartCampaignRequest",
            "description": "cloneSmartCampaignRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CloneSmartCampaignRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSmartCampaignResponse"
            }
          }
        }
      }
    },
    "/rest/asset/v1/smartCampaign/{id}/delete.json": {
      "post": {
        "tags": ["Smart Campaigns"],
        "summary": "Delete Smart Campaign",
        "description": "Deletes a smart campaign.  Required Permissions: Read-Write Assets",
        "operationId": "deleteSmartCampaignUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the smart campaign",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippet/{id}.json": {
      "get": {
        "tags": ["Snippets"],
        "summary": "Get Snippet by Id",
        "description": "Retrieves the target snippet record.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getSnippetByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSnippetResponse" }
          }
        }
      },
      "post": {
        "tags": ["Snippets"],
        "summary": "Update Snippet Metadata",
        "description": "Updates the metadata of the snippet.  Required Permissions: Read-Write Assets",
        "operationId": "updateSnippetUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateSnippetRequest",
            "description": "updateSnippetRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateSnippetRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSnippetResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippet/{id}/approveDraft.json": {
      "post": {
        "tags": ["Snippets"],
        "summary": "Approve Snippet Draft",
        "description": "Approves the current draft of the snippet.  Required Permissions: Approve Assets",
        "operationId": "approveSnippetUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSnippetResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippet/{id}/clone.json": {
      "post": {
        "tags": ["Snippets"],
        "summary": "Clone Snippet",
        "description": "Clones the target snippet.  Required Permissions: Read-Write Assets",
        "operationId": "cloneSnippetUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "cloneSnippetRequest",
            "description": "cloneSnippetRequest",
            "required": false,
            "schema": { "$ref": "#/definitions/CloneSnippetRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSnippetResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippet/{id}/content.json": {
      "get": {
        "tags": ["Snippets"],
        "summary": "Get Snippet Content",
        "description": "Retrieves the content of the target snippet.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getSnippetContentByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSnippetContentResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Snippets"],
        "summary": "Update Snippet Content",
        "description": "Updates the content of the target snippet.  Required Permissions: Read-Write Assets",
        "operationId": "updateContentUsingPOST_1",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "content",
            "in": "query",
            "description": "Content of the snippet",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of snippet content",
            "enum": ["DynamicContent", "HTML", "Text"],
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippet/{id}/delete.json": {
      "post": {
        "tags": ["Snippets"],
        "summary": "Delete Snippet",
        "description": "Deletes the target snippet.  The snippet may not be in use by emails or landing pages.  Required Permissions: Read-Write Assets",
        "operationId": "deleteSnippetUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippet/{id}/discardDraft.json": {
      "post": {
        "tags": ["Snippets"],
        "summary": "Discard Snippet Draft",
        "description": "Discards the current draft of the snippet.  Required Permissions: Read-Write Assets",
        "operationId": "discardSnippetUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippet/{id}/dynamicContent.json": {
      "get": {
        "tags": ["Snippets"],
        "summary": "Get Dynamic Content",
        "description": "Gets the list of dynamic content sections for the snippet.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getDynamicContentUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ModelResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippet/{id}/dynamicContent/{segmentId}.json": {
      "post": {
        "tags": ["Snippets"],
        "summary": "Update Snippet Dynamic Content",
        "description": "Updates the target dynamic content section.  Required Permissions: Read-Write Assets",
        "operationId": "updateDynamicContentUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "segmentId",
            "in": "path",
            "description": "segmentId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSnippetDynamicContentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippet/{id}/unapprove.json": {
      "post": {
        "tags": ["Snippets"],
        "summary": "Unapprove Snippet",
        "description": "Unapproves the current version of the snippet.  The snippet may not be in use.  The snippet will be reverted to a draft-only state.  Required Permissions: Approve Assets",
        "operationId": "unapproveSnippetUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSnippetResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/snippets.json": {
      "get": {
        "tags": ["Snippets"],
        "summary": "Get Snippets",
        "description": "Retrieves a list of accessible snippets from the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getSnippetUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status filter for draft or approved versions",
            "required": false,
            "type": "string",
            "enum": ["approved", "draft"]
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSnippetResponse" }
          }
        }
      },
      "post": {
        "tags": ["Snippets"],
        "summary": "Create Snippet",
        "description": "Creates a new snippet.  Required Permissions: Read-Write Assets",
        "operationId": "createSnippetUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createSnippetRequest",
            "description": "createSnippetRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateSnippetRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSnippetResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/tagType/byName.json": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get Tag By Name",
        "description": "Retrieves a tag by its name.  This will also return the set of valid values for the tag.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getTagByNameUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the tag",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfTagResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/smartList/{id}.json": {
      "get": {
        "tags": ["Smart Lists"],
        "summary": "Get Smart List by Id",
        "description": "Retrieves a Smart List record by its id. Required Permissions: Read-Asset or Read-Write Asset",
        "operationId": "getSmartListByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the smart list to retrieve",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "includeRules",
            "in": "query",
            "description": "Set true to populate smart list rules.  Default false",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ResponseOfSmartListResponseWithRules"
            }
          }
        }
      }
    },
    "/rest/asset/v1/smartList/byName.json": {
      "get": {
        "tags": ["Smart Lists"],
        "summary": "Get Smart List by Name",
        "description": "Retrieves a Smart List record by its name. Required Permissions: Read-Asset or Read-Write Asset",
        "operationId": "getSmartListByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of smart list to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSmartListResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/smartList/{id}/delete.json": {
      "post": {
        "tags": ["Smart Lists"],
        "summary": "Delete Smart List",
        "description": "Deletes the designated Smart List. Required Permissions: Read-Write Asset",
        "operationId": "deleteSmartListByIdUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the smart list to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/smartLists.json": {
      "get": {
        "tags": ["Smart Lists"],
        "summary": "Get Smart Lists",
        "description": "Retrieves a list of user created Smart List records. Required Permissions: Read-Asset or Read-Write Asset",
        "operationId": "getSmartListsUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of smart lists to return.  Max 200, default 20.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "earliestUpdatedAt",
            "in": "query",
            "description": "Exclude smart lists prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "required": false,
            "type": "string"
          },
          {
            "name": "latestUpdatedAt",
            "in": "query",
            "description": "Exclude smart lists after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSmartListResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/smartList/{id}/clone.json": {
      "post": {
        "tags": ["Smart Lists"],
        "summary": "Clone Smart List",
        "description": "Clones the designated Smart List. Required Permissions: Read-Write Asset",
        "operationId": "cloneSmartListUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of smart list to clone",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "cloneSmartListRequest",
            "description": "cloneSmartListRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CloneSmartListRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfSmartListResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/staticList/{id}.json": {
      "get": {
        "tags": ["Static Lists"],
        "summary": "Get Static List by Id",
        "description": "Retrieves a Static List record by its id. Required Permissions: Read-Asset or Read-Write Asset",
        "operationId": "getStaticListByIdUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the static list to retrieve",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfStaticListResponse" }
          }
        }
      },
      "post": {
        "tags": ["Static Lists"],
        "summary": "Update Static List Metadata",
        "description": "Updates the metadata of a static list asset.  Required Permissions: Read-Write Assets",
        "operationId": "updateStaticListUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of static list to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "updateStaticListRequest",
            "description": "updateStaticListRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateStaticListRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfStaticListResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/staticLists.json": {
      "get": {
        "tags": ["Static Lists"],
        "summary": "Get Static Lists",
        "description": "Retrieves a list of Static List records. Required Permissions: Read-Asset or Read-Write Asset",
        "operationId": "getStaticListsUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "folder",
            "in": "query",
            "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of static lists to return.  Max 200, default 20.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "earliestUpdatedAt",
            "in": "query",
            "description": "Exclude static lists prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "required": false,
            "type": "string"
          },
          {
            "name": "latestUpdatedAt",
            "in": "query",
            "description": "Exclude static lists after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfStaticListResponse" }
          }
        }
      },
      "post": {
        "tags": ["Static Lists"],
        "summary": "Create Static List",
        "description": "Creates a new Static List.  Required Permissions: Read-Write Assets",
        "operationId": "createStaticListUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "createStaticListRequest",
            "description": "createStaticListRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/CreateStaticListRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfStaticListResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/staticList/byName.json": {
      "get": {
        "tags": ["Static Lists"],
        "summary": "Get Static List by Name",
        "description": "Retrieves a Static List record by its name. Required Permissions: Read-Asset or Read-Write Asset",
        "operationId": "getStaticListByNameUsingGET",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of static list to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfStaticListResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/staticList/{id}/delete.json": {
      "post": {
        "tags": ["Static Lists"],
        "summary": "Delete Static List",
        "description": "Deletes the designated Static List. Required Permissions: Read-Write Asset",
        "operationId": "deleteStaticListByIdUsingPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the static list to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfIdResponse" }
          }
        }
      }
    },
    "/rest/asset/v1/tagTypes.json": {
      "get": {
        "tags": ["Tags"],
        "summary": "Get Tag Types",
        "description": "Retrieves a list of available tag types.  Required Permissions: Read-Only Assets, Read-Write Assets",
        "operationId": "getTagTypesUsingGET",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "maxReturn",
            "in": "query",
            "description": "Maximum number of channels to return.  Max 200, default 20",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Integer offset for paging",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ResponseOfTagResponseGetAll" }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateProgramRequest": {
      "type": "object",
      "required": ["folder", "name", "type", "channel"],
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel of the program"
        },
        "costs": {
          "type": "array",
          "description": "Lists of associated period costs",
          "items": { "$ref": "#/definitions/CostRequest" }
        },
        "description": { "type": "string" },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": { "type": "string", "description": "Name of the program" },
        "tags": {
          "type": "array",
          "description": "List of associated program tags",
          "items": { "$ref": "#/definitions/TagRequest" }
        },
        "type": { "type": "string", "description": "Type of the program" }
      }
    },
    "UpdateEmailMetaDataRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "name": { "type": "string", "description": "Name of the Email" },
        "preHeader": {
          "type": "string",
          "description": "Preheader text for the email"
        },
        "operational": {
          "type": "boolean",
          "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
        },
        "published": {
          "type": "boolean",
          "description": "Whether the email has been published to Sales Insight.  Default false"
        },
        "textOnly": {
          "type": "boolean",
          "description": "Setting to include text-only version of email when sent"
        },
        "webView": {
          "type": "boolean",
          "description": "Whether the email has been enabled to allow the 'View as Web Page' when received"
        }
      }
    },
    "CreateLandingPageRedirectRuleRequest": {
      "type": "object",
      "required": ["hostname", "redirectFrom", "redirectTo"],
      "properties": {
        "hostname": {
          "type": "string",
          "description": "The hostname for the landing pages.  Branding domain or alias.  Max 255 characters"
        },
        "redirectFrom": {
          "$ref": "#/definitions/RedirectFrom",
          "description": "JSON representation of redirect from landing page, with members 'type' which may be 'landingPageId' or 'path', and 'value'"
        },
        "redirectTo": {
          "$ref": "#/definitions/RedirectTo",
          "description": "JSON representation of redirect to landing page, with members 'type' which may be 'landingPageId' or 'url', and 'value'"
        }
      }
    },
    "UpdateLandingPageRedirectRuleRequest": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "The hostname for the landing pages.  Branding domain or alias.  Max 255 characters"
        },
        "redirectFrom": {
          "$ref": "#/definitions/RedirectFrom",
          "description": "JSON representation of redirect from landing page, with members 'type' which may be 'landingPageId' or 'path', and 'value'"
        },
        "redirectTo": {
          "$ref": "#/definitions/RedirectTo",
          "description": "JSON representation of redirect to landing page, with members 'type' which may be 'landingPageId' or 'url', and 'value'"
        }
      }
    },
    "BrowseAllPrograms": {
      "type": "object",
      "required": ["channel", "folder", "status", "type"],
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel of the program"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "sfdcId": {
          "type": "string",
          "description": "SFDC id of the program if linked to an SFDC campaign"
        },
        "sfdcName": {
          "type": "string",
          "description": "Name of the linked SFDC campaign if applicable"
        },
        "status": {
          "type": "string",
          "description": "Status of the program.  Only valid for Email and engagement program types.",
          "enum": ["locked", "unlocked", "on", "off"]
        },
        "type": {
          "type": "string",
          "description": "Type of the program",
          "enum": ["program", "event", "webinar", "nurture"]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "CloneEmailTemplateRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the Email Template"
        }
      }
    },
    "CreateEmailTemplateRequest": {
      "type": "object",
      "required": ["name", "folder", "content"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Email Template.  Must be unique under the parent folder."
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "description": {
          "type": "string",
          "description": "Description of the email template"
        },
        "content": {
          "type": "string",
          "description": "HTML content for template.  Multipart file."
        }
      }
    },
    "CloneFormRequest": {
      "type": "object",
      "required": ["name", "folder"],
      "properties": {
        "name": { "type": "string", "description": "Name for the cloned form" },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "description": {
          "type": "string",
          "description": "Description of the cloned form"
        }
      }
    },
    "CloneSnippetRequest": {
      "type": "object",
      "required": ["name", "folder"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the cloned snippet"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "description": {
          "type": "string",
          "description": "Description of the cloned snippet"
        }
      }
    },
    "CloneSmartListRequest": {
      "type": "object",
      "required": ["name", "folder"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the cloned smart list"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "description": {
          "type": "string",
          "description": "Description of the cloned smart list"
        }
      }
    },
    "UpdateEmailTemplateMetaDataRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the Email Template"
        }
      }
    },
    "CloneLandingPageRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": { "type": "string", "description": "Name of the landing page" },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the template used"
        }
      }
    },
    "ResponseOfLandingPageResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LandingPageResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfLandingPageRedirectRules": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LandingPageRedirectRule" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfLandingPageDomains": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LandingPageDomain" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "UpdateProgramRequest": {
      "type": "object",
      "properties": {
        "costs": {
          "type": "array",
          "description": "Lists of associated period costs that allow you to append, replace, or delete. To append new costs, simply add them to costs array.  To replace costs (destructive update), pass new costs and set costsDestructiveUpdate to true. To delete costs, do not pass costs parameter and set costsDestructiveUpdate to true",
          "items": { "$ref": "#/definitions/CostRequest" }
        },
        "costsDestructiveUpdate": {
          "type": "boolean",
          "description": "Set true to destroy existing costs and replace them with the specified costs"
        },
        "description": {
          "type": "string",
          "description": "Updated description for the program"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the program.  Applicable to event, email, and webinar type programs"
        },
        "name": { "type": "string", "description": "Name of the program" },
        "startDate": {
          "type": "string",
          "description": "Start date of program.  Applicable to event, email and webinar type programs"
        },
        "tags": {
          "type": "array",
          "description": "List of associated program tags",
          "items": { "$ref": "#/definitions/TagRequest" }
        }
      }
    },
    "FolderContentResponse": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "type": { "type": "string" }
      }
    },
    "LandingPageDynamicContentResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "description": "List of variations in the section",
          "items": { "$ref": "#/definitions/SegmentContent" }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the section was created"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the dnamic content section"
        },
        "segmentation": {
          "type": "integer",
          "format": "int32",
          "description": "Segmentation to which the section is linked"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the section was last updated"
        }
      }
    },
    "FileFolder": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int32" },
        "name": { "type": "string" },
        "type": { "type": "string" }
      }
    },
    "ResponseOfSegmentsResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SegmentsResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfProgramResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ProgramResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "CostRequest": {
      "type": "object",
      "required": ["cost", "startDate"],
      "properties": {
        "cost": {
          "type": "integer",
          "format": "int32",
          "description": "Amount of the cost"
        },
        "note": { "type": "string", "description": "Notes on the cost" },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Start date of the period cost"
        }
      }
    },
    "EmailResponse": {
      "type": "object",
      "required": [
        "folder",
        "fromEmail",
        "fromName",
        "operational",
        "publishToMSI",
        "replyEmail",
        "status",
        "subject",
        "template",
        "textOnly",
        "webView",
        "autoCopyToText",
        "preHeader"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "fromEmail": {
          "description": "From-address of the Email",
          "$ref": "#/definitions/EmailHeaderField"
        },
        "fromName": {
          "description": "From-name of the Email",
          "$ref": "#/definitions/EmailHeaderField"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "operational": {
          "type": "boolean",
          "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
        },
        "publishToMSI": {
          "type": "boolean",
          "description": "Whether the email is published to Marketo Sales Insight"
        },
        "replyEmail": {
          "description": "Reply-To address of the Email",
          "$ref": "#/definitions/EmailHeaderField"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "subject": {
          "description": "Subject Line of the Email",
          "$ref": "#/definitions/EmailHeaderField"
        },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the parent template"
        },
        "textOnly": {
          "type": "boolean",
          "description": "Setting to include text-only version of email when sent"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The type version of the email",
          "enum": [1, 2]
        },
        "webView": {
          "type": "boolean",
          "description": "Whether 'View as Webpage' function is enabled for the email"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        },
        "autoCopyToText": {
          "type": "boolean",
          "description": "Setting to automatically copy HTML version to Text version"
        },
        "preHeader": {
          "type": "string",
          "description": "The email preheader text (max 1024 characters)"
        },
        "ccFields": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailCCFields" }
        }
      }
    },
    "EmailCCFields": {
      "type": "object",
      "required": ["attributeId", "objectName", "displayName", "apiName"],
      "properties": {
        "attributeId": {
          "type": "string",
          "description": "Attribute identifier"
        },
        "objectName": {
          "type": "string",
          "description": "Object name.  'lead' or 'company'"
        },
        "displayName": { "type": "string", "description": "Display name" },
        "apiName": { "type": "string", "description": "API name" }
      }
    },
    "LpTemplateResponse": {
      "type": "object",
      "required": ["enableMunchkin", "folder", "status", "templateType"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "enableMunchkin": {
          "type": "boolean",
          "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "templateType": {
          "type": "string",
          "description": "Type of template to create.  Defaults to freeForm",
          "enum": ["guided", "freeForm"]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace.  Max 255 characters"
        }
      }
    },
    "CloneProgramRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": { "type": "string" },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the program.  Max 255 characters"
        }
      }
    },
    "CreateFolderRequest": {
      "type": "object",
      "required": ["name", "parent"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "name": { "type": "string", "description": "Name of the Folder" },
        "parent": {
          "description": "Folder object describing the parent folder",
          "$ref": "#/definitions/Folder"
        }
      }
    },
    "CreateStaticListRequest": {
      "type": "object",
      "required": ["name", "folder"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the static list"
        },
        "name": { "type": "string", "description": "Name of the static list" },
        "folder": {
          "description": "Folder object describing the parent folder",
          "$ref": "#/definitions/Folder"
        }
      }
    },
    "UpdateStaticListRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the static list"
        },
        "name": { "type": "string", "description": "Name of the static list" }
      }
    },
    "UpdateFormFieldRequest": {
      "type": "object",
      "properties": {
        "blankFields": {
          "type": "integer",
          "format": "int32",
          "description": "Number of blank fields to show when progressive profiling is enabled"
        },
        "defaultValue": {
          "type": "string",
          "description": "Optional default value for the field"
        },
        "fieldType": { "type": "string", "description": "Type of field" },
        "fieldWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the input or select element"
        },
        "formPrefill": {
          "type": "boolean",
          "description": "Whether the field should prefill.  Default true"
        },
        "isSensitive": {
          "type": "boolean",
          "description": "Whether the field is marked as sensitive.  Default false"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text for the field"
        },
        "initiallyChecked": {
          "type": "boolean",
          "description": "Whether the field should be checked upon loading.  Default false"
        },
        "instructions": {
          "type": "string",
          "description": "Instructions for the field"
        },
        "label": { "type": "string", "description": "Label of the field" },
        "labelToRight": {
          "type": "boolean",
          "description": "Whether the field label should be displayed to the right of the input/select element. Default false"
        },
        "labelWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the field label element"
        },
        "maskInput": {
          "type": "string",
          "description": "Optional input mask for the field"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum length for text type fields"
        },
        "maxValue": {
          "type": "number",
          "format": "float",
          "description": "Maximum value accepted by the field"
        },
        "minValue": {
          "type": "number",
          "format": "float",
          "description": "Minimum value accepted by the field"
        },
        "multiSelect": {
          "type": "boolean",
          "description": "Whether the field should allow multiple selections. Default false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required to submit the form.  Default false"
        },
        "validationMessage": {
          "type": "string",
          "description": "Validation message to display on failed validation"
        },
        "values": {
          "type": "string",
          "description": "Array of JSON objects that contain field attributes. Only for select-field types.  Example: values=[{'label':'Select...','value':'','isDefault':true,'selected':true}, {'label':'MR','value':'Mr'}, {'label':'MS','value':'Ms'}, {'label':'MRS','value':'Mrs'}, {'label':'DR','value':'Dr'}, {'label':'PROF','value':'Prof'}]"
        },
        "visibleLines": {
          "type": "integer",
          "format": "int32",
          "description": "Number of lines to display for the field element"
        }
      }
    },
    "SnippetContentResponse": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "content": {
          "type": "string",
          "description": "Content of the snippet"
        },
        "type": { "type": "string", "description": "Type of snippet content" }
      }
    },
    "GetFilesRequest": {
      "type": "object",
      "properties": {
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        }
      }
    },
    "ResponseOfEmailDynamicContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailDynamicContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "FormFieldVisibilityRequest": {
      "type": "object",
      "required": ["ruleType", "rules"],
      "properties": {
        "ruleType": {
          "type": "string",
          "description": "Type of rule to apply",
          "enum": ["show", "alwaysShow", "hide"]
        },
        "rules": {
          "type": "array",
          "description": "JSON Array of rules",
          "items": { "$ref": "#/definitions/VisibilityRuleRequest" }
        }
      }
    },
    "UpdateFolderRequest": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "isArchive": {
          "type": "boolean",
          "description": "Whether the folder is archived or not.  Toggling this value will change the archival status of the folder"
        },
        "name": { "type": "string", "description": "Name of the Folder" },
        "type": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'",
          "enum": ["Folder", "Program"]
        }
      }
    },
    "ResponseOfLpFormFieldResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LpFormFieldResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ThankYouPageResponse": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int32" },
        "thankYouList": {
          "type": "array",
          "items": { "$ref": "#/definitions/FormThankYouPageDTO" }
        }
      }
    },
    "CreateLandingPageContentRequest": {
      "type": "object",
      "required": ["contentId", "type"],
      "properties": {
        "backgroundColor": {
          "type": "string",
          "description": "background-color property of the HTML section"
        },
        "borderColor": {
          "type": "string",
          "description": "border-color property of the HTML section"
        },
        "borderStyle": {
          "type": "string",
          "description": "border-style property of the HTML section"
        },
        "borderWidth": {
          "type": "string",
          "description": "border-width property of the HTML section"
        },
        "contentId": {
          "type": "string",
          "description": "Id of the content section.  Also the HTML id of the section."
        },
        "height": {
          "type": "string",
          "description": "height property of the HTML section"
        },
        "hideDesktop": {
          "type": "boolean",
          "description": "Hide the section when displayed on a desktop browser.  Default false"
        },
        "hideMobile": {
          "type": "boolean",
          "description": "Hide the section when displayed on a mobile browser.  Default false"
        },
        "imageOpenNewWindow": { "type": "string" },
        "left": {
          "type": "string",
          "description": "left property of the HTML section"
        },
        "linkUrl": {
          "type": "string",
          "description": "URL parameter of a link type section"
        },
        "opacity": {
          "type": "string",
          "description": "opacity property of the HTML section"
        },
        "top": {
          "type": "string",
          "description": "top property of the HTML section"
        },
        "type": {
          "type": "string",
          "description": "Type of content section",
          "enum": ["Image", "Form", "Rectangle", "Snippet", "RichText", "HTML"]
        },
        "value": { "type": "string", "description": "Type of content section" },
        "width": {
          "type": "string",
          "description": "width property of the HTML section"
        },
        "zIndex": {
          "type": "string",
          "description": "z-index property of the HTML section"
        }
      }
    },
    "JsonNode": {
      "type": "object",
      "properties": {
        "array": { "type": "boolean" },
        "bigDecimal": { "type": "boolean" },
        "bigInteger": { "type": "boolean" },
        "binary": { "type": "boolean" },
        "boolean": { "type": "boolean" },
        "containerNode": { "type": "boolean" },
        "double": { "type": "boolean" },
        "float": { "type": "boolean" },
        "floatingPointNumber": { "type": "boolean" },
        "int": { "type": "boolean" },
        "integralNumber": { "type": "boolean" },
        "long": { "type": "boolean" },
        "missingNode": { "type": "boolean" },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "null": { "type": "boolean" },
        "number": { "type": "boolean" },
        "object": { "type": "boolean" },
        "pojo": { "type": "boolean" },
        "short": { "type": "boolean" },
        "textual": { "type": "boolean" },
        "valueNode": { "type": "boolean" }
      }
    },
    "EmailContentResponse": {
      "type": "object",
      "required": ["contentType", "htmlId", "value"],
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Type of content to set for the section."
        },
        "htmlId": {
          "type": "string",
          "description": "HTML id of the content section"
        },
        "index": { "type": "integer", "format": "int32" },
        "isLocked": { "type": "boolean" },
        "parentHtmlId": { "type": "string" },
        "value": { "type": "object", "description": "Contents of the section" }
      }
    },
    "SnippetResponse": {
      "type": "object",
      "required": ["folder", "status"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'folderName', 'value', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/SnippetFolder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "LpFormResponse": {
      "type": "object",
      "required": [
        "buttonLabel",
        "buttonLocation",
        "folder",
        "fontFamily",
        "fontSize",
        "knownVisitor",
        "labelPosition",
        "language",
        "locale",
        "progressiveProfiling",
        "status",
        "thankYouList",
        "theme",
        "waitingLabel"
      ],
      "properties": {
        "buttonLabel": {
          "type": "string",
          "description": "Label text of the button"
        },
        "buttonLocation": {
          "type": "integer",
          "format": "int32",
          "description": "Location in pixels of the button relative to the left of the form"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "fontFamily": {
          "type": "string",
          "description": "font-family property for the form"
        },
        "fontSize": {
          "type": "string",
          "description": "font-size property of the form"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "knownVisitor": {
          "description": "Known visitor behavior for the form",
          "$ref": "#/definitions/FormKnownVisitorDTO"
        },
        "labelPosition": {
          "type": "string",
          "description": "Default positioning of labels."
        },
        "language": { "type": "string", "description": "Language of the form" },
        "locale": { "type": "string", "description": "Locale of the form" },
        "name": { "type": "string", "description": "Name of the asset" },
        "progressiveProfiling": {
          "type": "boolean",
          "description": "Whether progressive profiling is enabled for the form"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "thankYouList": {
          "type": "array",
          "description": "List of thank you page behaviors for the form",
          "items": { "$ref": "#/definitions/FormThankYouPageDTO" }
        },
        "theme": {
          "type": "string",
          "description": "CSS theme for the form to use"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "waitingLabel": {
          "type": "string",
          "description": "Waiting text of the button"
        }
      }
    },
    "UpdateLandingPageRequest": {
      "type": "object",
      "properties": {
        "customHeadHTML": {
          "type": "string",
          "description": "Any custom HTML to embed in the <head> tag of the page"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "facebookOgTags": {
          "type": "string",
          "description": "Any OpenGraph meta tags to apply to the page"
        },
        "keywords": { "type": "string" },
        "metaTagsDescription": {
          "type": "string",
          "description": "Meta description property of the page"
        },
        "mobileEnabled": {
          "type": "boolean",
          "description": "Whether the page has mobile viewing enabled.  Free-form pages only.  Default false"
        },
        "name": { "type": "string", "description": "Name of the landing page" },
        "robots": {
          "type": "string",
          "description": "Robots directives to apply to the pages meta tags"
        },
        "styleOverRide": {
          "type": "string",
          "description": "Additional CSS styles to append to the landing page <head>"
        },
        "title": {
          "type": "string",
          "description": "Title element of the landing page"
        },
        "urlPageName": {
          "type": "string",
          "description": "URL path of the page.  Derived from the name field if unset"
        }
      }
    },
    "UpdateFormMetaDataRequest": {
      "type": "object",
      "properties": {
        "customCss": {
          "type": "string",
          "description": "Custom CSS to apply to the form"
        },
        "description": {
          "type": "string",
          "description": "Description of the form"
        },
        "fontFamily": {
          "type": "string",
          "description": "font-family property for the form"
        },
        "fontSize": {
          "type": "string",
          "description": "font-size property of the form"
        },
        "knownVisitor": {
          "description": "Known visitor behavior for the form",
          "$ref": "#/definitions/FormKnownVisitorDTO"
        },
        "labelPosition": {
          "type": "string",
          "description": "Default positioning of labels."
        },
        "language": { "type": "string", "description": "Language of the form" },
        "locale": { "type": "string", "description": "Locale of the form" },
        "name": { "type": "string", "description": "Name of the form" },
        "progressiveProfiling": {
          "type": "boolean",
          "description": "Whether progressive profiling is enabled for the form"
        },
        "theme": {
          "type": "string",
          "description": "CSS theme for the form to use"
        }
      }
    },
    "ResponseOfLandingPageContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LandingPageContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "UpdateLandingPageContentRequest": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "backgroundColor": {
          "type": "string",
          "description": "background-color property of the HTML section"
        },
        "borderColor": {
          "type": "string",
          "description": "border-color property of the HTML section"
        },
        "borderStyle": {
          "type": "string",
          "description": "border-style property of the HTML section"
        },
        "borderWidth": {
          "type": "string",
          "description": "border-width property of the HTML section"
        },
        "height": {
          "type": "string",
          "description": "height property of the HTML section"
        },
        "hideDesktop": {
          "type": "boolean",
          "description": "Hide the section when displayed on a desktop browser.  Default false"
        },
        "hideMobile": {
          "type": "boolean",
          "description": "Hide the section when displayed on a mobile browser.  Default false"
        },
        "imageOpenNewWindow": { "type": "string" },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the content section.  Determines the order of the section in the landing page"
        },
        "left": {
          "type": "string",
          "description": "left property of the HTML section"
        },
        "linkUrl": {
          "type": "string",
          "description": "URL parameter of a link type section"
        },
        "opacity": {
          "type": "string",
          "description": "opacity property of the HTML section"
        },
        "top": {
          "type": "string",
          "description": "top property of the HTML section"
        },
        "type": {
          "type": "string",
          "description": "Type of content section",
          "enum": [
            "Image",
            "Form",
            "Rectangle",
            "Snippet",
            "RichText",
            "HTML",
            "DynamicContent"
          ]
        },
        "value": { "type": "string", "description": "Type of content section" },
        "width": {
          "type": "string",
          "description": "width property of the HTML section"
        },
        "zIndex": {
          "type": "string",
          "description": "z-index property of the HTML section"
        }
      }
    },
    "VisibilityRuleRequest": {
      "type": "object",
      "required": ["operator", "subjectField", "values"],
      "properties": {
        "altLabel": { "type": "string" },
        "operator": {
          "type": "string",
          "description": "Operation to apply to target field.  Evaluated against the list of values when applicable.",
          "enum": [
            "is",
            "isNot",
            "isEmpty",
            "isNotEmpty",
            "startsWith",
            "notStartsWith",
            "endsWith",
            "notEndsWith",
            "contains",
            "notContains",
            "greaterThan",
            "lessThan",
            "atLeast",
            "atMost",
            "between",
            "notBetween",
            "notInTimeFrame",
            "inPast",
            "notInPast",
            "after",
            "before",
            "inTimeFrame",
            "onOrAfter",
            "onOrBefore"
          ]
        },
        "pickListValues": {
          "type": "array",
          "description": "Alternative label to display when rules are applied.",
          "items": { "$ref": "#/definitions/PickListDTO" }
        },
        "subjectField": {
          "type": "string",
          "description": "Target field id to apply the operation defined by operator to"
        },
        "values": {
          "type": "array",
          "description": "Comma-separated list of values to match against.  Valid for operators 'is', 'isNot', 'startsWith', 'notStartsWith', 'endsWith', 'notEndsWith', 'contains', and 'notContains'",
          "items": { "type": "string" }
        }
      }
    },
    "ModelResponse": { "type": "object" },
    "ResponseOfLpTemplateGetContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LpTemplateGetContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfLpFormResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LpFormResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfTagResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/TagResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "TagRequest": {
      "type": "object",
      "properties": {
        "tagType": { "type": "string", "description": "Type of program tag" },
        "tagValue": { "type": "string", "description": "Value of the tag" }
      }
    },
    "SegmentContent": {
      "type": "object",
      "required": ["content", "segmentId", "segmentName", "type"],
      "properties": {
        "content": {
          "type": "object",
          "description": "Type of content section"
        },
        "followupType": { "type": "string" },
        "followupValue": { "type": "string" },
        "segmentId": {
          "type": "integer",
          "format": "int32",
          "description": "Segmentation to which the section is linked"
        },
        "segmentName": {
          "type": "string",
          "description": "Name of the segment to display content section for"
        },
        "type": { "type": "string", "description": "Type of content section" }
      }
    },
    "ResponseOfFieldsMetaDataResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/FieldsMetaDataResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "TokenResponse": {
      "type": "object",
      "required": ["folder"],
      "properties": {
        "folder": {
          "type": "string",
          "example": "{\"id\":1001,\"type\":\"Program\"}",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        },
        "tokens": {
          "type": "array",
          "description": "List of tokens in the folder",
          "items": { "$ref": "#/definitions/TokenDTO" }
        }
      }
    },
    "CreateEmailRequest": {
      "type": "object",
      "required": [
        "folder",
        "fromEmail",
        "fromName",
        "name",
        "replyEmail",
        "subject",
        "template"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "fromEmail": {
          "type": "string",
          "description": "From-address of the Email"
        },
        "fromName": {
          "type": "string",
          "description": "From-name of the Email"
        },
        "name": { "type": "string", "description": "Name of the email" },
        "operational": {
          "type": "boolean",
          "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
        },
        "replyEmail": {
          "type": "string",
          "description": "Reply-To address of the Email"
        },
        "subject": {
          "type": "string",
          "description": "Subject Line of the Email"
        },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the parent template"
        },
        "textOnly": {
          "type": "string",
          "description": "Setting to include text-only version of email when sent"
        }
      }
    },
    "EmailHeaderField": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "type": { "type": "string", "description": "Field type" },
        "value": { "type": "string", "description": "Value of field" }
      }
    },
    "EmailTemplateResponse": {
      "type": "object",
      "required": ["folder", "status"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Template version type",
          "enum": [1, 2]
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "EmailTemplateUsedByResponse": {
      "type": "object",
      "required": ["id", "name", "type", "status", "updatedAt"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "type": { "type": "string", "description": "Type of asset" },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        }
      }
    },
    "FormUsedByResponse": {
      "type": "object",
      "required": ["id", "name", "type", "status", "updatedAt"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "type": { "type": "string", "description": "Type of asset" },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        }
      }
    },
    "ResponseOfThankYouPageResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ThankYouPageResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ChannelResponse": {
      "type": "object",
      "required": [
        "applicableProgramType",
        "createdAt",
        "id",
        "name",
        "updatedAt"
      ],
      "properties": {
        "applicableProgramType": {
          "type": "string",
          "description": "Types of programs to which the channel can apply"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the channel was created"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the Channel"
        },
        "name": { "type": "string", "description": "Name of the Channel" },
        "progressionStatuses": {
          "type": "array",
          "description": "List of available statuses for members of programs with the channel",
          "items": { "$ref": "#/definitions/ChannelProgression" }
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the channel was most recently updated"
        }
      }
    },
    "EmailModuleResponse": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the email module"
        }
      }
    },
    "EmailVariableResponse": {
      "type": "object",
      "required": ["name", "value", "moduleScope"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the email variable"
        },
        "value": {
          "type": "string",
          "description": "Value of the email variable"
        },
        "moduleScope": {
          "type": "boolean",
          "description": "Returns true for local variables else returns false"
        },
        "moduleId": {
          "type": "string",
          "description": "Returns the moduleId associated with the variable, only in case of local variable"
        }
      }
    },
    "SmartCampaignResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description",
        "type",
        "isSystem",
        "isActive",
        "isRequestable",
        "recurrence",
        "qualificationRuleType",
        "qualificationRuleInterval",
        "qualificationRuleUnit",
        "maxMembers",
        "isCommunicationLimitEnabled",
        "smartListId",
        "flowId",
        "folder",
        "createdAt",
        "updatedAt",
        "workspace",
        "status"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the smart campaign (system managed)"
        },
        "name": {
          "type": "string",
          "description": "Name of the smart campaign"
        },
        "description": {
          "type": "string",
          "description": "Description of the smart campaign"
        },
        "type": {
          "type": "string",
          "description": "Type of the smart campaign. Batch: has at least one filter and no triggers. Trigger: has at least one trigger. Default: has no smart list rules",
          "enum": ["batch", "default", "trigger"]
        },
        "isSystem": {
          "type": "boolean",
          "description": "Whether smart campaign is system managed.  Defaults to false"
        },
        "isActive": {
          "type": "boolean",
          "description": "Whether smart campaign is active.  Defaults to false"
        },
        "isRequestable": {
          "type": "boolean",
          "description": "Whether smart campaign is requestable (is active and contains 'Campaign is Requested' trigger with Source of 'Web Service API').  Defaults to false"
        },
        "recurrence": {
          "description": "Recurrence schedule of batch smart campaign",
          "$ref": "#/definitions/Recurrence"
        },
        "qualificationRuleType": {
          "type": "string",
          "description": "Type of qualification rule.  Defaults to 'once'",
          "enum": ["once", "any", "interval"]
        },
        "qualificationRuleInterval": {
          "type": "integer",
          "description": "Interval of qualification rule.  Only set when qualificationRuleType is 'interval'"
        },
        "qualificationRuleUnit": {
          "type": "string",
          "description": "Unit of measure of qualification rule.  Only set when qualificationRuleType is 'interval'",
          "enum": ["hour", "day", "week", "month"]
        },
        "maxMembers": {
          "type": "integer",
          "format": "int32",
          "description": "Smart campaign membership limit"
        },
        "isCommunicationLimitEnabled": {
          "type": "boolean",
          "description": "Whether smart campaign communication limit is enabled (i.e. block non-operational emails).  Defaults to false"
        },
        "smartListId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the smart campaign's child smart list"
        },
        "flowId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the smart campaign's child flow"
        },
        "parentProgramId": {
          "type": "integer",
          "format": "int32",
          "description": "Parent program Id.  Present if smart campaign is under program or nested folder"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the smart campaign was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the smart campaign was most recently updated"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the smart campaign workspace"
        },
        "computedUrl": {
          "type": "string",
          "description": "URL to asset in Marketo Engage"
        },
        "status": {
          "type": "string",
          "description": "Status of smart campaign",
          "enum": [
            "Inactive",
            "Single Run",
            "Invalid",
            "Recurring Run",
            "Active",
            "Requested",
            "Never Run"
          ]
        }
      }
    },
    "CreateSnippetRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the snippet"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": { "type": "string", "description": "Name of the snippet" }
      }
    },
    "CreateSmartCampaignRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the smart campaign"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the smart campaign"
        }
      }
    },
    "UpdateSmartCampaignRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the smart campaign"
        },
        "name": {
          "type": "string",
          "description": "Name of the smart campaign"
        }
      }
    },
    "CloneSmartCampaignRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the smart campaign"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the smart campaign"
        }
      }
    },
    "ResponseOfEmailResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfGetEmailFullContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/GetEmailFullContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfGetLandingPageFullContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/GetLandingPageFullContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfEmailCCFieldsResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailCCFields" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfSmartListResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SmartListResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfSmartListResponseWithRules": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SmartListResponseWithRules" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "Recurrence": {
      "type": "object",
      "required": [
        "startAt",
        "endAt",
        "intervalType",
        "interval",
        "weekdayOnly",
        "weekdayMask",
        "dayOfMonth",
        "dayOfWeek",
        "weekOfMonth"
      ],
      "properties": {
        "startAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime of the first scheduled campaign to run. Required if setting recurrence. Not required to create a smart campaign that has no recurrence"
        },
        "endAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime after which no further runs will be automatically scheduled"
        },
        "intervalType": {
          "type": "string",
          "description": "Recurrence interval. Not required to create a smart campaign that has no recurrence",
          "enum": ["Daily", "Weekly", "Monthly"]
        },
        "interval": {
          "type": "integer",
          "format": "int32",
          "description": "Number of interval units between recurrences"
        },
        "weekdayOnly": {
          "type": "boolean",
          "description": "Only run smart campaign on weekdays. May only be set if intervalType is 'Daily'.  Defaults to false"
        },
        "weekdayMask": {
          "type": "array",
          "description": "String array of empty or one or more of 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'. May only be set if intervalType is 'Weekly'",
          "items": { "type": "string" }
        },
        "dayOfMonth": {
          "type": "integer",
          "format": "int32",
          "description": "Day of the month to recur. Permissible range 1-31. May only be set if intervalType is 'Monthly' and dayOfWeek and weekOfMonth are unset."
        },
        "dayOfWeek": {
          "type": "string",
          "format": "int32",
          "description": "Day of the week to recur. May only be set if dayOfMonth is not set, and weekOfMonth is set",
          "enum": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ]
        },
        "weekOfMonth": {
          "type": "integer",
          "format": "int32",
          "description": "Week of the month to recur. Permissible range 1-4. May only be set if dayOfMonth is not set, and dayOfWeek is set"
        }
      }
    },
    "SmartListResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description",
        "createdAt",
        "updatedAt",
        "url",
        "folder",
        "workspace"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the smart list"
        },
        "name": { "type": "string", "description": "Name of the smart list" },
        "description": {
          "type": "string",
          "description": "Description of the smart list"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the smart list was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the smart list was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the smart list in the Marketo UI"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "SmartListResponseWithRules": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description",
        "createdAt",
        "updatedAt",
        "url",
        "folder",
        "workspace"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the smart list"
        },
        "name": { "type": "string", "description": "Name of the smart list" },
        "description": {
          "type": "string",
          "description": "Description of the smart list"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the smart list was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the smart list was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the smart list in the Marketo UI"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        },
        "rules": {
          "description": "Rules contained in the smart list",
          "$ref": "#/definitions/SmartListRules"
        }
      }
    },
    "ResponseOfStaticListResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/StaticListResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "StaticListResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description",
        "createdAt",
        "updatedAt",
        "url",
        "folder",
        "workspace"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the static list"
        },
        "name": { "type": "string", "description": "Name of the static list" },
        "description": {
          "type": "string",
          "description": "Description of the static list"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the static list was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the static list was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the static list in the Marketo UI"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        },
        "computedUrl": { "type": "string" }
      }
    },
    "ResponseOfUpdateEmailFullContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/UpdateEmailFullContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfobject": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": { "type": "array", "items": { "type": "object" } },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "AddFormFieldRequest": {
      "type": "object",
      "required": ["fieldId"],
      "properties": {
        "blankFields": {
          "type": "integer",
          "format": "int32",
          "description": "Number of blank fields to show when progressive profiling is enabled"
        },
        "defaultValue": {
          "type": "string",
          "description": "Optional default value for the field"
        },
        "fieldId": { "type": "string", "description": "Id of the field" },
        "fieldWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the input or select element"
        },
        "formPrefill": {
          "type": "boolean",
          "description": "Whether the field should prefill.  Default true"
        },
        "isSensitive": {
          "type": "boolean",
          "description": "Whether the field is marked as sensitive.  Default false"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text for the field"
        },
        "initiallyChecked": {
          "type": "boolean",
          "description": "Whether the field should be checked upon loading.  Default false"
        },
        "instructions": {
          "type": "string",
          "description": "Instructions for the field"
        },
        "label": { "type": "string", "description": "Label of the field" },
        "labelToRight": {
          "type": "boolean",
          "description": "Whether the field label should be displayed to the right of the input/select element. Default false"
        },
        "labelWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the field label element"
        },
        "maskInput": {
          "type": "string",
          "description": "Optional input mask for the field"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum length for text type fields"
        },
        "maxValue": {
          "type": "number",
          "format": "float",
          "description": "Maximum value accepted by the field"
        },
        "minValue": {
          "type": "number",
          "format": "float",
          "description": "Minimum value accepted by the field"
        },
        "multiSelect": {
          "type": "boolean",
          "description": "Whether the field should allow multiple selections. Default false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required to submit the form.  Default false"
        },
        "validationMessage": {
          "type": "string",
          "description": "Validation message to display on failed validation"
        },
        "values": {
          "type": "string",
          "description": "Comma-separated list of accepted values for the field.  Only for select-field types"
        },
        "visibleLines": {
          "type": "integer",
          "format": "int32",
          "description": "Number of lines to display for the field element"
        }
      }
    },
    "ResponseOfEmailTemplateContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailTemplateContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "UpdateLandingPageDynamicContentRequest": {
      "type": "object",
      "properties": {
        "backgroundColor": {
          "type": "string",
          "description": "background-color property of the HTML section"
        },
        "borderColor": {
          "type": "string",
          "description": "border-color property of the HTML section"
        },
        "borderStyle": {
          "type": "string",
          "description": "border-style property of the HTML section"
        },
        "borderWidth": {
          "type": "string",
          "description": "border-width property of the HTML section"
        },
        "height": {
          "type": "string",
          "description": "height property of the HTML section"
        },
        "hideDesktop": {
          "type": "boolean",
          "description": "Hide the section when displayed on a desktop browser.  Default false"
        },
        "hideMobile": {
          "type": "boolean",
          "description": "Hide the section when displayed on a mobile browser.  Default false"
        },
        "imageOpenNewWindow": { "type": "string" },
        "left": {
          "type": "string",
          "description": "left property of the HTML section"
        },
        "linkUrl": {
          "type": "string",
          "description": "URL parameter of a link type section"
        },
        "opacity": {
          "type": "string",
          "description": "opacity property of the HTML section"
        },
        "segment": {
          "type": "string",
          "description": "Name of the segment to display content section for"
        },
        "top": {
          "type": "string",
          "description": "top property of the HTML section"
        },
        "type": { "type": "string", "description": "Type of content section" },
        "value": { "type": "string", "description": "Type of content section" },
        "width": {
          "type": "string",
          "description": "width property of the HTML section"
        },
        "zIndex": {
          "type": "string",
          "description": "z-index property of the HTML section"
        }
      }
    },
    "ResponseOfSnippetContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SnippetContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "UpdateEmailDynamicContentRequest": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "altText": {
          "type": "string",
          "description": "Sets the value of the alt parameter for the resulting img element"
        },
        "externalUrl": { "type": "string" },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Overrides naitve height of the image.  The resulting file will be resized to the given height"
        },
        "image": {
          "type": "string",
          "description": "Multipart file that allows you to add an image from your computer"
        },
        "linkUrl": { "type": "string" },
        "overWrite": {
          "type": "boolean",
          "description": "Allows overwriting of the existing image content section"
        },
        "style": {
          "type": "string",
          "description": "Sets the value of the style parameter for the content section"
        },
        "type": {
          "type": "string",
          "description": "Type of content to set for the section.",
          "enum": ["Text", "DynamicContent", "Snippet"]
        },
        "value": {
          "type": "string",
          "description": "Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed"
        },
        "videoUrl": {
          "type": "string",
          "description": "Sets the Url of the video element.  Videos must be either from YouTube or Vimeo"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Overrides native width of the image.  The resulting file will be resized to the given width"
        }
      }
    },
    "AddFormFieldVisibilityRequest": {
      "type": "object",
      "properties": {
        "visibilityRule": { "$ref": "#/definitions/FormFieldVisibilityRequest" }
      }
    },
    "CreateTokenRequest": {
      "type": "object",
      "required": ["folderType", "name", "type", "value"],
      "properties": {
        "folderType": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'",
          "enum": ["Program", "Folder"]
        },
        "name": {
          "type": "string",
          "description": "Name of the token. Max length is 50 characters)"
        },
        "type": {
          "type": "string",
          "description": "Type of the token",
          "enum": [
            "date",
            "number",
            "rich text",
            "score",
            "sfdc campaign",
            "text"
          ]
        },
        "value": { "type": "string", "description": "Value of the token" }
      }
    },
    "ResponseOfLpTemplateResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LpTemplateResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "LpTemplateGetContentResponse": {
      "type": "object",
      "required": ["content", "enableMunchkin", "id", "status", "templateType"],
      "properties": {
        "content": {
          "type": "string",
          "description": "HTML content of the landing page template"
        },
        "enableMunchkin": {
          "type": "boolean",
          "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique integer id of the template"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "templateType": {
          "type": "string",
          "description": "Type of template to create.  Defaults to freeForm",
          "enum": ["guided", "freeForm"]
        }
      }
    },
    "FormVisibilityRuleDTO": {
      "type": "object",
      "properties": {
        "altLabel": { "type": "string" },
        "operator": { "type": "string" },
        "picklistFilterValues": {
          "type": "array",
          "items": { "$ref": "#/definitions/PickListDTO" }
        },
        "subjectField": { "type": "string" },
        "values": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfLandingPageVariableResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LandingPageVariableResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "CreateLandingPageRequest": {
      "type": "object",
      "required": ["folder", "name", "template"],
      "properties": {
        "customHeadHTML": {
          "type": "string",
          "description": "Any custom HTML to embed in the <head> tag of the page"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "facebookOgTags": {
          "type": "string",
          "description": "Any OpenGraph meta tags to apply to the page"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "keywords": { "type": "string" },
        "mobileEnabled": {
          "type": "boolean",
          "description": "Whether the page has mobile viewing enabled.  Free-form pages only.  Default false"
        },
        "name": { "type": "string", "description": "Name of the landing page" },
        "prefillForm": {
          "type": "boolean",
          "description": "Boolean to toggle whether forms embedded in the page will prefill.  Default false"
        },
        "robots": {
          "type": "string",
          "description": "Robots directives to apply to the pages meta tags"
        },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the template used"
        },
        "title": {
          "type": "string",
          "description": "Title element of the landing page"
        },
        "urlPageName": {
          "type": "string",
          "description": "URL path of the page.  Derived from the name field if unset"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "PickListDTO": {
      "type": "object",
      "properties": {
        "isDefault": { "type": "boolean" },
        "label": { "type": "string" },
        "selected": { "type": "boolean" },
        "value": { "type": "string" }
      }
    },
    "SegmentsResponse": {
      "type": "object",
      "required": ["segmentationId"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "segmentationId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the Segmentation"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        }
      }
    },
    "ResponseOfEmailTemplateResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailTemplateResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfEmailTemplateUsedByResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailTemplateUsedByResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfFormUsedByResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/FormUsedByResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "CreateLpTemplateRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the landing page template"
        },
        "enableMunchkin": {
          "type": "boolean",
          "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the landing page template"
        },
        "templateType": {
          "type": "string",
          "description": "Type of template to create.  Defaults to freeForm",
          "enum": ["guided", "freeForm"]
        }
      }
    },
    "UpdateThankYouPageRequest": {
      "type": "object",
      "properties": {
        "thankyou": {
          "type": "array",
          "description": "JSON array of followup rules",
          "items": { "$ref": "#/definitions/ThankYouPageRequest" }
        }
      }
    },
    "ProgramResponse": {
      "type": "object",
      "required": ["channel", "costs", "folder", "status", "tags", "type"],
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel of the program"
        },
        "costs": {
          "type": "array",
          "description": "Lists of associated period costs",
          "items": { "$ref": "#/definitions/Costs" }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "End date of the program.  Applicable to event, email, and webinar type programs"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "sfdcId": {
          "type": "string",
          "description": "SFDC id of the program if linked to an SFDC campaign"
        },
        "sfdcName": {
          "type": "string",
          "description": "Name of the linked SFDC campaign if applicable"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Start date of program.  Applicable to event, email and webinar type programs"
        },
        "status": {
          "type": "string",
          "description": "Status of the program.  Only valid for Email and engagement program types.",
          "enum": ["locked", "unlocked", "on", "off"]
        },
        "tags": {
          "type": "array",
          "description": "List of associated program tags",
          "items": { "$ref": "#/definitions/Tags" }
        },
        "type": {
          "type": "string",
          "description": "Type of the program",
          "enum": ["default", "event", "webinar", "nurture"]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "FileResponse": {
      "type": "object",
      "required": [
        "createdAt",
        "folder",
        "id",
        "mimeType",
        "name",
        "size",
        "updatedAt",
        "url"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the file was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the file"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/FileFolder"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the file"
        },
        "mimeType": {
          "type": "string",
          "description": "MIME type of the file"
        },
        "name": { "type": "string", "description": "Name of the file" },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "Size of the file in bytes"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the file was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Publically accessible URL of the file"
        }
      }
    },
    "TagResponseGetAll": {
      "type": "object",
      "required": ["applicableProgramTypes", "required", "tagType"],
      "properties": {
        "applicableProgramTypes": {
          "type": "string",
          "description": "Types of programs to which the tag can apply"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the tag is required for its applicable program types"
        },
        "tagType": { "type": "string", "description": "Name of the tag" }
      }
    },
    "ChannelProgression": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the program status"
        },
        "hidden": {
          "type": "boolean",
          "description": "Whether the status has been hidden"
        },
        "name": { "type": "string", "description": "Name of the status" },
        "type": { "type": "string", "description": "Type of the status" },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Step number of the status"
        },
        "success": {
          "type": "boolean",
          "description": "Whether this status is a success step for program members"
        }
      }
    },
    "LandingPageContentResponse": {
      "type": "object",
      "required": ["id", "type"],
      "properties": {
        "content": {
          "type": "object",
          "description": "Content of the section.  Expected values vary based on type.  Image: An image URL.  RichText: HTML Content.  HTML: HTML Content.  Form: A form id.  Rectangle: Empty. Snippet: A snippet id."
        },
        "followupType": {
          "type": "string",
          "description": "Follow-up behavior of a form.  Only available for form-type content sections.  Defaults to form defined behavior.",
          "enum": ["url", "lp", "formDefined"]
        },
        "followupValue": {
          "type": "string",
          "description": "Where to follow-up on form submission.  When followupType is lp, accepts the integer id of a landing page.  For url, it accepts a url string."
        },
        "formattingOptions": { "$ref": "#/definitions/JsonNode" },
        "id": {
          "type": "object",
          "description": "Id of the content section, may be a string or an int"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the content section.  Index orients the elements from lowest to highest"
        },
        "type": {
          "type": "string",
          "description": "Type of content section",
          "enum": [
            "Image",
            "SocialButton",
            "Form",
            "DynamicContent",
            "Rectangle",
            "Snippet",
            "RichText",
            "HTML",
            "Video",
            "Poll",
            "ReferralOffer",
            "Sweepstakes"
          ]
        }
      }
    },
    "UpdateEmailComponentContentRequest": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "altText": {
          "type": "string",
          "description": "Sets the value of the alt parameter for the resulting img element"
        },
        "externalUrl": { "type": "string" },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Overrides naitve height of the image.  The resulting file will be resized to the given height"
        },
        "image": {
          "type": "string",
          "description": "Multipart file that allows you to load an image from your computer"
        },
        "linkUrl": { "type": "string" },
        "overWrite": {
          "type": "boolean",
          "description": "Allows overwriting of the existing image content section"
        },
        "style": {
          "type": "string",
          "description": "Sets the value of the style parameter for the content section"
        },
        "textValue": { "type": "string" },
        "type": {
          "type": "string",
          "description": "Type of content to set for the section.",
          "enum": ["Text", "DynamicContent", "Snippet"]
        },
        "value": {
          "type": "string",
          "description": "Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed"
        },
        "videoUrl": {
          "type": "string",
          "description": "Sets the Url of the video element.  Videos must be either from YouTube or Vimeo"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Overrides native width of the image.  The resulting file will be resized to the given width"
        }
      }
    },
    "LandingPageResponse": {
      "type": "object",
      "required": ["customHeadHTML", "facebookOgTags", "robots", "title"],
      "properties": {
        "URL": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "computedUrl": { "type": "string" },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "customHeadHTML": {
          "type": "string",
          "description": "Any custom HTML to embed in the <head> tag of the page"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "facebookOgTags": {
          "type": "string",
          "description": "Any OpenGraph meta tags to apply to the page"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "formPrefill": {
          "type": "boolean",
          "description": "Boolean to toggle whether forms embedded in the page will prefill.  Default false"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "keywords": { "type": "string" },
        "mobileEnabled": {
          "type": "boolean",
          "description": "Whether the page has mobile viewing enabled.  Free-form pages only.  Default false"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "robots": {
          "type": "string",
          "description": "Robots directives to apply to the pages meta tags"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the template used"
        },
        "title": {
          "type": "string",
          "description": "Title element of the landing page"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "LandingPageRedirectRule": {
      "type": "object",
      "required": [
        "id",
        "redirectFromUrl",
        "redirectToUrl",
        "hostname",
        "redirectFrom",
        "redirectTo",
        "createdAt",
        "updatedAt"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Internal id for landing page redirect rule"
        },
        "redirectFromUrl": {
          "type": "string",
          "description": "Redirect 'from' URL of the Landing Page.  Combination of the hostname and redirectFrom landing page or path"
        },
        "redirectToUrl": {
          "type": "string",
          "description": "Redirect 'to' URL of the Landing Page.  Could be a Marketo landing page or non-Marketo URL."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname for the landing pages.  Branding domain or alias.  Max 255 characters."
        },
        "redirectFrom": {
          "description": "JSON representation of redirect from landing page, with members 'type' which may be 'landingPageId' or 'path', and 'value'",
          "$ref": "#/definitions/RedirectFrom"
        },
        "redirectTo": {
          "description": "JSON representation of redirect to landing page, with members 'type' which may be 'landingPageId' or 'url', and 'value'",
          "$ref": "#/definitions/RedirectTo"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the landing page redirect rule was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the landing page redirect rule was most recently updated"
        }
      }
    },
    "LandingPageDomain": {
      "type": "object",
      "required": ["hostname", "type"],
      "properties": {
        "hostname": {
          "type": "string",
          "description": "The hostname for the landing pages"
        },
        "type": {
          "type": "string",
          "description": "Specifies type of hostname",
          "enum": ["domain", "domain-alias"]
        }
      }
    },
    "ResponseOfFileResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/FileResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "FolderResponse": {
      "type": "object",
      "required": [
        "createdAt",
        "folderId",
        "folderType",
        "id",
        "isArchive",
        "name",
        "parent",
        "path",
        "updatedAt",
        "url"
      ],
      "properties": {
        "accessZoneId": { "type": "integer", "format": "int32" },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the folder was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the folder"
        },
        "folderId": {
          "description": "Id of the folder",
          "$ref": "#/definitions/Folder"
        },
        "folderType": {
          "type": "string",
          "description": "Type of folder",
          "enum": [
            "Email",
            "Email Batch Program",
            "Email Template",
            "Image",
            "Landing Page",
            "Landing Page Form",
            "Landing Page Template",
            "Marketing Event",
            "Marketing Folder",
            "Marketing Program",
            "Nurture Program",
            "Report",
            "Revenue Cycle Model",
            "Zone"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the folder"
        },
        "isArchive": {
          "type": "boolean",
          "description": "Archival status of the folder"
        },
        "isSystem": {
          "type": "boolean",
          "description": "Whether the folder is system-managed"
        },
        "name": {
          "type": "string",
          "description": "Name of the folder.  Not applicable for Programs"
        },
        "parent": {
          "description": "Parent folder reference",
          "$ref": "#/definitions/Folder"
        },
        "path": { "type": "string", "description": "Path of the folder" },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the folder was last updated"
        },
        "url": { "type": "string", "description": "Url of the folder" },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "CreateFileRequest": {
      "type": "object",
      "required": ["file", "folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "file": {
          "type": "string",
          "description": "Multipart file.  Content of the file."
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "insertOnly": {
          "type": "boolean",
          "description": "Whether the calls hould fail if there is already an existing file with the same name"
        },
        "name": { "type": "string", "description": "Name of the File" }
      }
    },
    "UpdateFieldPosition": {
      "type": "object",
      "required": ["columnNumber", "fieldName", "rowNumber"],
      "properties": {
        "columnNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Column number of the field"
        },
        "fieldList": {
          "type": "array",
          "description": "List of positions inside the fields.  Only valid if the target is a fieldset",
          "items": { "$ref": "#/definitions/UpdateFieldPosition" }
        },
        "fieldName": { "type": "string", "description": "Id of the field" },
        "rowNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Row number of the field"
        }
      }
    },
    "LpFormFieldResponse": {
      "type": "object",
      "properties": {
        "blankFields": { "type": "integer", "format": "int32" },
        "columnNumber": { "type": "integer", "format": "int32" },
        "dataType": { "type": "string" },
        "defaultValue": { "type": "string" },
        "fieldMetaData": { "type": "object" },
        "fieldWidth": { "type": "integer", "format": "int32" },
        "fields": { "type": "array", "items": { "type": "string" } },
        "formPrefill": { "type": "boolean" },
        "isSensitive": { "type": "boolean" },
        "hintText": { "type": "string" },
        "id": { "type": "string" },
        "instructions": { "type": "string" },
        "label": { "type": "string" },
        "labelWidth": { "type": "integer", "format": "int32" },
        "maxLength": { "type": "integer", "format": "int32" },
        "required": { "type": "boolean" },
        "rowNumber": { "type": "integer", "format": "int32" },
        "text": { "type": "string" },
        "validationMessage": { "type": "object" },
        "visibilityRules": {
          "$ref": "#/definitions/FormFieldVisibilityRuleResponse"
        }
      }
    },
    "TagResponse": {
      "type": "object",
      "required": ["applicableProgramTypes", "required", "tagType"],
      "properties": {
        "allowableValues": {
          "type": "string",
          "description": "The list of acceptable values for the tag type"
        },
        "applicableProgramTypes": {
          "type": "string",
          "description": "Types of programs to which the tag can apply"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the tag is required for its applicable program types"
        },
        "tagType": { "type": "string", "description": "Name of the tag" }
      }
    },
    "FormVisibilityRuleResponse": {
      "type": "object",
      "properties": {
        "formFieldId": { "type": "string" },
        "ruleType": { "type": "string" },
        "rules": {
          "type": "array",
          "items": { "$ref": "#/definitions/FormVisibilityRuleDTO" }
        }
      }
    },
    "MultipartFile": { "type": "object" },
    "ResponseOfTokenResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/TokenResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "UpdateLpTemplateRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the landing page template"
        },
        "enableMunchkin": {
          "type": "boolean",
          "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
        },
        "name": {
          "type": "string",
          "description": "Name of the landing page template"
        }
      }
    },
    "ResponseOfIdResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/IdResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfSendSampleResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SendSampleResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "CloneEmailRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the new email asset"
        },
        "operational": {
          "type": "boolean",
          "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
        }
      }
    },
    "SendSampleEmailRequest": {
      "type": "object",
      "required": ["emailAddress"],
      "properties": {
        "emailAddress": {
          "type": "string",
          "description": "Email address to receive sample email"
        },
        "leadId": {
          "type": "string",
          "description": "Id of a lead to impersonate.  Tokens and dynamic content will be populated as though it were sent to the lead."
        },
        "textOnly": {
          "type": "boolean",
          "description": "Whether to send to text only version along with the HTML version.  Default false."
        }
      }
    },
    "Tags": {
      "type": "object",
      "required": ["tagType", "tagValue"],
      "properties": {
        "tagType": { "type": "string", "description": "Name of the tag" },
        "tagValue": { "type": "string", "description": "Value of the tag" }
      }
    },
    "UpdateFileContentRequest": {
      "type": "object",
      "required": ["file", "id"],
      "properties": {
        "file": {
          "type": "string",
          "description": "Multipart file. Content of the file."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the file"
        }
      }
    },
    "UpdateEmailFullContentRequest": {
      "type": "object",
      "required": ["content"],
      "properties": {
        "content": {
          "type": "string",
          "description": "Multipart file. File containing HTML document to update with.  File cannot include JavaScript or script tags."
        }
      }
    },
    "LandingPageVariableResponse": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": { "type": "string", "description": "Integer id of the variable" },
        "type": { "type": "string", "description": "Type of the variable" },
        "value": { "type": "object", "description": "Value of the variable" }
      }
    },
    "ResponseOfBrowseAllPrograms": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/BrowseAllPrograms" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfFolderResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/FolderResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfFolderContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/FolderContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfSegmentationResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SegmentationResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "FormKnownVisitorDTO": {
      "type": "object",
      "properties": {
        "template": { "type": "string" },
        "type": { "type": "string" }
      }
    },
    "ResponseOfEmailContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfSnippetResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SnippetResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "AddFormFieldSetRequest": {
      "type": "object",
      "required": ["label"],
      "properties": {
        "label": { "type": "string", "description": "Label of the fieldset" }
      }
    },
    "IdResponse": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the asset"
        }
      }
    },
    "SendSampleResponse": {
      "type": "object",
      "required": ["service", "result"],
      "properties": {
        "service": {
          "type": "string",
          "description": "API call name",
          "enum": ["sendTestEmail"]
        },
        "result": {
          "type": "boolean",
          "description": "Whether call was successful"
        }
      }
    },
    "UpdateSnippetDynamicContentRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of dynamic content section",
          "enum": ["Typeofcontent.Either'HTML'or'Text'"]
        },
        "value": {
          "type": "string",
          "description": "Value of the dynamic content section"
        }
      }
    },
    "EmailDynamicContentResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "description": "List of variations in the section",
          "items": { "$ref": "#/definitions/EmailDynamicContentItem" }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the section was created"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the dnamic content section"
        },
        "segmentation": {
          "type": "integer",
          "format": "int32",
          "description": "Segmentation to which the section is linked"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the section was last updated"
        }
      }
    },
    "CloneLpTemplateRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the landing page template"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the landing page template"
        }
      }
    },
    "CreateLpFormRequest": {
      "type": "object",
      "required": ["folder"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the form"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "fontFamily": {
          "type": "string",
          "description": "font-family property for the form"
        },
        "fontSize": {
          "type": "string",
          "description": "font-size property of the form"
        },
        "knownVisitor": {
          "description": "Known visitor behavior for the form",
          "$ref": "#/definitions/FormKnownVisitorDTO"
        },
        "labelPosition": {
          "type": "string",
          "description": "Default positioning of labels."
        },
        "language": { "type": "string", "description": "Language of the form" },
        "locale": { "type": "string", "description": "Locale of the form" },
        "name": { "type": "string", "description": "Name of the form" },
        "progressiveProfiling": {
          "type": "boolean",
          "description": "Whether progressive profiling is enabled for the form"
        },
        "theme": {
          "type": "string",
          "description": "CSS theme for the form to use"
        }
      }
    },
    "Costs": {
      "type": "object",
      "required": ["cost", "startDate"],
      "properties": {
        "cost": {
          "type": "integer",
          "format": "int32",
          "description": "Amount of the cost"
        },
        "note": { "type": "string", "description": "Notes on the cost" },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Start date of the period cost"
        }
      }
    },
    "FormFieldVisibilityRuleResponse": {
      "type": "object",
      "properties": {
        "ruleType": { "type": "string" },
        "rules": {
          "type": "array",
          "items": { "$ref": "#/definitions/FormVisibilityRuleDTO" }
        }
      }
    },
    "TokenDTO": {
      "type": "object",
      "properties": {
        "computedUrl": { "type": "string" },
        "name": { "type": "string" },
        "type": { "type": "string" },
        "value": { "type": "string" }
      }
    },
    "ThankYouPageRequest": {
      "type": "object",
      "required": [
        "followupType",
        "followupValue",
        "operator",
        "subjectField",
        "values"
      ],
      "properties": {
        "default": {
          "type": "boolean",
          "description": "When true, this is the default rule, and will be applied when a user does not qualify for any of the other rules"
        },
        "followupType": {
          "type": "string",
          "description": "Type of followup.  When set to url, will follow to the url set in followupValue.  When set to lp, will follow to the Landing page with the id given in followupValue"
        },
        "followupValue": {
          "type": "string",
          "description": "Where to follow to on submission.  Given as a URL or and Integer depending on followupType"
        },
        "operator": {
          "type": "string",
          "description": "Operator to evaluate aginst the subject field"
        },
        "subjectField": {
          "type": "string",
          "description": "Field to apply to operator to"
        },
        "values": {
          "type": "array",
          "description": "Comma-separated list of values to compare to with the operator",
          "items": { "type": "string" }
        }
      }
    },
    "FormThankYouPageDTO": {
      "type": "object",
      "properties": {
        "default": { "type": "boolean" },
        "followupType": { "type": "string" },
        "followupValue": { "type": "object" },
        "operator": { "type": "string" },
        "subjectField": { "type": "string" },
        "values": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfFormVisibilityRuleResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/FormVisibilityRuleResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "EmailDynamicContentItem": {
      "type": "object",
      "properties": {
        "content": { "type": "string" },
        "id": { "type": "string" },
        "segmentId": { "type": "string" },
        "segmentName": { "type": "string" },
        "type": { "type": "string" }
      }
    },
    "ResponseOfLandingPageDynamicContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LandingPageDynamicContentResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "AddRichTextRequest": {
      "type": "object",
      "required": ["text"],
      "properties": {
        "text": {
          "type": "string",
          "description": "Multipart file. HTML Content for the rich text field."
        }
      }
    },
    "Folder": {
      "type": "object",
      "required": ["id", "type"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the folder"
        },
        "type": {
          "type": "string",
          "description": "Type of folder",
          "enum": ["Folder", "Program"]
        }
      },
      "description": "JSON representation of a folder"
    },
    "SnippetFolder": {
      "type": "object",
      "required": ["value", "type", "folderName"],
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the folder"
        },
        "type": {
          "type": "string",
          "description": "Type of folder",
          "enum": ["Folder", "Program"]
        },
        "folderName": { "type": "string", "description": "Name of folder" }
      },
      "description": "JSON representation of a folder"
    },
    "RedirectFrom": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of redirect landing page",
          "enum": ["landingPageId", "path"]
        },
        "value": {
          "type": "string",
          "description": "Value for redirect landing page.  If type is 'path' this must not begin with forward slash"
        }
      },
      "description": "JSON representation of 'from' redirect landing page rule"
    },
    "RedirectTo": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of redirect landing page",
          "enum": ["landingPageId", "url"]
        },
        "value": {
          "type": "string",
          "description": "Value for redirect landing page"
        }
      },
      "description": "JSON representation of 'to' redirect landing page rule"
    },
    "SmartListRules": {
      "type": "object",
      "required": ["filterMatchType", "triggers", "filters"],
      "description": "JSON representation of smart list rules",
      "properties": {
        "filterMatchType": {
          "type": "string",
          "description": "Smart list filter match type (rule logic)",
          "enum": ["All", "Any", "Advanced"]
        },
        "triggers": {
          "type": "array",
          "description": "List of smart list triggers",
          "items": { "type": "string" }
        },
        "filters": {
          "type": "array",
          "description": "List of smart list filters",
          "items": { "$ref": "#/definitions/SmartListFilters" }
        }
      }
    },
    "SmartListFilters": {
      "type": "object",
      "required": [
        "id",
        "name",
        "ruleTypeId",
        "ruleType",
        "operator",
        "conditions"
      ],
      "description": "JSON representation of smart list filters",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the filter"
        },
        "name": { "type": "string", "description": "Name of filter" },
        "ruleTypeId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the rule type"
        },
        "ruleType": { "type": "string", "description": "Name of rule type" },
        "operator": { "type": "string", "description": "Name of operator" },
        "conditions": {
          "type": "array",
          "description": "List of smart list conditions",
          "items": { "$ref": "#/definitions/SmartListConditions" }
        }
      }
    },
    "SmartListConditions": {
      "type": "object",
      "required": [
        "activityAttributeId",
        "activityAttributeName",
        "operator",
        "values",
        "isPrimary"
      ],
      "description": "JSON representation of smart list conditions",
      "properties": {
        "activityAttributeId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the activity attribute"
        },
        "activityAttributeName": {
          "type": "string",
          "description": "Name of activity attribute"
        },
        "operator": { "type": "string", "description": "Value of operator" },
        "values": {
          "type": "array",
          "description": "List of values",
          "items": { "type": "string" }
        },
        "isPrimary": {
          "type": "boolean",
          "description": "Whether the condition is primary or not (first condition of the smart list)"
        }
      }
    },
    "EmailTemplateContentResponse": {
      "type": "object",
      "required": ["content", "id", "status"],
      "properties": {
        "content": {
          "type": "string",
          "description": "HTML content of the template"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique integer id of the email template"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      }
    },
    "GetEmailFullContentResponse": {
      "type": "object",
      "required": ["content", "id", "status"],
      "properties": {
        "content": {
          "type": "string",
          "description": "HTML content of the email"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique integer id of the email"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      }
    },
    "GetLandingPageFullContentResponse": {
      "type": "object",
      "required": ["content", "id", "status"],
      "properties": {
        "content": {
          "type": "string",
          "description": "HTML content of the landing page"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique integer id of the landing page"
        }
      }
    },
    "UpdateEmailFullContentResponse": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique integer id of the email"
        }
      }
    },
    "ResponseOfChannelResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ChannelResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfEmailModuleResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailModuleResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfEmailVariableResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/EmailVariableResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ResponseOfSmartCampaignResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SmartCampaignResponse" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "SegmentationResponse": {
      "type": "object",
      "required": ["folder", "status"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": { "type": "string", "description": "Name of the asset" },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "ResponseOfTagResponseGetAll": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": { "$ref": "#/definitions/Error" }
        },
        "requestId": { "type": "string" },
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/TagResponseGetAll" }
        },
        "success": { "type": "boolean" },
        "warnings": { "type": "array", "items": { "type": "string" } }
      }
    },
    "ReArrangeRequest": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": { "$ref": "#/definitions/UpdateFieldPosition" }
        }
      }
    },
    "Error": {
      "type": "object",
      "required": ["code", "message"],
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code of the error.  See full list of error codes <a href=\"https://developers.marketo.com/rest-api/error-codes/\">here</a>"
        },
        "message": {
          "type": "string",
          "description": "Message describing the cause of the error"
        }
      }
    },
    "SubmitButtonRequest": {
      "type": "object",
      "properties": {
        "buttonPosition": {
          "type": "integer",
          "format": "int32",
          "description": "Location in pixels of the button relative to the left of the form"
        },
        "buttonStyle": {
          "type": "string",
          "description": "Style of the button"
        },
        "label": {
          "type": "string",
          "description": "Label text of the button"
        },
        "waitingLabel": {
          "type": "string",
          "description": "Waiting text of the button"
        }
      }
    },
    "UpdateSnippetRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the snippet"
        },
        "isArchive": {
          "type": "string",
          "description": "Archival status of the snippet"
        },
        "name": { "type": "string", "description": "Name of the snippet" }
      }
    },
    "FieldsMetaDataResponse": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "dataType": { "type": "string", "description": "Type of field" },
        "defaultValue": {
          "type": "string",
          "description": "Optional default value for the field"
        },
        "description": {
          "type": "string",
          "description": "Description of the field"
        },
        "fieldMaskValues": {
          "type": "string",
          "description": "Optional input mask for the field"
        },
        "fieldWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the input or select element"
        },
        "id": { "type": "string", "description": "Id of the field" },
        "initiallyChecked": {
          "type": "boolean",
          "description": "Whether the field should be checked upon loading.  Default false"
        },
        "isLabelToRight": {
          "type": "boolean",
          "description": "Whether the field label should be displayed to the right of the input/select element. Default false"
        },
        "isMultiselect": {
          "type": "boolean",
          "description": "Whether the field should allow multiple selections. Default false"
        },
        "isRequired": {
          "type": "boolean",
          "description": "Whether the field is required to submit the form.  Default false"
        },
        "isSensitive": {
          "type": "boolean",
          "description": "Whether the field is marked as sensitive.  Default false"
        },
        "labelWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the field label element"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum length for text type fields"
        },
        "maximumNumber": {
          "type": "number",
          "format": "float",
          "description": "Maximum value accepted by the field"
        },
        "minimumNumber": {
          "type": "number",
          "format": "float",
          "description": "Minimum value accepted by the field"
        },
        "picklistValues": {
          "type": "string",
          "description": "Comma-separated list of available picklist values for the field"
        },
        "placeholderText": {
          "type": "string",
          "description": "Placeholder text for the field"
        },
        "validationMessage": {
          "type": "string",
          "description": "Validation message to display on failed validation"
        },
        "visibleRows": {
          "type": "integer",
          "format": "int32",
          "description": "Number of rows visible for progressive profiling"
        }
      }
    },
    "DeleteTokenRequest": {
      "type": "object",
      "properties": {
        "folderType": { "type": "string", "enum": ["Program", "Folder"] },
        "name": { "type": "string" },
        "type": { "type": "string" }
      }
    },
    "UpdateVariableRequest": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value to update variable with"
        },
        "moduleId": {
          "type": "string",
          "description": "Module that variable is associated with. Required for updating module variables. Not needed for global variables."
        }
      }
    },
    "UpdateEmailTemplateContentRequest": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "Content for the email template.  Multipart file."
        }
      }
    },
    "UpdateEmailComponentDataRequest": {
      "type": "object",
      "properties": {
        "fromEmail": {
          "description": "From-address of the Email",
          "$ref": "#/definitions/EmailHeaderField"
        },
        "fromName": {
          "description": "From-name of the Email",
          "$ref": "#/definitions/EmailHeaderField"
        },
        "replyTO": {
          "description": "Reply-To address of the Email",
          "$ref": "#/definitions/EmailHeaderField"
        },
        "subject": {
          "description": "Subject Line of the Email",
          "$ref": "#/definitions/EmailHeaderField"
        }
      }
    }
  }
}
